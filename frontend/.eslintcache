[{"D:\\git-projects\\funday\\frontend\\src\\index.js":"1","D:\\git-projects\\funday\\frontend\\src\\App.jsx":"2","D:\\git-projects\\funday\\frontend\\src\\reportWebVitals.js":"3","D:\\git-projects\\funday\\frontend\\src\\store\\store.js":"4","D:\\git-projects\\funday\\frontend\\src\\routes.js":"5","D:\\git-projects\\funday\\frontend\\src\\store\\reducers\\index.js":"6","D:\\git-projects\\funday\\frontend\\src\\pages\\Home.jsx":"7","D:\\git-projects\\funday\\frontend\\src\\pages\\Workspace.jsx":"8","D:\\git-projects\\funday\\frontend\\src\\pages\\About.jsx":"9","D:\\git-projects\\funday\\frontend\\src\\pages\\UserDetails.jsx":"10","D:\\git-projects\\funday\\frontend\\src\\cmps\\Navbar.jsx":"11","D:\\git-projects\\funday\\frontend\\src\\store\\reducers\\userReducer.js":"12","D:\\git-projects\\funday\\frontend\\src\\store\\reducers\\systemReducer.js":"13","D:\\git-projects\\funday\\frontend\\src\\store\\reducers\\workspaceReducer.js":"14","D:\\git-projects\\funday\\frontend\\src\\store\\reducers\\boardReducer.js":"15","D:\\git-projects\\funday\\frontend\\src\\store\\actions\\workspaceActions.js":"16","D:\\git-projects\\funday\\frontend\\src\\services\\folderService.js":"17","D:\\git-projects\\funday\\frontend\\src\\store\\actions\\userActions.js":"18","D:\\git-projects\\funday\\frontend\\src\\services\\boardService.js":"19","D:\\git-projects\\funday\\frontend\\src\\services\\workspaceService.js":"20","D:\\git-projects\\funday\\frontend\\src\\cmps\\BoardToolbarMenu.jsx":"21","D:\\git-projects\\funday\\frontend\\src\\cmps\\LoginModal.jsx":"22","D:\\git-projects\\funday\\frontend\\src\\cmps\\BoardToolbar.jsx":"23","D:\\git-projects\\funday\\frontend\\src\\cmps\\BoardMain.jsx":"24","D:\\git-projects\\funday\\frontend\\src\\cmps\\BoardHeader.jsx":"25","D:\\git-projects\\funday\\frontend\\src\\cmps\\BoardDetails.jsx":"26","D:\\git-projects\\funday\\frontend\\src\\cmps\\ConversationModal.jsx":"27","D:\\git-projects\\funday\\frontend\\src\\cmps\\NewWorkspaceBoardMain.jsx":"28","D:\\git-projects\\funday\\frontend\\src\\cmps\\UploadImg.jsx":"29","D:\\git-projects\\funday\\frontend\\src\\store\\actions\\systemActions.js":"30","D:\\git-projects\\funday\\frontend\\src\\services\\userService.js":"31","D:\\git-projects\\funday\\frontend\\src\\services\\httpService.js":"32","D:\\git-projects\\funday\\frontend\\src\\services\\cloudinarySerivice.js":"33","D:\\git-projects\\funday\\frontend\\src\\cmps\\FolderList.jsx":"34","D:\\git-projects\\funday\\frontend\\src\\cmps\\BoardList.jsx":"35","D:\\git-projects\\funday\\frontend\\src\\cmps\\ToolbarMenuActionsBtn.jsx":"36","D:\\git-projects\\funday\\frontend\\src\\cmps\\UpdateWorkspace.jsx":"37","D:\\git-projects\\funday\\frontend\\src\\cmps\\FavoriteBoards.jsx":"38","D:\\git-projects\\funday\\frontend\\src\\cmps\\PopupModal.jsx":"39","D:\\git-projects\\funday\\frontend\\src\\cmps\\Search.jsx":"40","D:\\git-projects\\funday\\frontend\\src\\cmps\\ToolbarOptionsModal.jsx":"41","D:\\git-projects\\funday\\frontend\\src\\cmps\\TablePreview.jsx":"42","D:\\git-projects\\funday\\frontend\\src\\cmps\\CreateWorkspace.jsx":"43","D:\\git-projects\\funday\\frontend\\src\\cmps\\TextareaEditor.jsx":"44","D:\\git-projects\\funday\\frontend\\src\\cmps\\WorkspaceIconPicker.jsx":"45","D:\\git-projects\\funday\\frontend\\src\\data\\shortColorPicker.js":"46","D:\\git-projects\\funday\\frontend\\src\\data\\iconsPicker.js":"47","D:\\git-projects\\funday\\frontend\\src\\data\\colorPicker.js":"48","D:\\git-projects\\funday\\frontend\\src\\cmps\\FolderPreview.jsx":"49","D:\\git-projects\\funday\\frontend\\src\\cmps\\BoardPreview.jsx":"50","D:\\git-projects\\funday\\frontend\\src\\cmps\\ToolbarMenuActionsBtnModal.jsx":"51","D:\\git-projects\\funday\\frontend\\src\\cmps\\CreateBoard.jsx":"52","D:\\git-projects\\funday\\frontend\\src\\cmps\\ForwardModal.jsx":"53","D:\\git-projects\\funday\\frontend\\src\\cmps\\WorkspaceList.jsx":"54","D:\\git-projects\\funday\\frontend\\src\\cmps\\GoogleOauth.jsx":"55","D:\\git-projects\\funday\\frontend\\src\\cmps\\Task.jsx":"56","D:\\git-projects\\funday\\frontend\\src\\cmps\\TableColumnPreview.jsx":"57","D:\\git-projects\\funday\\frontend\\src\\cmps\\PinCheckbox.jsx":"58","D:\\git-projects\\funday\\frontend\\src\\cmps\\AvailableFoldersList.jsx":"59","D:\\git-projects\\funday\\frontend\\src\\cmps\\TaskStatus.jsx":"60","D:\\git-projects\\funday\\frontend\\src\\cmps\\TaskCheckBox.jsx":"61","D:\\git-projects\\funday\\frontend\\src\\cmps\\TaskText.jsx":"62","D:\\git-projects\\funday\\frontend\\src\\cmps\\TaskConversation.jsx":"63","D:\\git-projects\\funday\\frontend\\src\\cmps\\OwnerModal.jsx":"64","D:\\git-projects\\funday\\frontend\\src\\data\\stickers.js":"65","D:\\git-projects\\funday\\frontend\\src\\cmps\\StatusLabelPreview.jsx":"66","D:\\git-projects\\funday\\frontend\\src\\cmps\\UpdateLabelName.jsx":"67","D:\\git-projects\\funday\\frontend\\src\\cmps\\ActivitiesModal.jsx":"68","D:\\git-projects\\funday\\frontend\\src\\services\\socketService.js":"69","D:\\git-projects\\funday\\frontend\\src\\cmps\\task-cells-width.js":"70","D:\\git-projects\\funday\\frontend\\src\\cmps\\TaskNumbersColumn.jsx":"71","D:\\git-projects\\funday\\frontend\\src\\cmps\\DropdownModal.jsx":"72","D:\\git-projects\\funday\\frontend\\src\\cmps\\DropdownEditLabelPreview.jsx":"73","D:\\git-projects\\funday\\frontend\\src\\cmps\\TaskTimeline.jsx":"74","D:\\git-projects\\funday\\frontend\\src\\cmps\\TaskDate.jsx":"75","D:\\git-projects\\funday\\frontend\\src\\cmps\\TitleOptionsBtn.jsx":"76","D:\\git-projects\\funday\\frontend\\src\\cmps\\MultipleActionsModal.jsx":"77","D:\\git-projects\\funday\\frontend\\src\\data\\getTimePass.js":"78","D:\\git-projects\\funday\\frontend\\src\\cmps\\NotificationsModal.jsx":"79","D:\\git-projects\\funday\\frontend\\src\\cmps\\Loading.jsx":"80","D:\\git-projects\\funday\\frontend\\src\\data\\dynamicFaIcon.js":"81","D:\\git-projects\\funday\\frontend\\src\\cmps\\HomeBackground.jsx":"82","D:\\git-projects\\funday\\frontend\\src\\cmps\\Login.jsx":"83"},{"size":730,"mtime":1619014758375,"results":"84","hashOfConfig":"85"},{"size":614,"mtime":1619010656035,"results":"86","hashOfConfig":"85"},{"size":362,"mtime":499162500000,"results":"87","hashOfConfig":"85"},{"size":333,"mtime":1611427739487,"results":"88","hashOfConfig":"85"},{"size":510,"mtime":1616325223544,"results":"89","hashOfConfig":"85"},{"size":411,"mtime":1618772843003,"results":"90","hashOfConfig":"85"},{"size":9981,"mtime":1618927102481,"results":"91","hashOfConfig":"85"},{"size":25087,"mtime":1619008346653,"results":"92","hashOfConfig":"85"},{"size":169,"mtime":1611429731211,"results":"93","hashOfConfig":"85"},{"size":4743,"mtime":1616152301080,"results":"94","hashOfConfig":"85"},{"size":8797,"mtime":1618769259292,"results":"95","hashOfConfig":"85"},{"size":858,"mtime":1616332157848,"results":"96","hashOfConfig":"85"},{"size":325,"mtime":1618772549218,"results":"97","hashOfConfig":"85"},{"size":3059,"mtime":1618612379429,"results":"98","hashOfConfig":"85"},{"size":1310,"mtime":1616330863619,"results":"99","hashOfConfig":"85"},{"size":4738,"mtime":1618612287086,"results":"100","hashOfConfig":"85"},{"size":497,"mtime":1618669361942,"results":"101","hashOfConfig":"85"},{"size":5446,"mtime":1618830986492,"results":"102","hashOfConfig":"85"},{"size":24045,"mtime":1618669349786,"results":"103","hashOfConfig":"85"},{"size":1886,"mtime":1616330697147,"results":"104","hashOfConfig":"85"},{"size":7787,"mtime":1616713796213,"results":"105","hashOfConfig":"85"},{"size":600,"mtime":1618739257686,"results":"106","hashOfConfig":"85"},{"size":5228,"mtime":1618768846601,"results":"107","hashOfConfig":"85"},{"size":6541,"mtime":1618585860775,"results":"108","hashOfConfig":"85"},{"size":13663,"mtime":1618531835423,"results":"109","hashOfConfig":"85"},{"size":2111,"mtime":1618585938320,"results":"110","hashOfConfig":"85"},{"size":21231,"mtime":1618616649232,"results":"111","hashOfConfig":"85"},{"size":7870,"mtime":1618678728328,"results":"112","hashOfConfig":"85"},{"size":2109,"mtime":1616330400762,"results":"113","hashOfConfig":"85"},{"size":137,"mtime":1611427739470,"results":"114","hashOfConfig":"85"},{"size":4410,"mtime":1618658262231,"results":"115","hashOfConfig":"85"},{"size":1026,"mtime":1613822812505,"results":"116","hashOfConfig":"85"},{"size":616,"mtime":1616330651313,"results":"117","hashOfConfig":"85"},{"size":1569,"mtime":1616713806592,"results":"118","hashOfConfig":"85"},{"size":1113,"mtime":1616713544407,"results":"119","hashOfConfig":"85"},{"size":1952,"mtime":1616255625908,"results":"120","hashOfConfig":"85"},{"size":7246,"mtime":1618768668476,"results":"121","hashOfConfig":"85"},{"size":8507,"mtime":1618819994822,"results":"122","hashOfConfig":"85"},{"size":481,"mtime":1614718130207,"results":"123","hashOfConfig":"85"},{"size":3805,"mtime":1618531259907,"results":"124","hashOfConfig":"85"},{"size":1820,"mtime":1615459824938,"results":"125","hashOfConfig":"85"},{"size":28772,"mtime":1618658869971,"results":"126","hashOfConfig":"85"},{"size":3906,"mtime":1618679222573,"results":"127","hashOfConfig":"85"},{"size":17,"mtime":1616270158957,"results":"128","hashOfConfig":"85"},{"size":2303,"mtime":1618678668362,"results":"129","hashOfConfig":"85"},{"size":498,"mtime":1616009123198,"results":"130","hashOfConfig":"85"},{"size":770,"mtime":1618679085613,"results":"131","hashOfConfig":"85"},{"size":478,"mtime":1616008609965,"results":"132","hashOfConfig":"85"},{"size":9274,"mtime":1616713661766,"results":"133","hashOfConfig":"85"},{"size":10767,"mtime":1616713962667,"results":"134","hashOfConfig":"85"},{"size":2002,"mtime":1614682059036,"results":"135","hashOfConfig":"85"},{"size":1530,"mtime":1614719740132,"results":"136","hashOfConfig":"85"},{"size":1471,"mtime":1615459998987,"results":"137","hashOfConfig":"85"},{"size":2443,"mtime":1618678736411,"results":"138","hashOfConfig":"85"},{"size":1852,"mtime":1618837930909,"results":"139","hashOfConfig":"85"},{"size":28406,"mtime":1619005380516,"results":"140","hashOfConfig":"85"},{"size":9490,"mtime":1618571761521,"results":"141","hashOfConfig":"85"},{"size":1459,"mtime":1617829556392,"results":"142","hashOfConfig":"85"},{"size":1292,"mtime":1615574752140,"results":"143","hashOfConfig":"85"},{"size":9558,"mtime":1619008217242,"results":"144","hashOfConfig":"85"},{"size":873,"mtime":1616712725878,"results":"145","hashOfConfig":"85"},{"size":4250,"mtime":1617999504000,"results":"146","hashOfConfig":"85"},{"size":1298,"mtime":1616322210741,"results":"147","hashOfConfig":"85"},{"size":5333,"mtime":1618611844933,"results":"148","hashOfConfig":"85"},{"size":4116,"mtime":1616008382010,"results":"149","hashOfConfig":"85"},{"size":4256,"mtime":1619008210904,"results":"150","hashOfConfig":"85"},{"size":1862,"mtime":1619006006835,"results":"151","hashOfConfig":"85"},{"size":1510,"mtime":1618573124674,"results":"152","hashOfConfig":"85"},{"size":686,"mtime":1616961850786,"results":"153","hashOfConfig":"85"},{"size":396,"mtime":1618070535674,"results":"154","hashOfConfig":"85"},{"size":2277,"mtime":1617999496183,"results":"155","hashOfConfig":"85"},{"size":5486,"mtime":1618418651576,"results":"156","hashOfConfig":"85"},{"size":1524,"mtime":1618086263609,"results":"157","hashOfConfig":"85"},{"size":5440,"mtime":1618956744516,"results":"158","hashOfConfig":"85"},{"size":2222,"mtime":1618664117827,"results":"159","hashOfConfig":"85"},{"size":4113,"mtime":1618571902563,"results":"160","hashOfConfig":"85"},{"size":5689,"mtime":1618494430821,"results":"161","hashOfConfig":"85"},{"size":1017,"mtime":1618669100535,"results":"162","hashOfConfig":"85"},{"size":8246,"mtime":1618671466880,"results":"163","hashOfConfig":"85"},{"size":785,"mtime":1618768047860,"results":"164","hashOfConfig":"85"},{"size":280,"mtime":1618677345516,"results":"165","hashOfConfig":"85"},{"size":75917,"mtime":1618776399588,"results":"166","hashOfConfig":"85"},{"size":7393,"mtime":1618837947098,"results":"167","hashOfConfig":"85"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"25938m",{"filePath":"170","messages":"171","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"173"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"173"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"173"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"173"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"173"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"173"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"173"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"173"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"173"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"173"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249","usedDeprecatedRules":"173"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252","usedDeprecatedRules":"173"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"173"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264","usedDeprecatedRules":"173"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267","usedDeprecatedRules":"173"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"173"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"283","usedDeprecatedRules":"173"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"286","usedDeprecatedRules":"173"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"289","usedDeprecatedRules":"173"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"294","usedDeprecatedRules":"173"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"297","usedDeprecatedRules":"173"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"300","usedDeprecatedRules":"173"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"303","usedDeprecatedRules":"173"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"306","usedDeprecatedRules":"173"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"309","usedDeprecatedRules":"173"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"320","usedDeprecatedRules":"173"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"341","usedDeprecatedRules":"173"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"344","usedDeprecatedRules":"173"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"347","usedDeprecatedRules":"173"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"350","usedDeprecatedRules":"173"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"353","messages":"354","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"357","usedDeprecatedRules":"173"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"366","usedDeprecatedRules":"173"},"D:\\git-projects\\funday\\frontend\\src\\index.js",[],"D:\\git-projects\\funday\\frontend\\src\\App.jsx",["367","368","369","370"],"import React, { useEffect,useState,useRef } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport {routes} from './routes.js'\nimport { Navbar } from './cmps/Navbar'\nimport { useSelector } from \"react-redux\";\nimport { socketService } from './services/socketService'\n\nexport function App() {\n  const loggedInUser = useSelector(state => state.user.loggedInUser);\n\n  return (\n    <div className=\"App\">\n      {loggedInUser&&<Navbar/>}\n      <Switch>\n        { routes.map(route => <Route key={ route.path } exact component={ route.component } path={ route.path } />) }\n      </Switch>\n    </div>\n  )\n}\n\n",["371","372"],"D:\\git-projects\\funday\\frontend\\src\\reportWebVitals.js",[],"D:\\git-projects\\funday\\frontend\\src\\store\\store.js",[],"D:\\git-projects\\funday\\frontend\\src\\routes.js",[],"D:\\git-projects\\funday\\frontend\\src\\store\\reducers\\index.js",[],"D:\\git-projects\\funday\\frontend\\src\\pages\\Home.jsx",["373","374"],"import React, { Component,useEffect,useState,useRef } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { connect } from 'react-redux'\r\nimport { logout } from '../store/actions/userActions'\r\nimport { Login } from '../cmps/Login';\r\nimport {guestLogin} from '../store/actions/userActions'\r\nimport { HomeBackground } from \"../cmps/HomeBackground\";\r\nimport { Loading } from '../cmps/Loading'\r\nimport { loadWorkspaces} from '../store/actions/workspaceActions'\r\n\r\nexport class _Home extends Component {\r\n    state ={\r\n        showComponent: false,\r\n        isLoading:false\r\n    }\r\n    onOpenModal=()=>{\r\n        this.setState({\r\n            showComponent: !this.state.showComponent\r\n          });\r\n    }\r\n    logout=()=>{\r\n        if(this.props.history.location.pathname==='/boards'){\r\n            this.setState({isLoading:true})\r\n            this.props.logout()\r\n            if(!this.props.loggedInUser){\r\n                this.setState({isLoading:false})\r\n                this.props.history.push('/')\r\n            }\r\n        }else{\r\n            this.props.logout()\r\n        }\r\n    }\r\n\r\n    onGuestLogin = async () => {\r\n        await this.props.guestLogin();\r\n        this.setState({ isLoading: true })\r\n        await this.props.loadWorkspaces()\r\n        this.setState({ isLoading: false })\r\n        this.props.history.push('/boards')\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        if (this.state.isLoading) return <Loading txt='LOADING WORKSPACES...'/>\r\n        return (  \r\n            <>\r\n                <HomeBackground showComponent={this.state.showComponent}/>\r\n            <div className={`home-page ${this.state.showComponent?'login-open':''}`}>\r\n                <div className=\"home-page-intro\">\r\n\r\n                    <div className=\"title-wrapper\" >\r\n                        <div className=\"title\">FUNDAY</div>\r\n                        <img class=\"title-img\" src={process.env.PUBLIC_URL + \"/assets/img/logo.png\"} alt=''/>\r\n                    </div>\r\n\r\n                    <div className={`desc-wraper ${this.state.showComponent?'login-open':''}`} >\r\n                        The next step in multi-planning and productivity!\r\n                        Funday will help you keep track of hundreds of tasks.\r\n                        An efficient way to manage your co-workers / employees.\r\n                        Half the hassle and twice the fun.\r\n                    </div>\r\n\r\n                    <div className={`btns-container ${this.state.showComponent?'login-open':''}`}>\r\n                        \r\n                        {!this.props.loggedInUser&&\r\n                          <div class=\"treat-wrapper\">\r\n                            <div className=\"button is-white is-top-join\"  onClick={this.onOpenModal}>\r\n                                <span class=\"hover\"></span>\r\n                                <span class=\"label\">Log in</span>\r\n                            </div>\r\n                          </div>\r\n                        }\r\n    \r\n                        {!this.props.loggedInUser&&<TreatButton onGuestLogin={this.onGuestLogin}/>}\r\n\r\n                    </div>\r\n                </div>\r\n                {this.state.showComponent&&  <Login/> }\r\n            </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loggedInUser: state.user.loggedInUser, \r\n        users: state.user.users,\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    logout,\r\n    guestLogin,\r\n    loadWorkspaces\r\n}\r\nexport const Home = connect(mapStateToProps, mapDispatchToProps)(withRouter(_Home))\r\n\r\n\r\nfunction TreatButton ({onGuestLogin}) {\r\n    const [runGuestLogin, setrunGuestLogin] = useState(true)\r\n    const [width, setWidth] = useState(window.innerWidth)\r\n    const [height, sethHight] = useState(window.innerHeight)\r\n    const treatmojis = [\"🍬\", \"🍫\", \"🍭\", \"🍡\", \"🍩\", \"🍪\", \"🍒\"];\r\n    const treats = [];\r\n    const radius = 15;\r\n    \r\n    const Cd = 0.47; // Dimensionless\r\n    const rho = 1.22; // kg / m^3\r\n    const A = Math.PI * radius * radius / 10000; // m^2\r\n    const ag = 9.81; // m / s^2\r\n    const frameRate = 1 / 60;\r\n    const elButton = useRef(null)\r\n    const elWrapper = useRef(null)\r\n\r\n    function getRandomArbitrary(min, max) {\r\n        return Math.random() * (max - min) + min;\r\n    }\r\n    \r\n    function getRandomInt(min, max) {\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;\r\n    }\r\n\r\n\r\n    function createTreat() /* create a treat */ {\r\n        const vx = getRandomArbitrary(-10, 10); // x velocity\r\n        const vy = getRandomArbitrary(-10, 1);  // y velocity\r\n        \r\n        const el = document.createElement(\"div\");\r\n        el.className = \"treat\";\r\n      \r\n        const inner = document.createElement(\"span\");\r\n        inner.className = \"inner-style\";\r\n        inner.innerText = treatmojis[getRandomInt(0, treatmojis.length - 1)];\r\n        el.appendChild(inner);\r\n        \r\n        elWrapper.current.appendChild(el);\r\n      \r\n        const rect = el.getBoundingClientRect();\r\n      \r\n        const lifetime = getRandomArbitrary(2000, 3000);\r\n      \r\n        el.style.setProperty(\"--lifetime\", lifetime);\r\n      \r\n        const treat = {\r\n          el,\r\n          absolutePosition: { x: rect.left, y: rect.top },\r\n          position: { x: rect.left, y: rect.top },\r\n          velocity: { x: vx, y: vy },\r\n          mass: 0.1, //kg\r\n          radius: el.offsetWidth, // 1px = 1cm\r\n          restitution: -.7,\r\n          \r\n          lifetime,\r\n          direction: vx > 0 ? 1 : -1,\r\n      \r\n          animating: true,\r\n      \r\n          remove() {\r\n            this.animating = false;\r\n            this.el.parentNode.removeChild(this.el);\r\n          },\r\n      \r\n          animate() {\r\n            const treat = this;\r\n            let Fx =\r\n              -0.5 *\r\n              Cd *\r\n              A *\r\n              rho *\r\n              treat.velocity.x *\r\n              treat.velocity.x *\r\n              treat.velocity.x /\r\n              Math.abs(treat.velocity.x);\r\n            let Fy =\r\n              -0.5 *\r\n              Cd *\r\n              A *\r\n              rho *\r\n              treat.velocity.y *\r\n              treat.velocity.y *\r\n              treat.velocity.y /\r\n              Math.abs(treat.velocity.y);\r\n      \r\n            Fx = isNaN(Fx) ? 0 : Fx;\r\n            Fy = isNaN(Fy) ? 0 : Fy;\r\n      \r\n            // Calculate acceleration ( F = ma )\r\n            var ax = Fx / treat.mass;\r\n            var ay = ag + Fy / treat.mass;\r\n            // Integrate to get velocity\r\n            treat.velocity.x += ax * frameRate;\r\n            treat.velocity.y += ay * frameRate;\r\n      \r\n            // Integrate to get position\r\n            treat.position.x += treat.velocity.x * frameRate * 100;\r\n            treat.position.y += treat.velocity.y * frameRate * 100;\r\n            \r\n            treat.checkBounds();\r\n            treat.update();\r\n          },\r\n          \r\n          checkBounds() {\r\n      \r\n            if (treat.position.y > height - treat.radius) {\r\n              treat.velocity.y *= treat.restitution;\r\n              treat.position.y = height - treat.radius;\r\n            }\r\n            if (treat.position.x > width - treat.radius) {\r\n              treat.velocity.x *= treat.restitution;\r\n              treat.position.x = width - treat.radius;\r\n              treat.direction = -1;\r\n            }\r\n            if (treat.position.x < treat.radius) {\r\n              treat.velocity.x *= treat.restitution;\r\n              treat.position.x = treat.radius;\r\n              treat.direction = 1;\r\n            }\r\n      \r\n          },\r\n      \r\n          update() {\r\n            const relX = this.position.x - this.absolutePosition.x;\r\n            const relY = this.position.y - this.absolutePosition.y;\r\n      \r\n            this.el.style.setProperty(\"--x\", relX);\r\n            this.el.style.setProperty(\"--y\", relY);\r\n            this.el.style.setProperty(\"--direction\", this.direction);\r\n          }\r\n        };\r\n      \r\n        setTimeout(() => {\r\n          treat.remove();\r\n        }, lifetime);\r\n      \r\n        return treat;\r\n      }\r\n      \r\n   \r\n    \r\n    function animationLoop() {\r\n        var i = treats.length;\r\n        while (i--) {\r\n        treats[i].animate();\r\n  \r\n            if (!treats[i].animating) {\r\n              treats.splice(i, 1);\r\n            }\r\n        }\r\n  \r\n        requestAnimationFrame(animationLoop);\r\n    }\r\n  \r\n    animationLoop();\r\n  \r\n    function addTreats() {\r\n      //cancelAnimationFrame(frame);\r\n      if (treats.length > 40) {\r\n        return;\r\n      }\r\n      for (let i = 0; i < 10; i++) {\r\n        treats.push(createTreat());\r\n      }\r\n    }\r\n  \r\n\r\n    useEffect(() => {\r\n        const resizeListener = () => {\r\n          // change width from the state object\r\n            setWidth(window.innerWidth)\r\n            sethHight(window.innerHeight)\r\n        };\r\n        // set resize listener\r\n        window.addEventListener('resize', resizeListener);\r\n    \r\n        // clean up function\r\n        return () => {\r\n          // remove resize listener\r\n          window.removeEventListener('resize', resizeListener);\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n      setTimeout(() => {\r\n        if(elButton&&elButton.current){\r\n            elButton.current.addEventListener(\"click\", onGuestLogin, {once: true})\r\n        }\r\n      }, 1000);\r\n    })\r\n\r\n    return(\r\n        <div className=\"treat-wrapper\" ref={elWrapper}>\r\n            <button className=\"button is-purple is-top-login treat-button\" ref={elButton} onClick={()=>{\r\n                if(elButton&&elButton.current){\r\n                    addTreats()\r\n                    // onGuestLogin()\r\n                    // setTimeout(() => {\r\n                    //     elButton.current.addEventListener(\"click\", onGuestLogin, {once: true})\r\n                    // }, 1000);\r\n                }\r\n            }} >\r\n              <span class=\"hover\"></span>\r\n              <span class=\"label\">Try as a guest</span>\r\n            </button>\r\n        </div>\r\n    )\r\n    \r\n}","D:\\git-projects\\funday\\frontend\\src\\pages\\Workspace.jsx",["375","376","377","378","379","380","381","382","383","384","385","386","387","388","389","390","391","392","393"],"import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Loading } from '../cmps/Loading'\r\nimport { BoardToolbar } from '../cmps/BoardToolbar'\r\nimport { BoardToolbarMenu } from '../cmps/BoardToolbarMenu'\r\nimport { BoardHeader } from '../cmps/BoardHeader'\r\nimport { BoardMain } from '../cmps/BoardMain'\r\nimport { BoardDetails } from '../cmps/BoardDetails'\r\n\r\nimport { ConversationModal } from '../cmps/ConversationModal'\r\nimport { ActivitiesModal } from '../cmps/ActivitiesModal'\r\nimport { NewWorkspaceBoardMain } from '../cmps/NewWorkspaceBoardMain'\r\nimport { loadWorkspaces, updateWorkspace,updateCurrWorkspace, addWorkspace,removeWorkspace} from '../store/actions/workspaceActions'\r\nimport { getCurrBoard, updateCurrBoard,toggleTaskConversationModal} from '../store/actions/workspaceActions'\r\nimport { updateUser} from '../store/actions/userActions'\r\nimport { boardService } from '../services/boardService'\r\nimport { folderService } from '../services/folderService'\r\nimport { \r\n    BsLightning, \r\n    BsStar, \r\n    BsThreeDots, \r\n    BsFillStarFill, \r\n    BsPeople, \r\n    BsFilter,\r\n    BsPlus\r\n} from 'react-icons/bs'\r\nimport { \r\n    IoIosArrowForward, \r\n    IoIosArrowBack, \r\n    IoIosArrowDown,\r\n    IoMdArrowDropdown,\r\n    IoMdNotifications\r\n} from 'react-icons/io'\r\n\r\nimport { HiOutlineSearch } from 'react-icons/hi'\r\nimport { SiProbot } from 'react-icons/si'\r\nimport { ImTable } from 'react-icons/im'\r\nimport { BiUserCircle } from 'react-icons/bi'\r\nimport { RiArrowUpDownFill } from 'react-icons/ri'\r\nimport { CgViewComfortable } from 'react-icons/cg'\r\nimport { HiPlusCircle } from 'react-icons/hi'\r\nimport { GrClose } from 'react-icons/gr'\r\nimport { workspaceService } from '../services/workspaceService'\r\nimport { socketService } from '../services/socketService'\r\n\r\nexport class _Workspace extends Component {\r\n    state={\r\n        isToolbarMenuClose:false,\r\n        workspace:null,\r\n        isFolderOpen:false,\r\n        board:null,\r\n        folder:null,\r\n        task:{},\r\n        isOpenConversationModal:false,\r\n        isOpenActivitiesModal:false,\r\n        isShowModal:false,\r\n        isNewFolderCreated:false,\r\n        isNewWorkspaceCreated:false,\r\n        toolbarActiveBtn:''\r\n    }\r\n\r\n    async componentDidMount() {\r\n        try {\r\n            if(!this.props.workspaces||this.props.workspaces.length===0){\r\n                await this.props.loadWorkspaces();\r\n            }\r\n            this.editableName = React.createRef();\r\n            if(this.props.workspaces){\r\n                await this.props.workspaces.map(workspace=>workspace.boards.map(board=>board.isLastSeen===true? this.setState({board},()=>{\r\n                    this.props.history.push(`/boards/${board._id}`)\r\n                    this.props.updateCurrBoard(board)\r\n                    this.setState({workspace})\r\n                    this.props.updateCurrWorkspace(workspace)\r\n                }):null))[0];\r\n            }\r\n        } catch (err) {\r\n            console.log('Error', err)\r\n        }\r\n    }\r\n    // async componentDidMount() {\r\n    //     if(this.props.loggedInUser){\r\n    //         await this.props.loadWorkspaces()\r\n    //         this.editableName = React.createRef();\r\n    //         // const mainWorkspace = await this.props.workspaces.filter(workspace=>workspace.isMain===true)[0];\r\n    //         // this.setState({workspace:mainWorkspace})\r\n    \r\n    //         await this.props.workspaces.map(workspace=>workspace.boards.map(board=>board.isLastSeen===true? this.setState({board},()=>{\r\n    //             this.props.history.push(`/boards/${board._id}`)\r\n    //             this.props.updateCurrBoard(board)\r\n    //             this.setState({workspace})\r\n    //             this.props.updateCurrWorkspace(workspace)\r\n    //         }):null))[0];\r\n    //     }\r\n    // }\r\n\r\n    focusText = () => {\r\n        setTimeout(() => {\r\n            document.execCommand('selectAll', false, null)\r\n        }, 0)\r\n    }\r\n    onEndNewFolderUpdating=()=>{\r\n        this.setState({ isNewFolderCreated:false})\r\n    }\r\n\r\n    onToggleToolbarMenu=()=>{\r\n        this.setState({isToolbarMenuClose:!this.state.isToolbarMenuClose})\r\n    }\r\n\r\n    onGettingCurrentWorkspace=(workspace)=>{\r\n        this.setState({workspace},()=>{\r\n            this.props.updateCurrWorkspace(workspace)\r\n            this.setState({isNewWorkspaceCreated:false})\r\n        })\r\n    }\r\n\r\n    isBoardInsideFolder = this.props.match.url.split('/').includes('folders')\r\n\r\n    // getCurrWorkspace = () =>{\r\n    //     const workspaceId = this.props.match.url.split('/')[2]\r\n    //     const currWorkspace = workspaceService.getById(workspaceId)\r\n    //     return currWorkspace\r\n    // }\r\n    getCurrFolder = () =>{\r\n       const isBoardInsideFolder = this.props.match.url.split('/').includes('folders')\r\n        if(!isBoardInsideFolder)return\r\n        const folderId = this.props.match.url.split('/')[4]\r\n        const currFolder = folderService.getById(this.props.workspaces,folderId)\r\n        return currFolder\r\n    }\r\n    getCurrBoard = () =>{\r\n        const isBoardInsideFolder = this.props.match.url.split('/').includes('folders')\r\n        if(isBoardInsideFolder){\r\n            const folderId = this.props.match.url.split('/')[4]\r\n            const currFolder = folderService.getById(this.props.workspaces,folderId)\r\n            const boardId = this.props.match.params.id\r\n            const currBoard = boardService.getById(this.props.workspaces,boardId,currFolder)\r\n            // return currBoard\r\n            if(currBoard){\r\n                this.setState({board:currBoard},()=>{\r\n                    this.props.history.push(`/boards/${currBoard._id}`)\r\n                })\r\n            }\r\n        }else{\r\n            // const boardId = this.props.match.url.split('/')[4]\r\n            const boardId = this.props.match.params.id\r\n            const folder=null\r\n            const currBoard = boardService.getById(this.props.workspaces,boardId,folder)\r\n            // return currBoard\r\n            if(currBoard){\r\n                this.setState({board:currBoard},()=>{\r\n                    this.props.history.push(`/boards/${currBoard._id}`)\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    onToggleFolder=(folder)=>{\r\n        this.setState({isFolderOpen:!this.state.isFolderOpen})\r\n    } \r\n\r\n\r\n    onGettingCurrentBoard=async(board)=>{\r\n        this.setState({board},()=>{\r\n            this.props.history.push(`/boards/${board._id}`)\r\n        })\r\n        await this.props.updateCurrBoard(board)\r\n        this.setState({isNewWorkspaceCreated:false})\r\n    }\r\n   \r\n\r\n    onEditBoard=(updatedBoard,desc)=>{\r\n        let newBoard={}\r\n        let activitiesArray=[]\r\n\r\n        if(desc){\r\n            if( typeof desc!==\"string\" ){\r\n                desc.forEach(_desc => {\r\n                    activitiesArray.unshift({\r\n                        desc: _desc,\r\n                        userId: this.props.loggedInUser._id,\r\n                        createdAt: Date.now()\r\n                    })\r\n                })\r\n    \r\n                newBoard = {\r\n                    ...updatedBoard,\r\n                    activities:[...activitiesArray, ...updatedBoard.activities]\r\n                }\r\n    \r\n            }else{\r\n                newBoard = {\r\n                    ...updatedBoard,\r\n                    activities:[\r\n                        {\r\n                            desc: desc,\r\n                            userId: this.props.loggedInUser._id,\r\n                            createdAt: Date.now()\r\n                        },\r\n                        ...updatedBoard.activities]\r\n                }\r\n            }\r\n        }else{\r\n            newBoard = {\r\n                ...updatedBoard,\r\n            }\r\n        }\r\n        console.log('newBoard2',newBoard);\r\n        this.updateBoard(newBoard)\r\n    }\r\n\r\n    onAddNewTable=()=>{\r\n        const newBoard = boardService.addTable(this.state.board)\r\n        const desc = `added a new group`\r\n        const updatedBoard = {\r\n            ...newBoard,\r\n            activities:[\r\n                {\r\n                    desc: desc,\r\n                    userId: this.props.loggedInUser._id,\r\n                    createdAt: Date.now()\r\n                },\r\n                ...newBoard.activities]\r\n        }\r\n        this.updateBoard(updatedBoard)\r\n    }\r\n \r\n    onEditTable=(updatedTable,desc)=>{\r\n        const newBoard = boardService.updateTable(this.state.board,updatedTable)\r\n        const updatedBoard = {\r\n            ...newBoard,\r\n            activities:[\r\n                {\r\n                    desc: desc,\r\n                    userId: this.props.loggedInUser._id,\r\n                    createdAt: Date.now()\r\n                },\r\n                ...newBoard.activities]\r\n        }\r\n        this.updateBoard(updatedBoard)\r\n    }\r\n\r\n    removeTable=(tableId,boardName)=>{\r\n        const desc = `removed group \"${boardName}\" from \"${this.state.board.name}\"`\r\n        const newBoard = boardService.removeTable(tableId,this.state.board)\r\n        const updatedBoard = {\r\n            ...newBoard,\r\n            activities:[\r\n                {\r\n                    desc: desc,\r\n                    userId: this.props.loggedInUser._id,\r\n                    createdAt: Date.now()\r\n                },\r\n                ...newBoard.activities]\r\n        }\r\n        this.updateBoard(updatedBoard)\r\n    }\r\n\r\n    onAddNewTask=(currTable,newTaskName,desc)=>{\r\n        if(!newTaskName.split(' ').join(''))return\r\n        const newBoard = boardService.addTask(currTable,this.state.board,newTaskName,this.props.loggedInUser)\r\n        const updatedBoard = {\r\n            ...newBoard,\r\n            activities:[\r\n                {\r\n                    desc: desc,\r\n                    userId: this.props.loggedInUser._id,\r\n                    createdAt: Date.now()\r\n                },\r\n                ...newBoard.activities]\r\n        }\r\n        this.updateBoard(updatedBoard)\r\n    }\r\n\r\n    onEditTask=(currTable,currTask,desc)=>{\r\n        const newBoard = boardService.updateTask(currTable,this.state.board,currTask,this.props.loggedInUser)\r\n        const updatedBoard = {\r\n            ...newBoard,\r\n            activities:[\r\n                {\r\n                    desc: desc,\r\n                    userId: this.props.loggedInUser._id,\r\n                    createdAt: Date.now()\r\n                },\r\n                ...newBoard.activities]\r\n        }\r\n        this.updateBoard(updatedBoard)\r\n    }\r\n\r\n    onRemoveTask=(taskId,currTable)=>{\r\n        const newBoard = boardService.removeTask(taskId,currTable,this.state.board)\r\n        this.updateBoard(newBoard)\r\n    }\r\n\r\n    editBoard=(newBoard)=>{\r\n        this.updateBoard(newBoard)\r\n    }\r\n\r\n    updateBoard(newBoard){\r\n        this.setState({board:newBoard},()=>{\r\n            this.props.updateCurrBoard(newBoard)\r\n            let newWorkspace = this.state.workspace\r\n            // let isBoardInsideFolder = newWorkspace.folders.includes(folder=>\r\n            //  folder.boards.includes(board=>\r\n            //      board._id === newBoard._id\r\n            //  ))\r\n            let boardInsideFolder = {\r\n                isBoardInsideFolder:false,\r\n                cuurFolde:null\r\n            }\r\n            newWorkspace.folders.map(folder=>\r\n                folder.boards.map(board=>\r\n                    board._id === newBoard._id?boardInsideFolder={\r\n                        ...boardInsideFolder,\r\n                        isBoardInsideFolder:true,\r\n                        cuurFolde:folder\r\n                    }\r\n                    :null\r\n                    \r\n            ))\r\n            if(boardInsideFolder.isBoardInsideFolder){\r\n                //board insode folder\r\n                newWorkspace ={\r\n                    ...this.state.workspace, \r\n                    folders: this.state.workspace.folders.map(folder=>\r\n                        folder._id===boardInsideFolder.cuurFolde._id?\r\n                       {...folder, boards:\r\n                        folder.boards.map(board=>\r\n                            board._id === newBoard._id?\r\n                            newBoard:board\r\n                        )}\r\n                        :folder\r\n                    )\r\n                }\r\n            }else{\r\n                //board insode workspace\r\n                 //replace the currBoard whith the new Board\r\n                 newWorkspace.boards = newWorkspace.boards.map(board=>\r\n                    board._id === newBoard._id?newBoard:board\r\n                )\r\n            }\r\n     \r\n            // send to update updateWorkspace\r\n            this.props.updateCurrWorkspace(newWorkspace)\r\n            this.setState({workspace:newWorkspace},()=>{\r\n                this.props.updateWorkspace(newWorkspace)\r\n            })\r\n        })\r\n    }\r\n//move folder to another workspace\r\n    moveFolder=(newWorkspace,cuurFolder)=>{\r\n        this.removeFolder(cuurFolder._id)\r\n        const newWorkspaceToUpdate={\r\n            ...newWorkspace,\r\n            folders:[...newWorkspace.folders, cuurFolder]\r\n        }\r\n        this.props.updateWorkspace(newWorkspaceToUpdate)\r\n    }\r\n//move board to another workspace or move board in folder to the workspace\r\n    moveBoard=(newWorkspace,cuurBoard)=>{\r\n        if(this.state.workspace._id===newWorkspace._id){\r\n            const updatedWorkspace = boardService.removeBoard(this.state.workspace, cuurBoard._id)\r\n            const newWorkspaceToUpdate={\r\n                ...updatedWorkspace,\r\n                boards:[...updatedWorkspace.boards, cuurBoard]\r\n            }\r\n            this.setState({workspace:newWorkspaceToUpdate},()=>{\r\n                this.props.updateCurrWorkspace(newWorkspaceToUpdate)\r\n            })\r\n            this.props.updateWorkspace(newWorkspaceToUpdate)\r\n        }else{\r\n            this.removeBoard(cuurBoard._id)\r\n            const newWorkspaceToUpdate={\r\n                ...newWorkspace,\r\n                boards:[...newWorkspace.boards, cuurBoard]\r\n            }\r\n            this.props.updateWorkspace(newWorkspaceToUpdate)\r\n        }\r\n    }\r\n//move board to another folder\r\n    moveBoardToFolder=(folderWorkspace,newFolder,cuurBoard)=>{\r\n        const updatedWorkspace = boardService.removeBoard(this.state.workspace, cuurBoard._id)\r\n        this.setState({workspace:updatedWorkspace},()=>{\r\n            this.props.updateWorkspace(updatedWorkspace)\r\n            this.props.updateCurrWorkspace(updatedWorkspace)\r\n        })\r\n        const newFolderToUpdate={\r\n            ...newFolder,\r\n            boards:[...newFolder.boards, cuurBoard]\r\n        }\r\n        if(updatedWorkspace._id===folderWorkspace._id){\r\n            const newWorkspace = boardService.updateFolder(updatedWorkspace, newFolderToUpdate)\r\n            if( newWorkspace._id===this.state.workspace._id){\r\n                this.setState({workspace:newWorkspace},()=>{\r\n                    this.props.updateCurrWorkspace(newWorkspace)\r\n                })\r\n            }\r\n            this.props.updateWorkspace(newWorkspace)\r\n        }else{\r\n            const newWorkspace = boardService.updateFolder(folderWorkspace, newFolderToUpdate)\r\n            if( newWorkspace._id===this.state.workspace._id){\r\n                this.setState({workspace:newWorkspace},()=>{\r\n                    this.props.updateCurrWorkspace(newWorkspace)\r\n                })\r\n            }\r\n            this.props.updateWorkspace(newWorkspace)\r\n        }\r\n    }  \r\n    \r\n\r\n    removeBoard=(boardId)=>{\r\n        const newWorkspace = boardService.removeBoard(this.state.workspace, boardId)\r\n        this.setState({workspace:newWorkspace},()=>{\r\n            this.props.updateWorkspace(newWorkspace)\r\n            this.props.updateCurrWorkspace(newWorkspace)\r\n        })\r\n    }\r\n\r\n    addNewBoard=(boardName)=>{\r\n        const newWorkspace = boardService.addBoard(this.state.workspace,boardName)\r\n        this.setState({workspace:newWorkspace},()=>{\r\n            this.props.updateWorkspace(newWorkspace)\r\n            this.props.updateCurrWorkspace(newWorkspace)\r\n        })\r\n    }\r\n\r\n    addNewWorkspace=(workspaceName,workspaceColor,workspaceIcon)=>{\r\n        \r\n        const newWorkspace =   {\r\n            name:workspaceName,\r\n            isMain : false,\r\n            desc : \"description about the workspace\",\r\n            img : workspaceIcon,\r\n            color : workspaceColor,\r\n            owner:this.state.loggedInUser,//added in backend\r\n            folders : [],\r\n            boards : []\r\n            }   \r\n        const x = this.props.addWorkspace(newWorkspace)\r\n        x.then(workspace=> \r\n            this.setState({workspace:workspace},()=>{\r\n                this.setState({isNewWorkspaceCreated:true})\r\n                const newUser= {\r\n                    ...this.props.loggedInUser,\r\n                    pinnedWorkspaces:[\r\n                        ...this.props.loggedInUser.pinnedWorkspaces,\r\n                        workspace._id\r\n                    ]\r\n                }\r\n                this.props.updateUser(newUser)\r\n            })\r\n        )\r\n    }\r\n\r\n    updateWorkspace=(newWorkspace)=>{\r\n        this.props.updateWorkspace(newWorkspace)\r\n        this.setState({workspace:newWorkspace},()=>{\r\n            this.props.updateCurrWorkspace(newWorkspace)\r\n        })\r\n    }  \r\n     \r\n    deleteWorkspace=(workspaceId)=>{\r\n        this.props.removeWorkspace(workspaceId)\r\n        this.props.workspaces.map(workspace=>\r\n            workspace.boards.map(board=>\r\n                board.isLastSeen===true? \r\n                    this.setState({workspace},()=>{\r\n                        this.props.updateCurrWorkspace(workspace)\r\n                    })\r\n                    :null\r\n            )   \r\n        )\r\n    }\r\n\r\n    addBoardInFolder=(currFolder,boardName)=>{\r\n        const newWorkspace = boardService.addBoardInFolder(this.state.workspace,currFolder,boardName)\r\n        this.setState({workspace:newWorkspace},()=>{\r\n            this.props.updateWorkspace(newWorkspace)\r\n            this.props.updateCurrWorkspace(newWorkspace)\r\n        })\r\n    }\r\n    addNewFloder=()=>{\r\n        const newWorkspace = boardService.addFolder(this.state.workspace)\r\n        this.setState({workspace:newWorkspace},()=>{\r\n            this.props.updateWorkspace(newWorkspace)\r\n            this.props.updateCurrWorkspace(newWorkspace)\r\n            this.setState({isNewFolderCreated:true})\r\n        })\r\n    }\r\n    \r\n    removeFolder=(folderId)=>{\r\n        const newWorkspace = boardService.removeFolder(this.state.workspace, folderId)\r\n        this.setState({workspace:newWorkspace},()=>{\r\n            this.props.updateWorkspace(newWorkspace)\r\n            this.props.updateCurrWorkspace(newWorkspace)\r\n        })\r\n    }\r\n    updateFolder=(newFolder)=>{\r\n        const newWorkspace = boardService.updateFolder(this.state.workspace, newFolder)\r\n        this.setState({workspace:newWorkspace},()=>{\r\n            this.props.updateWorkspace(newWorkspace)\r\n            this.props.updateCurrWorkspace(newWorkspace)\r\n\r\n        })\r\n    }\r\n\r\n    openConversationModal=()=>{\r\n        this.setState({isShowModal:true})\r\n        this.setState({isOpenConversationModal:true})\r\n    }    \r\n    openActivitiesModal=()=>{\r\n        this.setState({isShowModal:true})\r\n        this.setState({isOpenActivitiesModal:true})\r\n    }\r\n\r\n    onManageWorkspace=()=>{\r\n        this.setState({isNewWorkspaceCreated:true})\r\n    }\r\n    onSetToolbarMenu=(val)=>{\r\n         this.setState({toolbarActiveBtn:val})\r\n    }\r\n\r\n    render() {\r\n        const { workspaces,loggedInUser,isLoading } = this.props\r\n        const { workspace,board ,isNewWorkspaceCreated} = this.state\r\n        if (\r\n            !workspaces||!workspace||!board\r\n        ) return <Loading txt='LOADING WORKSPACES...'/>\r\n        return (\r\n            <div className=\"board-page-container\">\r\n                <BoardToolbar \r\n                    BsLightning={BsLightning} \r\n                    BsStar={BsStar} \r\n                    BsThreeDots={BsThreeDots}\r\n                    // workspaces={workspaces}\r\n                    onGettingCurrentWorkspace={this.onGettingCurrentWorkspace}\r\n                    addNewWorkspace={this.addNewWorkspace}\r\n                    onSetToolbarMenu={this.onSetToolbarMenu}\r\n                />\r\n                <BoardToolbarMenu \r\n                    isToolbarMenuClose={this.state.isToolbarMenuClose} \r\n                    onToggleToolbarMenu={this.onToggleToolbarMenu}\r\n                    IoIosArrowForward={IoIosArrowForward}\r\n                    IoIosArrowBack={IoIosArrowBack}\r\n                    workspace={workspace}\r\n                    onToggleFolder={this.onToggleFolder}\r\n                    isFolderOpen={this.state.isFolderOpen}\r\n                    IoMdArrowDropdown={IoMdArrowDropdown}\r\n                    CgViewComfortable={CgViewComfortable}\r\n                    onGettingCurrentBoard={this.onGettingCurrentBoard}\r\n                    onGettingCurrentBoardInWorkspace={this.onGettingCurrentBoardInWorkspace}\r\n                    addNewBoard={this.addNewBoard}\r\n                    addNewFloder={this.addNewFloder}\r\n                    addBoardInFolder={this.addBoardInFolder}\r\n                    removeFolder={this.removeFolder}\r\n                    updateFolder={this.updateFolder}\r\n                    removeBoard={this.removeBoard}\r\n                    editBoard={this.editBoard}\r\n                    moveFolder={this.moveFolder}\r\n                    moveBoard={this.moveBoard}\r\n                    moveBoardToFolder={this.moveBoardToFolder}\r\n                    isNewFolderCreated={this.state.isNewFolderCreated}\r\n                    onEndNewFolderUpdating={this.onEndNewFolderUpdating}\r\n                    updateWorkspace={this.updateWorkspace}\r\n                    deleteWorkspace={this.deleteWorkspace}\r\n                    onGettingCurrentWorkspace={this.onGettingCurrentWorkspace}\r\n                    onManageWorkspace={this.onManageWorkspace}\r\n                    toolbarActiveBtn={this.state.toolbarActiveBtn}\r\n                    onEditBoard={this.onEditBoard}\r\n                />\r\n                <BoardDetails\r\n                   isNewWorkspaceCreated={isNewWorkspaceCreated}\r\n                   onAddNewTable={this.onAddNewTable}\r\n                   onEditBoard={this.onEditBoard}\r\n                   getTaskValue={this.getTaskValue}\r\n                   removeTable={this.removeTable}\r\n                   onAddNewTask={this.onAddNewTask}\r\n                   onEditTask={this.onEditTask}\r\n                   onEditTable={this.onEditTable}\r\n                   onRemoveTask={this.onRemoveTask}\r\n                   openConversationModal={this.openConversationModal}\r\n                   isOpenConversationModal={this.state.isOpenConversationModal}\r\n                   updateWorkspace={this.updateWorkspace}\r\n                   deleteWorkspace={this.deleteWorkspace}\r\n                   openActivitiesModal={this.openActivitiesModal}\r\n                   updateBoard={this.updateBoard}\r\n                />\r\n                { \r\n                <div className={`conversation-modal-wrapper ${this.state.isShowModal||this.props.isTaskConversationModalOpen?'':'hide'}`}>\r\n                    <div className={`conversation-modal ${this.state.isShowModal||this.props.isTaskConversationModalOpen?' slide-left':'slide-right'}`}\r\n                    // tabIndex='0' \r\n                    // onBlur={()=>{\r\n                    // this.setState({isOpenConversationModal:false})}}\r\n                    >\r\n                        <GrClose className='conversation-close-btn' onClick={()=>{\r\n                        this.setState({isShowModal:false},()=>{\r\n                            this.setState({isOpenConversationModal:false})\r\n                            this.setState({isOpenActivitiesModal:false})\r\n                        })\r\n                        if(this.props.isTaskConversationModalOpen){\r\n                            this.props.toggleTaskConversationModal()\r\n                        }\r\n                        }}\r\n                        />\r\n                        {this.state.isOpenActivitiesModal&&<ActivitiesModal/>}\r\n                        {(this.state.isOpenConversationModal||this.props.isTaskConversationModalOpen)&&<ConversationModal \r\n                        isOpenConversationModal={this.state.isOpenConversationModal}\r\n                        onEditTask={this.onEditTask}\r\n                        />}\r\n                    </div>\r\n                </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        workspaces: state.workspace.workspaces,\r\n        workspace: state.workspace.currWorkspace,\r\n        board: state.workspace.currBoard,\r\n        isTaskConversationModalOpen: state.workspace.isTaskConversationModalOpen,\r\n        loggedInUser: state.user.loggedInUser,\r\n        isLoading: state.system.isLoading\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    loadWorkspaces,\r\n    updateWorkspace,\r\n    updateCurrWorkspace,\r\n    getCurrBoard,\r\n    updateCurrBoard,\r\n    addWorkspace,\r\n    removeWorkspace,\r\n    updateUser,\r\n    toggleTaskConversationModal\r\n}\r\nexport const Workspace = connect(mapStateToProps, mapDispatchToProps)(_Workspace)","D:\\git-projects\\funday\\frontend\\src\\pages\\About.jsx",[],"D:\\git-projects\\funday\\frontend\\src\\pages\\UserDetails.jsx",[],"D:\\git-projects\\funday\\frontend\\src\\cmps\\Navbar.jsx",[],"D:\\git-projects\\funday\\frontend\\src\\store\\reducers\\userReducer.js",[],"D:\\git-projects\\funday\\frontend\\src\\store\\reducers\\systemReducer.js",[],"D:\\git-projects\\funday\\frontend\\src\\store\\reducers\\workspaceReducer.js",[],"D:\\git-projects\\funday\\frontend\\src\\store\\reducers\\boardReducer.js",[],"D:\\git-projects\\funday\\frontend\\src\\store\\actions\\workspaceActions.js",[],"D:\\git-projects\\funday\\frontend\\src\\services\\folderService.js",[],"D:\\git-projects\\funday\\frontend\\src\\store\\actions\\userActions.js",[],"D:\\git-projects\\funday\\frontend\\src\\services\\boardService.js",[],"D:\\git-projects\\funday\\frontend\\src\\services\\workspaceService.js",[],"D:\\git-projects\\funday\\frontend\\src\\cmps\\BoardToolbarMenu.jsx",["394"],"import React, { useEffect,useState,useRef } from 'react';\r\nimport { FolderList } from \"./FolderList\";\r\nimport { BoardList } from \"./BoardList\";\r\nimport { UpdateWorkspace } from \"./UpdateWorkspace\";\r\nimport { ToolbarMenuActionsBtn } from \"./ToolbarMenuActionsBtn\";\r\nimport { Search } from \"./Search\";\r\nimport { FavoriteBoards } from \"./FavoriteBoards\";\r\n\r\nexport function BoardToolbarMenu({\r\n    IoIosArrowForward, \r\n    isToolbarMenuClose, \r\n    onToggleToolbarMenu, \r\n    IoIosArrowBack, \r\n    workspace,\r\n    IoMdArrowDropdown,\r\n    CgViewComfortable,\r\n    onGettingCurrentBoard,\r\n    onGettingCurrentBoardInWorkspace,\r\n    addNewBoard,\r\n    addNewFloder,\r\n    addBoardInFolder,\r\n    removeFolder,\r\n    updateFolder,\r\n    removeBoard,\r\n    editBoard,\r\n    moveFolder,\r\n    moveBoard,\r\n    moveBoardToFolder,\r\n    isNewFolderCreated,\r\n    onEndNewFolderUpdating,\r\n    updateWorkspace,\r\n    deleteWorkspace,\r\n    onGettingCurrentWorkspace,\r\n    onManageWorkspace,\r\n    toolbarActiveBtn,\r\n    onEditBoard\r\n}) {\r\n\r\nconst [scroll, setScroll] = useState(0)\r\nconst [search, setSearch] = useState(\"\");\r\n\r\nconst [filteredFolders, setFilteredFolders] = useState([]);\r\nconst [filteredBoards, setFilteredBoards] = useState([]);\r\n\r\nuseEffect(() => {\r\n    console.log('scroll',scroll);\r\n}, [scroll])\r\n\r\n    if (!workspace.boards|| !workspace.folders) return <div>Loading....</div>\r\n    return (\r\n        <div className={`board-toolbar-menu ${isToolbarMenuClose?'close-toolbar-menu':'open-toolbar-menu'}`}>\r\n            <div className=\"sticky-wrapper\">\r\n            \r\n                <div className={`toggle-toolbar-menu-btn ${isToolbarMenuClose?'open':'close'}`} onClick={onToggleToolbarMenu}>\r\n                    {isToolbarMenuClose? <IoIosArrowForward style={{ width: '15px', height: '15px' }}/>:<IoIosArrowBack style={{ width: '15px', height: '15px' }}/>}\r\n                    {isToolbarMenuClose?<span className=\"label-text\">Open navigation</span>:<span className=\"label-text\">Close navigation</span>}\r\n                </div>\r\n                <div className={`navigation-container ${isToolbarMenuClose?'hide-txt':'show-txt'}`}>\r\n                        {toolbarActiveBtn==='favorite'?\r\n                        <FavoriteBoards\r\n                        onGettingCurrentBoard={onGettingCurrentBoard}\r\n                        CgViewComfortable={CgViewComfortable}\r\n                        removeBoard={removeBoard}\r\n                        editBoard={editBoard}\r\n                        moveBoard={moveBoard}\r\n                        moveBoardToFolder={moveBoardToFolder}\r\n                        scroll={scroll}\r\n                        onEditBoard={onEditBoard}\r\n                        />\r\n                        :\r\n                        <>\r\n                        <div className=\"nav-first-area\">\r\n                            <UpdateWorkspace \r\n                            updateWorkspace={updateWorkspace}\r\n                            deleteWorkspace={deleteWorkspace}\r\n                            onGettingCurrentWorkspace={onGettingCurrentWorkspace}\r\n                            onManageWorkspace={onManageWorkspace}\r\n                            />\r\n                            <div className=\"actions-container\">\r\n                                    <ToolbarMenuActionsBtn \r\n                                        btnName={'Add'}\r\n                                        addNewBoard={addNewBoard}\r\n                                        addNewFloder={addNewFloder}\r\n                                    /> \r\n                                    <ToolbarMenuActionsBtn \r\n                                        btnName={'Filters'}\r\n                                    />\r\n                                    \r\n                                    <Search  \r\n                                    search={search} \r\n                                    setSearch={setSearch} \r\n                                    setFilteredFolders={setFilteredFolders} \r\n                                    setFilteredBoards={setFilteredBoards} \r\n                                    />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"nav-second-area\">\r\n                            <div className={`second-area-wrapper`}>      \r\n                                <div className={`second-area-content`}\r\n                                    onScroll={() => {\r\n                                        console.log('scroll');\r\n                                        setScroll(curr=>curr+1)\r\n                                    }}\r\n                                >\r\n                                    {workspace.folders.length>0&&\r\n                                        <FolderList \r\n                                            folders={filteredFolders} \r\n                                            IoMdArrowDropdown={IoMdArrowDropdown}\r\n                                            CgViewComfortable={CgViewComfortable}\r\n                                            onGettingCurrentBoard={onGettingCurrentBoard}\r\n                                            addBoardInFolder={addBoardInFolder}\r\n                                            removeFolder={removeFolder}\r\n                                            updateFolder={updateFolder}\r\n                                            removeBoard={removeBoard}\r\n                                            editBoard={editBoard}\r\n                                            moveFolder={moveFolder}\r\n                                            moveBoard={moveBoard}\r\n                                            moveBoardToFolder={moveBoardToFolder}\r\n                                            scroll={scroll}\r\n                                            isNewFolderCreated={isNewFolderCreated}\r\n                                            onEndNewFolderUpdating={onEndNewFolderUpdating}\r\n                                            onEditBoard={onEditBoard}\r\n        \r\n                                        />\r\n                                    }\r\n                                    { workspace.boards.length>0&&\r\n                                        <BoardList \r\n                                            boards={filteredBoards}\r\n                                            onGettingCurrentBoard={onGettingCurrentBoard}\r\n                                            CgViewComfortable={CgViewComfortable}\r\n                                            removeBoard={removeBoard}\r\n                                            editBoard={editBoard}\r\n                                            moveBoard={moveBoard}\r\n                                            moveBoardToFolder={moveBoardToFolder}\r\n                                            scroll={scroll}\r\n                                            onEditBoard={onEditBoard}\r\n                                        />\r\n                                    }\r\n\r\n                                    { workspace.boards.length<1&&workspace.folders.length<1&&\r\n                                        <div className=\"empty-workspace\">\r\n                                            <div className=\"small-font\">\r\n                                                Workspace is empty\r\n                                            </div>\r\n                                            <div className=\"small-font\">\r\n                                                Create or add boards\r\n                                            </div>\r\n                                        </div>\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        </>\r\n                        }\r\n                </div>\r\n\r\n            </div>  \r\n        </div>\r\n    );\r\n}","D:\\git-projects\\funday\\frontend\\src\\cmps\\LoginModal.jsx",[],"D:\\git-projects\\funday\\frontend\\src\\cmps\\BoardToolbar.jsx",[],"D:\\git-projects\\funday\\frontend\\src\\cmps\\BoardMain.jsx",[],"D:\\git-projects\\funday\\frontend\\src\\cmps\\BoardHeader.jsx",[],"D:\\git-projects\\funday\\frontend\\src\\cmps\\BoardDetails.jsx",["395","396","397"],"import React, { useEffect,useState,useRef } from 'react';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { BoardHeader } from './BoardHeader'\r\nimport { BoardMain } from './BoardMain'\r\nimport { NewWorkspaceBoardMain } from './NewWorkspaceBoardMain'\r\n\r\nexport function BoardDetails({\r\n    isNewWorkspaceCreated,\r\n    onAddNewTable,\r\n    onEditBoard,\r\n    getTaskValue,\r\n    removeTable,\r\n    onAddNewTask,\r\n    onEditTask,\r\n    onEditTable,\r\n    onRemoveTask,\r\n    openConversationModal,\r\n    isOpenConversationModal,\r\n    updateWorkspace,\r\n    deleteWorkspace,\r\n    openActivitiesModal,\r\n    updateBoard\r\n}){\r\n    const workspace = useSelector(state => state.workspace.currWorkspace);\r\n    const [search, setSearch] = useState(\"\");\r\n\r\n    return (\r\n        <div className=\"board-content-container\">\r\n        {\r\n        !isNewWorkspaceCreated?\r\n            <BoardHeader \r\n                workspace={workspace}\r\n                onAddNewTable={onAddNewTable}\r\n                onEditBoard={onEditBoard}\r\n                setSearch={setSearch} \r\n                openActivitiesModal={openActivitiesModal}\r\n            />:\r\n            <div className=\"new-workspace-board-header\"></div>\r\n        }\r\n            {\r\n            !isNewWorkspaceCreated?\r\n                <BoardMain \r\n                isNewWorkspaceCreated={isNewWorkspaceCreated}\r\n                workspace={workspace} \r\n                getTaskValue={getTaskValue}\r\n                removeTable={removeTable}\r\n                onAddNewTask={onAddNewTask}\r\n                onEditTask={onEditTask}\r\n                onEditTable={onEditTable}\r\n                onEditBoard={onEditBoard}\r\n                onRemoveTask={onRemoveTask}\r\n                openConversationModal={openConversationModal}\r\n                isOpenConversationModal={isOpenConversationModal}\r\n                search={search} \r\n                updateBoard={updateBoard}\r\n            />:\r\n            <NewWorkspaceBoardMain \r\n            updateWorkspace={updateWorkspace}\r\n            deleteWorkspace={deleteWorkspace}\r\n            />\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n","D:\\git-projects\\funday\\frontend\\src\\cmps\\ConversationModal.jsx",["398","399"],"import React, { useEffect,useState,useRef } from 'react';\r\nimport { TextareaEditor } from \"./TextareaEditor\";\r\nimport { FaQuoteRight,FaBold} from 'react-icons/fa'\r\nimport { AiOutlineItalic,AiOutlineBars} from 'react-icons/ai'\r\nimport { MdFormatColorText,MdFormatListNumbered} from 'react-icons/md'\r\nimport { BsTextLeft,BsTextRight} from 'react-icons/bs'\r\nimport { GoMention} from 'react-icons/go'\r\nimport { TiAttachment } from 'react-icons/ti'\r\nimport { BiSmile } from 'react-icons/bi'\r\nimport { AiOutlineLike,AiFillLike } from 'react-icons/ai'\r\nimport { RiReplyLine } from 'react-icons/ri'\r\nimport { useSelector } from \"react-redux\";\r\nimport moment from 'moment'\r\n\r\n\r\n\r\nfunction ReplyMsgPreview({replyMsg,getUserById,conversation,currTask,onEditTask,currTable}) {\r\n\r\n    const loggedInUser = useSelector(state => state.user.loggedInUser);\r\n\r\n    function onUpdateReplyLikes(replyMsg) {\r\n        let updatedTask = {}\r\n        if(replyMsg.likes.users.includes(loggedInUser._id)){\r\n            updatedTask = {\r\n                ...currTask,\r\n                conversations: currTask.conversations.map((_conversation)=>\r\n                    _conversation._id===conversation._id?\r\n                    {\r\n                        ..._conversation,\r\n                        replys:conversation.replys.map(_reply=>\r\n                            _reply._id===replyMsg._id?\r\n                            {\r\n                                ..._reply,\r\n                                likes:{\r\n                                    count:_reply.likes.count-1,\r\n                                    users:_reply.likes.users.filter(userId=>userId!==loggedInUser._id)\r\n                                }\r\n                            }\r\n                            :_reply\r\n                            )}\r\n                        :_conversation)\r\n            }\r\n        }else{\r\n            updatedTask = {\r\n                ...currTask,\r\n                conversations: currTask.conversations.map((_conversation)=>\r\n                    _conversation._id===conversation._id?\r\n                    {\r\n                        ..._conversation,\r\n                        replys:conversation.replys.map(_reply=>\r\n                            _reply._id===replyMsg._id?\r\n                            {\r\n                                ..._reply,\r\n                                likes:{\r\n                                    count:_reply.likes.count+1,\r\n                                    users:[..._reply.likes.users,loggedInUser._id]\r\n                                }\r\n                            }\r\n                            :_reply\r\n                            )}\r\n                        :_conversation)\r\n            }\r\n        }\r\n        const desc = `liked reply \"${replyMsg.msg}\" on conversation inside task \"${currTask.name}\"`\r\n            \r\n        onEditTask(currTable,updatedTask,desc)\r\n    }\r\n\r\n    return(\r\n        <div className=\"reply-msg-preview\">\r\n            <div className=\"user-img\" style={{backgroundImage:`url(${getUserById(replyMsg.userId).avatar})`}}></div>\r\n            <div className=\"reply-content-wrapper\">\r\n                <div className=\"reply-msg-txt\">\r\n                    <span className=\"user-name\">{getUserById(replyMsg.userId).username}</span>\r\n                    <span>{replyMsg.msg}</span>\r\n                </div>\r\n                <div className=\"reply-msg-info flex\">\r\n                    {\r\n                    replyMsg.likes.users.includes(loggedInUser._id)?\r\n                    <AiFillLike onClick={()=>onUpdateReplyLikes(replyMsg)} className='liked pointer'/>\r\n                    :\r\n                    <AiOutlineLike onClick={()=>onUpdateReplyLikes(replyMsg)} className=\"pointer\"/>\r\n                    }\r\n                    {replyMsg.likes.count>0&&replyMsg.likes.count}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction ConversationPreview({onEditTask,currTable,currTask,conversation,getUserById,onUpdateMsgLikes,attachmentBtns}) {\r\n\r\n    const loggedInUser = useSelector(state => state.user.loggedInUser);\r\n    const [isReplyActive, setIsReplyActive] = useState(false);\r\n    const [reply, setReply] = useState('');\r\n    const [replyTextareaFocus, setReplyTextareaFocus] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if(!isReplyActive){\r\n            setReply('')\r\n        }\r\n    }, [isReplyActive])\r\n\r\n    function onReplyMsg(conversation) {\r\n        if(reply.trim().length<1)return\r\n        const newReplyMsg={\r\n            _id:Date.now(),\r\n            userId:loggedInUser._id,\r\n            msg:reply,\r\n            files:[],\r\n            img:'',\r\n            likes:{\r\n                count:0,\r\n                users:[]\r\n            },\r\n            createdAt:new Date().getTime()\r\n        }\r\n        const updatedTask = {\r\n            ...currTask,\r\n            conversations: currTask.conversations.map((_conversation)=>_conversation._id===conversation._id?{..._conversation,replys:[..._conversation.replys,newReplyMsg]}:_conversation)\r\n        }\r\n        const desc = `replied to conversation \"${conversation.msg}\" inside task \"${currTask.name}\"`\r\n        onEditTask(currTable,updatedTask,desc)\r\n        setReply('')\r\n        setIsReplyActive(false)\r\n        setReplyTextareaFocus(false)\r\n    }\r\n\r\n    return (\r\n        <div className=\"conversation-wrapper\" key={conversation._id}>\r\n            <div className=\"content-wrapper\">\r\n                <div className=\"sender-details\">\r\n                    <div className='sender-img' style={{backgroundImage:`url(${getUserById(conversation.userId).avatar})`}}></div>\r\n                    <div className='sender-name'>{getUserById(conversation.userId).username}</div>\r\n                </div>\r\n                <div className=\"msg\">{conversation.msg}</div>\r\n                <div className=\"flex\">\r\n                    <AiOutlineLike onClick={()=>onUpdateMsgLikes(conversation)} className=\"pointer\"/>\r\n                    {conversation.likes.count>0&&conversation.likes.count}\r\n                </div>\r\n            </div>\r\n            <div className=\"btns-wrapper\">\r\n                <div className=\"btn-wrapper\">\r\n                    <div \r\n                    className={`like-btn ${ conversation.likes.users.includes(loggedInUser._id)? 'liked':''}`}\r\n                    onClick={()=>onUpdateMsgLikes(conversation)}\r\n                    >\r\n                        {\r\n                            conversation.likes.users.includes(loggedInUser._id)?\r\n                            <AiFillLike/>\r\n                            :\r\n                            <AiOutlineLike/>\r\n                        }\r\n                        <span>Like</span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"btn-wrapper\">\r\n                    <div className='reply-btn' onClick={()=>setIsReplyActive(cur=>!cur)}>\r\n                        <RiReplyLine/>\r\n                        <span>Reply</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {(conversation.replys.length>0||isReplyActive)&&<div className={`reply-wrapper ${conversation.replys.length>0?'column-reverse':''}`}>\r\n                <div className={`add-reply-textarea ${(!replyTextareaFocus&&conversation.replys.length>0)?'reply-close-textarea':''}`}>\r\n                    <div className=\"user-img\" style={{backgroundImage:`url(${loggedInUser.avatar})`}}></div>\r\n                    <div className=\"reply-msg-wrapper\">\r\n                        <textarea \r\n                        name=\"\" \r\n                        id=\"\" \r\n                        cols=\"30\" \r\n                        rows={`${!replyTextareaFocus&&conversation.replys.length>0?'1':'4'}`}\r\n                        className={`reply-textarea ${!replyTextareaFocus&&conversation.replys.length>0?'reply-close-textarea':''}`}\r\n                        placeholder={`${!replyTextareaFocus&&conversation.replys.length>0?'Write a reply...':''}`}\r\n                        value={reply}\r\n                        onChange={(e)=>setReply(e.target.value)}\r\n                        onFocus={()=>setReplyTextareaFocus(true)}\r\n                        onBlur={()=>setReplyTextareaFocus(false)}\r\n                        ></textarea>\r\n                        {(replyTextareaFocus||conversation.replys.length<1)&&<div className=\"attachments-bar\">\r\n                            {attachmentBtns.map(btn=>\r\n                                <div className=\"attachment-btn\">\r\n                                    {btn.icon}\r\n                                    <span>{btn.name}</span>\r\n                                </div>\r\n                            )}\r\n                            <div className=\"add-msg-btn\"\r\n                            onMouseDown={()=>onReplyMsg(conversation)}\r\n                            >Reply</div>\r\n                        </div>}\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"reply-msgs-list\">\r\n                    {\r\n                        conversation.replys.map(replyMsg=>\r\n                            <ReplyMsgPreview \r\n                            replyMsg={replyMsg}\r\n                            getUserById={getUserById}\r\n                            conversation={conversation}\r\n                            currTask={currTask}\r\n                            onEditTask={onEditTask}\r\n                            currTable={currTable}\r\n                            />\r\n                        )\r\n                    }\r\n                </div>\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport function ConversationModal({\r\n    onEditTask,\r\n    isOpenConversationModal\r\n}) {\r\n\r\n    const users = useSelector(state => state.user.users)\r\n    const currBoard = useSelector(state => state.workspace.currBoard)\r\n    const conversationLocation = useSelector(state => state.workspace.conversationLocation)\r\n    const loggedInUser = useSelector(state => state.user.loggedInUser);\r\n    const [currTable, setCurrTable] = useState(null);\r\n    const [currTask, setCurrTask] = useState(null);\r\n    const [isActiveInput, setActiveInput] = useState(false);\r\n    const [msg, setMsg] = useState('');\r\n    const inuptRef = useRef()\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if(conversationLocation.tableId){\r\n            setCurrTable( currBoard.tables.filter(table=>\r\n                table._id===conversationLocation.tableId\r\n            )[0])\r\n        }\r\n    }, [conversationLocation.tableId,currBoard])\r\n\r\n    useEffect(() => {\r\n        if(conversationLocation.taskId&&currTable){\r\n            setCurrTask(\r\n                currTable.tasks.filter(task=>\r\n                    task._id===conversationLocation.taskId\r\n                )[0]\r\n            )\r\n        }\r\n    }, [conversationLocation.taskId,currTable])\r\n\r\n\r\n    useEffect(() => {\r\n        if(!isOpenConversationModal){\r\n            setMsg('')\r\n        }\r\n    }, [isOpenConversationModal])\r\n\r\n\r\n    function getUserById(userId){\r\n        const user =  users.filter(user=>\r\n        user._id===userId)[0]\r\n        return user\r\n    }\r\n\r\n\r\n    function onAddMsg(){\r\n        if(msg.trim().length<1)return\r\n        const newConversation={\r\n            _id:Date.now(),\r\n            userId:loggedInUser._id,\r\n            msg:msg,\r\n            files:[],\r\n            img:'',\r\n            likes:{\r\n                count:0,\r\n                users:[]\r\n            },\r\n            replys:[],\r\n            createdAt:new Date().getTime()\r\n        }\r\n        const updatedTask = {\r\n            ...currTask,\r\n            conversations: [...currTask.conversations, newConversation]\r\n        }\r\n        const desc = `added new conversation to task \"${updatedTask.name}\" inside \"${currTable.name}\"`\r\n        onEditTask(currTable,updatedTask,desc)\r\n        setMsg('')\r\n    }\r\n\r\n    function onUpdateMsgLikes(conversation) {;\r\n        if(conversation.likes.users.includes(loggedInUser._id)){\r\n            const updatedTask = {\r\n                ...currTask,\r\n                conversations: currTask.conversations.map((_conversation)=>\r\n                _conversation._id===conversation._id?\r\n                {\r\n                    ...conversation,\r\n                    likes:{\r\n                        count:conversation.likes.count-1,\r\n                        users:conversation.likes.users.filter(userId=>userId!==loggedInUser._id)\r\n                    }\r\n                }:_conversation)\r\n            }\r\n            const desc = `liked conversation \"${conversation.msg}\" inside task \"${currTask.name}\"`\r\n            onEditTask(currTable,updatedTask,desc)\r\n        }else{\r\n            const updatedTask = {\r\n                ...currTask,\r\n                conversations: currTask.conversations.map((_conversation)=>\r\n                _conversation._id===conversation._id?\r\n                {\r\n                    ...conversation,\r\n                    likes:{\r\n                        count:conversation.likes.count+1,\r\n                        users:[...conversation.likes.users,loggedInUser._id]\r\n                    }\r\n                }:_conversation)\r\n            }\r\n            const desc = `liked conversation \"${conversation.msg}\" inside task \"${currTask.name}\"`\r\n            onEditTask(currTable,updatedTask,desc)\r\n        }\r\n    }\r\n\r\n    const editorBtns=[\r\n        {\r\n            icon:<FaQuoteRight/>,\r\n            name:'Blockquote'\r\n        },\r\n        {\r\n            icon:<FaBold/>,\r\n            name:'Strong'\r\n        },\r\n        {\r\n            icon:<AiOutlineItalic/>,\r\n            name:'Emphasis <em></em>'\r\n        }, \r\n        {\r\n            icon:<MdFormatColorText/>,\r\n            name:'Text color'\r\n        },\r\n        {\r\n            icon:<AiOutlineBars/>,\r\n            name:'Bulleted List '\r\n        },\r\n        {\r\n            icon:<MdFormatListNumbered/>,\r\n            name:'Numbered List'\r\n        },\r\n        {\r\n            icon:<BsTextLeft/>,\r\n            name:'Text left'\r\n        },\r\n        {\r\n            icon:<BsTextRight/>,\r\n            name:'Text right'\r\n        }\r\n\r\n    ]\r\n\r\n    const attachmentBtns= [\r\n        {\r\n            icon:<TiAttachment/>,\r\n            name:'Add files'\r\n        },\r\n        {\r\n            icon:'',\r\n            name:'GIF'\r\n        },\r\n        {\r\n            icon:<BiSmile/>,\r\n            name:'Emoji'\r\n        },\r\n        {\r\n            icon:<GoMention/>,\r\n            name:'Mention'\r\n        }\r\n    ]\r\n    return (\r\n        <div className={`conversation-modal-content`}>\r\n            {\r\n                !currTask?\r\n                <div className=\"no-task-msg\">\r\n                    <div className=\"msg\">Task was deleted...</div>\r\n                    <img className=\"illustration-img\" \r\n                    src={process.env.PUBLIC_URL + \"/assets/img/illustration-red-x-mark.jpg\"} alt=\"\" srcset=\"\"/>\r\n                </div>\r\n                :\r\n                <>\r\n                <div className='conversation-modal-title'>\r\n          {currTask&&currTask.name}\r\n          </div>\r\n          <div className='conversation-modal-updates'> \r\n              Updates {currTask&&currTask.conversations.length>0&&`/ ${currTask.conversations.length}`}\r\n          </div>\r\n          <div className=\"updates-section-content\">\r\n            {isActiveInput?\r\n                <input type=\"text\" placeholder='Write an update...' className=\"conversation-input\" onClick={()=>{\r\n                    setActiveInput(true)\r\n                    setTimeout(() => {\r\n                        if(inuptRef&&inuptRef.current){\r\n                            inuptRef.current.focus()\r\n                        }\r\n                    }, 0);\r\n                }}/>\r\n                :\r\n                <div className=\"new-msg-container\">\r\n                <div className=\"textarea-editor-wrapper\">\r\n                    {/* <TextareaEditor/> */}\r\n                    <div className=\"buttons-bar\">\r\n                        {editorBtns.map(btn=>\r\n                            <div className=\"editor-btn\">\r\n                            {btn.icon}\r\n                                <span className=\"label-text arrow-up text-editor-label\">{btn.name}</span>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                    <textarea name=\"\" id=\"\" cols=\"30\" rows=\"10\" ref={inuptRef}\r\n                    onBlur={()=> setActiveInput(false)}\r\n                    value={msg}\r\n                    onChange={(ev)=>setMsg(ev.target.value)}\r\n                    />\r\n                </div>\r\n                <div className=\"attachments-bar\">\r\n                        {attachmentBtns.map(btn=>\r\n                            <div className=\"attachment-btn\">\r\n                                {btn.icon}\r\n                                <span>{btn.name}</span>\r\n                            </div>\r\n                        )}\r\n                        <div className=\"add-msg-btn\"\r\n                        onClick={onAddMsg}\r\n                        >Update</div>\r\n                </div>\r\n                </div>\r\n            }\r\n            {\r\n                <div className='updates-list'>\r\n                    {\r\n                        currTask&&currTask.conversations.length>0?\r\n                            <>\r\n                            {currTask.conversations.map(conversation=>\r\n                                <ConversationPreview\r\n                                key={conversation._id}\r\n                                conversation={conversation}\r\n                                getUserById={getUserById}\r\n                                onUpdateMsgLikes={onUpdateMsgLikes}\r\n                                attachmentBtns={attachmentBtns}\r\n                                onEditTask={onEditTask}\r\n                                currTable={currTable}\r\n                                currTask={currTask}\r\n                                />\r\n                            )}\r\n                            </>\r\n                        :\r\n                            <span className='no-updates'>No updates yet...</span>\r\n                        }\r\n                </div>\r\n            }\r\n          </div>\r\n                </>\r\n            }\r\n          {/* <div className='conversation-modal-title'>\r\n          {currTask&&currTask.name}\r\n          </div>\r\n          <div className='conversation-modal-updates'> \r\n              Updates {currTask&&currTask.conversations.length>0&&`/ ${currTask.conversations.length}`}\r\n          </div>\r\n          <div className=\"updates-section-content\">\r\n            {isActiveInput?\r\n                <input type=\"text\" placeholder='Write an update...' className=\"conversation-input\" onClick={()=>{\r\n                    setActiveInput(true)\r\n                    setTimeout(() => {\r\n                        if(inuptRef&&inuptRef.current){\r\n                            inuptRef.current.focus()\r\n                        }\r\n                    }, 0);\r\n                }}/>\r\n                :\r\n                <div className=\"new-msg-container\">\r\n                <div className=\"textarea-editor-wrapper\">\r\n                    <div className=\"buttons-bar\">\r\n                        {editorBtns.map(btn=>\r\n                            <div className=\"editor-btn\">\r\n                            {btn.icon}\r\n                                <span className=\"label-text arrow-up text-editor-label\">{btn.name}</span>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                    <textarea name=\"\" id=\"\" cols=\"30\" rows=\"10\" ref={inuptRef}\r\n                    onBlur={()=> setActiveInput(false)}\r\n                    value={msg}\r\n                    onChange={(ev)=>setMsg(ev.target.value)}\r\n                    />\r\n                </div>\r\n                <div className=\"attachments-bar\">\r\n                        {attachmentBtns.map(btn=>\r\n                            <div className=\"attachment-btn\">\r\n                                {btn.icon}\r\n                                <span>{btn.name}</span>\r\n                            </div>\r\n                        )}\r\n                        <div className=\"add-msg-btn\"\r\n                        onClick={onAddMsg}\r\n                        >Update</div>\r\n                </div>\r\n                </div>\r\n            }\r\n            {\r\n                <div className='updates-list'>\r\n                    {\r\n                        currTask&&currTask.conversations.length>0?\r\n                            <>\r\n                            {currTask.conversations.map(conversation=>\r\n                                <ConversationPreview\r\n                                key={conversation._id}\r\n                                conversation={conversation}\r\n                                getUserById={getUserById}\r\n                                onUpdateMsgLikes={onUpdateMsgLikes}\r\n                                attachmentBtns={attachmentBtns}\r\n                                onEditTask={onEditTask}\r\n                                currTable={currTable}\r\n                                currTask={currTask}\r\n                                />\r\n                            )}\r\n                            </>\r\n                        :\r\n                            <span className='no-updates'>No updates yet...</span>\r\n                        }\r\n                </div>\r\n            }\r\n          </div> */}\r\n        </div>\r\n    );\r\n}\r\n","D:\\git-projects\\funday\\frontend\\src\\cmps\\NewWorkspaceBoardMain.jsx",["400","401"],"import React, { useState,useRef,useEffect } from 'react';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { FaPencilAlt } from 'react-icons/fa'\r\nimport { BiCheck } from 'react-icons/bi';\r\nimport { BsThreeDots,BsTrashFill } from 'react-icons/bs';\r\nimport { WorkspaceIconPicker } from \"./WorkspaceIconPicker\";\r\nimport { DynamicFaIcon } from \"../data/dynamicFaIcon\";\r\n\r\nexport function NewWorkspaceBoardMain({updateWorkspace,deleteWorkspace}) {\r\n    const workspace = useSelector(state => state.workspace.currWorkspace);\r\n    const[isOpenModal,setIsOpenModal]=useState(false)\r\n    const[isShowModal,setIsShowModal]=useState(false)\r\n    const[newWorkspaceColor,setNewWorkspaceColor]=useState(workspace.color)\r\n    const[newWorkspaceIcon,setNewWorkspaceIcon]=useState(workspace.img) \r\n    const [isUpdateName, setIsUpdateName] = useState(false);\r\n    const [workspaceName, setWorkspaceName] = useState(workspace.name);\r\n    const [isUpdateDesc, setIsUpdateDesc] = useState(false);\r\n    const [workspaceDesc, setWorkspaceDesc] = useState(workspace.desc);\r\n    const nameInputEl = useRef()\r\n    const descInputEl = useRef()\r\n\r\n    useEffect(() => {\r\n        setNewWorkspaceColor(workspace.color)\r\n        setNewWorkspaceIcon(workspace.img) \r\n        setWorkspaceName(workspace.name)\r\n        setWorkspaceDesc(workspace.desc)\r\n    }, [workspace])\r\n\r\n    function handleChangeName(ev) {\r\n        // if(ev.target.value.length<1)return\r\n        setWorkspaceName(ev.target.value)\r\n    }    \r\n    function onUpdateName() {\r\n        setIsUpdateName(true)\r\n        setTimeout(() => {\r\n            nameInputEl.current.focus()\r\n            nameInputEl.current.select()\r\n        }, 0); \r\n    }\r\n\r\n    function handleChangDesc(ev) {\r\n        setWorkspaceDesc(ev.target.value)\r\n    }\r\n    function onUpdateDesc() {\r\n        setIsUpdateDesc(true)\r\n        setTimeout(() => {\r\n            descInputEl.current.focus()\r\n            descInputEl.current.select()\r\n        }, 0); \r\n    }\r\n    return (\r\n        <div className=\"new-workspace-board-main-wrapper\">\r\n            <div\r\n                className=\"workspace-icon\"  \r\n                style={{backgroundColor:`${newWorkspaceColor}`}}\r\n                onClick={()=>{setIsOpenModal(true)}}\r\n                tabIndex=\"0\"\r\n                onBlur={()=>{\r\n                    if(newWorkspaceColor!==workspace.color||newWorkspaceIcon!==workspace.img){\r\n                        const newWorkspace={\r\n                            ...workspace,\r\n                            img:newWorkspaceIcon,\r\n                            color:newWorkspaceColor\r\n                        }\r\n                        updateWorkspace(newWorkspace)\r\n                    }\r\n                    setIsOpenModal(false)\r\n                }}\r\n            >\r\n                <DynamicFaIcon name={newWorkspaceIcon} />\r\n                {!isOpenModal&&\r\n                    <div className=\"workspace-icon-edit\" >\r\n                        <div><FaPencilAlt className=\"workspace-edit-pencil\"/></div>\r\n                        <div>Edit</div>\r\n                    </div>\r\n                }\r\n                {isOpenModal&&\r\n                    <div className=\" modal-default-style workspace-icon-modal\">\r\n                        <WorkspaceIconPicker updateWorkspace={updateWorkspace}/>\r\n                    </div>\r\n                }\r\n            </div>\r\n            <div className=\"content-wrapper\">\r\n                <div className=\"workspace-name-container\">\r\n                    <div\r\n                        className={`name-wrapper  ${isUpdateName?'updating':''}`} onClick={onUpdateName}>\r\n                        {isUpdateName?\r\n                        <input \r\n                            className=\"update-workspace-input\" \r\n                            type=\"text\" \r\n                            value={workspaceName}\r\n                            onChange={handleChangeName}\r\n                            ref={nameInputEl}\r\n                            onBlur={()=>{\r\n                                setIsUpdateName(false)\r\n                                if(workspaceName!==workspace.name){\r\n                                    const newWorkspace={\r\n                                        ...workspace,\r\n                                        name:workspaceName,\r\n                                    }\r\n                                    updateWorkspace(newWorkspace)\r\n                                }\r\n                            }}\r\n                            onKeyDown={(ev) => {\r\n                                if (ev.key === 'Enter') {\r\n                                    ev.target.blur()\r\n                                }\r\n                            }}\r\n                        />\r\n                        :\r\n                        <div>{workspaceName}</div>\r\n                        }\r\n                    </div>\r\n                        <div className=\"workspace-options-container\"\r\n                        tabIndex=\"0\"\r\n                        onBlur={()=>setIsShowModal(false)}\r\n                        >\r\n                            <BsThreeDots className={`workspace-dots ${isShowModal?'open':''}`} onClick={()=>setIsShowModal(curr=>!curr)}/>\r\n                            {isShowModal&&\r\n                                <div className=\" modal-default-style workspace-options-modal\">\r\n                                    <div className=\"modal-btn workspace-options-btn\"\r\n                                    onClick={()=>\r\n                                        {onUpdateDesc()\r\n                                        setIsShowModal(false)}\r\n                                    }\r\n                                    >\r\n                                        <FaPencilAlt className=\"icon\"/>\r\n                                        <span>Rename workspace</span>\r\n                                    </div>\r\n                                    <div className=\"modal-btn workspace-options-btn\"\r\n                                     onClick={()=>\r\n                                        {\r\n                                            deleteWorkspace(workspace._id)\r\n                                            setIsShowModal(false)\r\n                                        }\r\n                                    }\r\n                                    >\r\n                                        <BsTrashFill className=\"icon\"/>\r\n                                        <span>Delete workspace</span>\r\n                                    </div>\r\n                                </div>}\r\n                        </div>\r\n                </div>\r\n\r\n                <div\r\n                    className={`desc-wrapper ${isUpdateDesc?'updating':''}`} onClick={onUpdateDesc}>\r\n                    {isUpdateDesc?\r\n                    <input \r\n                        className=\"update-workspace-input\" \r\n                        type=\"text\" \r\n                        value={workspaceDesc}\r\n                        onChange={handleChangDesc}\r\n                        ref={descInputEl}\r\n                        onBlur={()=>{\r\n                            setIsUpdateDesc(false)\r\n                            if(workspaceDesc!==workspace.desc){\r\n                                const newWorkspace={\r\n                                    ...workspace,\r\n                                    desc:workspaceDesc\r\n                                }\r\n                                updateWorkspace(newWorkspace)\r\n                            }\r\n                        }}\r\n                        onKeyDown={(ev) => {\r\n                            if (ev.key === 'Enter') {\r\n                                ev.target.blur()\r\n                            }\r\n                        }}\r\n                    />\r\n                    :\r\n                    <div>{workspaceDesc}</div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","D:\\git-projects\\funday\\frontend\\src\\cmps\\UploadImg.jsx",[],"D:\\git-projects\\funday\\frontend\\src\\store\\actions\\systemActions.js",[],"D:\\git-projects\\funday\\frontend\\src\\services\\userService.js",["402"],"import httpService from './httpService'\r\n\r\nexport default {\r\n  login,\r\n  logout,\r\n  signup,\r\n  getUsers,\r\n  getById,\r\n  remove,\r\n  update,\r\n  removeFavBoard,\r\n  addFavBoard,\r\n  loginByGoogle,\r\n  guestLogin,\r\n  sendNotification,\r\n  markAsRead,\r\n  toggleMarkAsRead,\r\n  removeNotification,\r\n  removeAllNotifications,\r\n  markAllAsRead\r\n}\r\n\r\nfunction getUsers() {\r\n  return httpService.get('user')\r\n}\r\n\r\nfunction getById(userId) {\r\n  return httpService.get(`user/${userId}`)\r\n}\r\nfunction remove(userId) {\r\n  return httpService.delete(`user/${userId}`)\r\n}\r\n\r\nasync function update(user) {\r\n  const newUser = await httpService.put(`user/${user._id}`, user)\r\n  return _handleLogin(newUser)\r\n}\r\n\r\nasync function login(userCred) {\r\n  const user = await httpService.post('auth/login', userCred)\r\n  if(user){ \r\n    return _handleLogin(user)\r\n  }\r\n  // return _handleLogin(user)\r\n}\r\nasync function signup(userCred) {\r\n  const user = await httpService.post('auth/signup', userCred)\r\n  return _handleLogin(user)\r\n}\r\nasync function logout() {\r\n  await httpService.post('auth/logout')\r\n  sessionStorage.clear()\r\n}\r\n\r\nasync function loginByGoogle(userCred) {\r\n  const user = await httpService.post('auth/loginByGoogle', userCred)\r\n  return _handleLogin(user)\r\n}\r\n\r\nfunction _handleLogin(user) {\r\n  sessionStorage.setItem('user', JSON.stringify(user))\r\n  return user\r\n}\r\n\r\nasync function guestLogin() {\r\n  try {\r\n      const user = await login({ email: 'guest@gmail.com', password: '12345' });\r\n      return user\r\n  } catch (err) {\r\n      console.log('userService: Couldn\\'t login as guest');\r\n      throw err;\r\n  }\r\n}\r\n\r\nasync function addFavBoard(user,boardId){\r\n  user.favBoards = [boardId, ...user.favBoards]\r\n  const newUser = await httpService.put(`user/${user._id}`, user)\r\n  return _handleLogin(newUser)\r\n}\r\n\r\nasync function removeFavBoard(user,boardId){\r\n  user.favBoards = user.favBoards.filter(_boardId=>_boardId!==boardId)\r\n  const newUser = await httpService.put(`user/${user._id}`, user)\r\n  return _handleLogin(newUser)\r\n}\r\n\r\nasync function sendNotification(user,from,section,content,taskId,tableId,boardId,WorkspaceId){\r\n\r\n  const notification = {\r\n    _id:Date.now().toString(16) + Math.random().toString(16),\r\n    from,\r\n    to:user._id,\r\n    section,\r\n    content,\r\n    createdAt: Date.now(),\r\n    isRead:false,\r\n    //for opening the conversation modal with the curr task conversation\r\n    conversationLocation:{\r\n        taskId,\r\n        tableId,\r\n        boardId,\r\n        WorkspaceId,\r\n    }\r\n  }\r\n\r\n  user.notifications = [notification,...user.notifications]\r\n  const newUser = await httpService.put(`user/${user._id}`, user)\r\n  if(user._id===from){\r\n    return _handleLogin(newUser)\r\n  }\r\n}\r\n\r\nasync function markAsRead(user, notificationId){\r\n  const notification = user.notifications.filter(_notification=>_notification._id===notificationId)[0]\r\n  user.notifications = user.notifications.map(_notification=>\r\n      _notification._id===notificationId?{...notification, isRead:true}:_notification\r\n  )\r\n  const newUser = await httpService.put(`user/${user._id}`, user)\r\n  return _handleLogin(newUser)\r\n}\r\n\r\nasync function toggleMarkAsRead(user, notificationId){\r\n  const notification = user.notifications.filter(_notification=>_notification._id===notificationId)[0]\r\n  if(notification.isRead){\r\n    user.notifications = user.notifications.map(_notification=>\r\n      _notification._id===notificationId?{...notification, isRead:false}:_notification\r\n      )\r\n  }else{\r\n    user.notifications = user.notifications.map(_notification=>\r\n      _notification._id===notificationId?{...notification, isRead:true}:_notification\r\n      )\r\n  }\r\n  const newUser = await httpService.put(`user/${user._id}`, user)\r\n  return _handleLogin(newUser)\r\n}\r\n\r\nasync function markAllAsRead(user){\r\n\r\n  user.notifications.forEach(notification => {\r\n    notification.isRead=true\r\n  });\r\n\r\n  const newUser = await httpService.put(`user/${user._id}`, user)\r\n  return _handleLogin(newUser)\r\n}\r\n\r\n\r\nasync function removeNotification(user, notificationId) {\r\n  user.notifications = user.notifications.filter(notification=>notification._id!==notificationId)\r\n  const newUser = await httpService.put(`user/${user._id}`, user)\r\n  return _handleLogin(newUser)\r\n}\r\n\r\nasync function removeAllNotifications(user) {\r\n  user.notifications = []\r\n  const newUser = await httpService.put(`user/${user._id}`, user)\r\n  return _handleLogin(newUser)\r\n}","D:\\git-projects\\funday\\frontend\\src\\services\\httpService.js",["403"],"import Axios from 'axios'\r\n\r\nconst BASE_URL =\r\n  process.env.NODE_ENV === 'production' ? '/api/' : '//localhost:3030/api/'\r\n\r\nvar axios = Axios.create({\r\n  withCredentials: true,\r\n})\r\n\r\nexport default {\r\n  get(endpoint, data) {\r\n    return ajax(endpoint, 'GET', data)\r\n  },\r\n  post(endpoint, data) {\r\n    return ajax(endpoint, 'POST', data)\r\n  },\r\n  put(endpoint, data) {\r\n    return ajax(endpoint, 'PUT', data)\r\n  },\r\n  delete(endpoint, data) {\r\n    return ajax(endpoint, 'DELETE', data)\r\n  },\r\n}\r\n\r\nasync function ajax(endpoint, method = 'get', data = null) {\r\n  try {\r\n    const res = await axios({\r\n      url: `${BASE_URL}${endpoint}`,\r\n      method,\r\n      data,\r\n    })\r\n    return res.data\r\n  } catch (err) {\r\n    console.log(\r\n      `Had Issues ${method}ing to the backend, endpoint: ${endpoint}, with data: ${data}`\r\n    )\r\n    console.dir(err)\r\n    if (err.response && err.response.status === 401) {\r\n      // window.location.assign('/')\r\n      // window.location.assign('/#/login')\r\n    }\r\n    throw err\r\n  }\r\n}\r\n\r\n","D:\\git-projects\\funday\\frontend\\src\\services\\cloudinarySerivice.js",[],"D:\\git-projects\\funday\\frontend\\src\\cmps\\FolderList.jsx",["404","405","406","407","408"],"import React, { useState,useRef,useEffect } from 'react';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { FolderPreview } from \"./FolderPreview\";\r\n\r\nexport function FolderList({\r\n    folders,\r\n    IoMdArrowDropdown,\r\n    CgViewComfortable,\r\n    onGettingCurrentBoard,\r\n    addBoardInFolder,\r\n    removeFolder,\r\n    updateFolder,\r\n    removeBoard,\r\n    editBoard,\r\n    moveFolder,\r\n    moveBoard,\r\n    moveBoardToFolder,\r\n    scroll,\r\n    isNewFolderCreated,\r\n    onEndNewFolderUpdating,\r\n    onEditBoard\r\n}) {\r\n    // const currWorkspace = useSelector(state => state.workspace.currWorkspace);\r\n \r\n    if (!folders) return <div>Loading...</div>\r\n    return (\r\n      <>\r\n       {folders.map((folder,index)=>\r\n    \r\n            <FolderPreview \r\n            folder={folder} \r\n            folders={folders}\r\n            IoMdArrowDropdown={IoMdArrowDropdown}\r\n            CgViewComfortable={CgViewComfortable}\r\n            onGettingCurrentBoard={onGettingCurrentBoard}\r\n            addBoardInFolder={addBoardInFolder}\r\n            removeFolder={removeFolder}\r\n            updateFolder={updateFolder}\r\n            removeBoard={removeBoard}\r\n            editBoard={editBoard}\r\n            moveFolder={moveFolder}\r\n            moveBoard={moveBoard}\r\n            moveBoardToFolder={moveBoardToFolder}\r\n            scroll={scroll}\r\n            index={index}\r\n            isNewFolderCreated={isNewFolderCreated}\r\n            onEndNewFolderUpdating={onEndNewFolderUpdating}\r\n            onEditBoard={onEditBoard}\r\n            />\r\n       )}\r\n      </>\r\n    );\r\n}\r\n","D:\\git-projects\\funday\\frontend\\src\\cmps\\BoardList.jsx",["409"],"import React, { useState } from 'react';\r\nimport { BsThreeDots } from 'react-icons/bs'\r\nimport { BoardPreview } from './BoardPreview'\r\n\r\nexport function BoardList({\r\n    boards,\r\n    onGettingCurrentBoard,\r\n    CgViewComfortable,\r\n    removeBoard,\r\n    editBoard,\r\n    moveBoard,\r\n    moveBoardToFolder,\r\n    object,\r\n    scroll,\r\n    cmp,\r\n    onEditBoard\r\n}) {\r\n\r\n    // const boards = useSelector(state => state.workspace.boards);\r\n\r\n    if (!boards) return <div>Loading...</div>\r\n    return (\r\n      <>\r\n       {boards.map((board,index)=>\r\n              <BoardPreview\r\n              board={board}\r\n              onGettingCurrentBoard={onGettingCurrentBoard}\r\n              CgViewComfortable={CgViewComfortable}\r\n              BsThreeDots={BsThreeDots}\r\n              removeBoard={removeBoard}\r\n              editBoard={editBoard}\r\n              moveBoard={moveBoard}\r\n              moveBoardToFolder={moveBoardToFolder}        \r\n              object={object}\r\n              scroll={scroll}\r\n              cmp={cmp}\r\n              onEditBoard={onEditBoard}\r\n              />\r\n        )}\r\n      </>\r\n    );\r\n}\r\n","D:\\git-projects\\funday\\frontend\\src\\cmps\\ToolbarMenuActionsBtn.jsx",["410","411"],"import React, { useEffect,useState,useRef } from 'react';\r\nimport { ToolbarMenuActionsBtnModal } from \"./ToolbarMenuActionsBtnModal\";\r\nimport { AiOutlinePlusCircle } from 'react-icons/ai'\r\nimport { FiFilter } from 'react-icons/fi'\r\nimport { CreateBoard } from \"./CreateBoard\";\r\nimport { PopupModal } from \"./PopupModal\";\r\n\r\nexport function ToolbarMenuActionsBtn({\r\n    btnName,\r\n    addNewBoard,\r\n    addNewFloder\r\n}) {\r\n    const [isOpenModal, setIsOpenModal] = useState(false);\r\n    const [isShown, setIsShown] = useState(false)\r\n    const getBtnValue=()=>{\r\n        let content = [];\r\n        switch(btnName) {\r\n            case 'Add':\r\n                content.push(\r\n                <> \r\n                    <AiOutlinePlusCircle className=\"icon\"/>\r\n                    <span>Add</span>       \r\n                </>\r\n                );\r\n                break; \r\n            case 'Filters':\r\n                content.push(\r\n                <>  \r\n                    <FiFilter className=\"icon\"/>\r\n                    <span>Filters</span> \r\n                </>\r\n                );\r\n                break;\r\n            default:\r\n                content.push('');\r\n                break;\r\n        }                                \r\n        return content;\r\n    }\r\n    return (\r\n        <>\r\n    <div className='actions-btn-wrapper' \r\n    tabIndex='0'\r\n     onBlur={()=>{setIsOpenModal(false)}}\r\n     >\r\n        { isOpenModal&&<ToolbarMenuActionsBtnModal\r\n         btnName={btnName}\r\n         addNewBoard={addNewBoard}\r\n         addNewFloder={addNewFloder}\r\n         setIsShown={setIsShown}\r\n          />}\r\n        <div className={`add actions-btn ${isOpenModal?'active':''}`} onClick={()=>{setIsOpenModal(curr=>!curr)}}>\r\n            {getBtnValue()}\r\n        </div>\r\n    </div>\r\n\r\n    {isShown&&<PopupModal setIsShown={setIsShown} >\r\n            <CreateBoard addNewBoard={addNewBoard}  setIsShown={setIsShown}/>\r\n        </PopupModal>}\r\n    </>\r\n    );\r\n}\r\n","D:\\git-projects\\funday\\frontend\\src\\cmps\\UpdateWorkspace.jsx",[],"D:\\git-projects\\funday\\frontend\\src\\cmps\\FavoriteBoards.jsx",["412"],"import React, { useEffect,useState,useRef } from 'react';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { BsFillStarFill } from 'react-icons/bs'\r\nimport { BoardList } from './BoardList'\r\nimport { boardService } from '../services/boardService'\r\nimport { updateWorkspace,updateCurrWorkspace} from '../store/actions/workspaceActions'\r\n\r\nexport function FavoriteBoards({\r\n    onGettingCurrentBoard,\r\n    CgViewComfortable,\r\n    scroll,\r\n    onEditBoard\r\n    // removeBoard,\r\n    // editBoard,\r\n    // moveBoard,\r\n    // moveBoardToFolder\r\n}){\r\n    const loggedInUser = useSelector(state => state.user.loggedInUser);\r\n    const favBoardsIds = useSelector(state => state.user.loggedInUser.favBoards)\r\n    const workspaces = useSelector(state => state.workspace.workspaces);\r\n    const boardWorkspace = useSelector(state => state.workspace.boardWorkspace);\r\n    const dispatch = useDispatch();\r\n    // const [allBoards, setAllBoards] = useState([]);\r\n\r\n    const [workspaceBoards, setWorkspaceBoards] = useState([]);\r\n    const [folderBoards, setFolderBoards] = useState([]);\r\n    \r\n    const [favoriteWorkspaceBoards, setFavoriteWorkspaceBoards] = useState([]);\r\n    const [favoriteFolderBoards, setFavoriteFolderBoards] = useState([]);\r\n    // const [favoriteBoards, setFavoriteBoards] = useState([]);\r\n\r\n    const removeBoard=(boardId)=>{\r\n        const newWorkspace = boardService.removeBoard(boardWorkspace, boardId)\r\n        dispatch(updateWorkspace(newWorkspace))\r\n        dispatch(updateCurrWorkspace(newWorkspace))\r\n    }\r\n\r\n    //move board to another workspace or move board in folder to the workspace\r\n    const moveBoard=(newWorkspace,cuurBoard)=>{\r\n        if(boardWorkspace._id===newWorkspace._id){\r\n            const updatedWorkspace = boardService.removeBoard(boardWorkspace, cuurBoard._id)\r\n            const newWorkspaceToUpdate={\r\n                ...updatedWorkspace,\r\n                boards:[...updatedWorkspace.boards, cuurBoard]\r\n            }\r\n            dispatch(updateWorkspace(newWorkspaceToUpdate))\r\n            dispatch(updateCurrWorkspace(newWorkspaceToUpdate))\r\n        }else{\r\n            removeBoard(cuurBoard._id)\r\n            const newWorkspaceToUpdate={\r\n                ...newWorkspace,\r\n                boards:[...newWorkspace.boards, cuurBoard]\r\n            }\r\n            dispatch(updateWorkspace(newWorkspaceToUpdate))\r\n            dispatch(updateCurrWorkspace(newWorkspaceToUpdate))\r\n        }\r\n    }\r\n    //move board to another folder\r\n    const moveBoardToFolder=(folderWorkspace,newFolder,cuurBoard)=>{\r\n        const updatedWorkspace = boardService.removeBoard(boardWorkspace, cuurBoard._id)\r\n        dispatch(updateWorkspace(updatedWorkspace))\r\n        dispatch(updateCurrWorkspace(updatedWorkspace))\r\n        const newFolderToUpdate={\r\n            ...newFolder,\r\n            boards:[...newFolder.boards, cuurBoard]\r\n        }\r\n        if(updatedWorkspace._id===folderWorkspace._id){\r\n            const newWorkspace = boardService.updateFolder(updatedWorkspace, newFolderToUpdate)\r\n            dispatch(updateWorkspace(newWorkspace))\r\n            dispatch(updateCurrWorkspace(newWorkspace))\r\n        }else{\r\n            const newWorkspace = boardService.updateFolder(folderWorkspace, newFolderToUpdate)\r\n            dispatch(updateWorkspace(newWorkspace))\r\n            dispatch(updateCurrWorkspace(newWorkspace))\r\n        }\r\n    }  \r\n    \r\n\r\n    function editBoard(newBoard){\r\n            let newWorkspace = boardWorkspace\r\n            let boardInsideFolder = {\r\n                isBoardInsideFolder:false,\r\n                cuurFolde:null\r\n            }\r\n            newWorkspace.folders.map(folder=>\r\n                folder.boards.map(board=>\r\n                    board._id === newBoard._id?boardInsideFolder={\r\n                        ...boardInsideFolder,\r\n                        isBoardInsideFolder:true,\r\n                        cuurFolde:folder\r\n                    }\r\n                    :null\r\n                    \r\n            ))\r\n            if(boardInsideFolder.isBoardInsideFolder){\r\n                //board insode folder\r\n                newWorkspace ={\r\n                    ...boardWorkspace, \r\n                    folders: boardWorkspace.folders.map(folder=>\r\n                        folder._id===boardInsideFolder.cuurFolde._id?\r\n                       {...folder, boards:\r\n                        folder.boards.map(board=>\r\n                            board._id === newBoard._id?\r\n                            newBoard:board\r\n                        )}\r\n                        :folder\r\n                    )\r\n                }\r\n            }else{\r\n                //board insode workspace\r\n                 //replace the currBoard whith the new Board\r\n                newWorkspace.boards = newWorkspace.boards.map(board=>\r\n                    board._id === newBoard._id?newBoard:board\r\n                )\r\n            }\r\n            // send to update updateWorkspace\r\n            dispatch(updateWorkspace(newWorkspace))\r\n            dispatch(updateCurrWorkspace(newWorkspace))\r\n    }\r\n    \r\n    useEffect(() => {\r\n        setWorkspaceBoards([])\r\n        setFolderBoards([])\r\n        if(loggedInUser.favBoards.length>0){\r\n            workspaces.forEach(workspace=>{ \r\n                setWorkspaceBoards(prevState =>[...prevState,...workspace.boards])\r\n                // setAllBoards(prevState =>[...prevState,...workspace.boards])\r\n                workspace.folders.map(folder=>\r\n                    setFolderBoards(prevState =>[...prevState,...folder.boards])\r\n                    // setAllBoards(prevState =>[...prevState,...folder.boards])\r\n                )}\r\n            )\r\n        }\r\n    }, [loggedInUser,favBoardsIds,workspaces])\r\n\r\n\r\n    // useEffect(() => {\r\n    //     setFavoriteBoards(allBoards.filter(board=>favBoardsIds.includes(board._id)))\r\n    // }, [allBoards,favBoardsIds])    \r\n    useEffect(() => {\r\n        setFavoriteWorkspaceBoards(workspaceBoards.filter(board=>favBoardsIds.includes(board._id)))\r\n    }, [workspaceBoards,favBoardsIds])       \r\n    useEffect(() => {\r\n        setFavoriteFolderBoards(folderBoards.filter(board=>favBoardsIds.includes(board._id)))\r\n    }, [folderBoards,favBoardsIds])    \r\n\r\n\r\n    return (\r\n        <div className=\"favorite-toolbar-menu\">\r\n            <div className=\"title-wrapper\">\r\n                <BsFillStarFill className='yellow-icon'/>\r\n                <div>Favorites</div>\r\n            </div>\r\n\r\n            {\r\n                favoriteWorkspaceBoards.length>0||favoriteFolderBoards.length>0?\r\n                <div>\r\n                    {\r\n                        favoriteWorkspaceBoards.length>0&&\r\n                        <BoardList \r\n                        boards={favoriteWorkspaceBoards}\r\n                        onGettingCurrentBoard={onGettingCurrentBoard}\r\n                        CgViewComfortable={CgViewComfortable}\r\n                        removeBoard={removeBoard}\r\n                        editBoard={editBoard}\r\n                        moveBoard={moveBoard}\r\n                        moveBoardToFolder={moveBoardToFolder}\r\n                        scroll={scroll}\r\n                        cmp='favorite'\r\n                        onEditBoard={onEditBoard}\r\n                    />\r\n                    }\r\n                     {\r\n                        favoriteFolderBoards.length>0&&\r\n                        <BoardList \r\n                        boards={favoriteFolderBoards}\r\n                        onGettingCurrentBoard={onGettingCurrentBoard}\r\n                        CgViewComfortable={CgViewComfortable}\r\n                        removeBoard={removeBoard}\r\n                        editBoard={editBoard}\r\n                        moveBoard={moveBoard}\r\n                        moveBoardToFolder={moveBoardToFolder}\r\n                        scroll={scroll}\r\n                        object='insideFolder'\r\n                        cmp='favorite'\r\n                        onEditBoard={onEditBoard}\r\n                    />\r\n                    }\r\n                </div>\r\n                :\r\n                <div className=\"no-favorite-msg\">\r\n                    <div>\r\n                        <BsFillStarFill className='star'/>\r\n                    </div>\r\n                    <div>\r\n                        No favorite boards yet\r\n                    </div>\r\n                    <div>\r\n                        'Star' any board so that you can easily access it later\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}","D:\\git-projects\\funday\\frontend\\src\\cmps\\PopupModal.jsx",[],"D:\\git-projects\\funday\\frontend\\src\\cmps\\Search.jsx",[],"D:\\git-projects\\funday\\frontend\\src\\cmps\\ToolbarOptionsModal.jsx",["413","414"],"import React, { useEffect,useState } from 'react';\r\nimport { IoIosArrowForward,IoIosAddCircleOutline } from 'react-icons/io'\r\nimport {VscPinned } from 'react-icons/vsc'\r\nimport {MdSortByAlpha } from 'react-icons/md'\r\nimport { WorkspaceList } from './WorkspaceList';\r\nimport { ForwardModal } from \"./ForwardModal\";\r\n\r\nexport function ToolbarOptionsModal({\r\n    setIsShown,\r\n    setIsOpenToolbarOptionsModal,\r\n    toggleShownForwardModal,\r\n    onSortWorkspces,\r\n    isSorted\r\n}){\r\n\r\n    const [search, setSearch] = useState(\"\");\r\n\r\n    return(\r\n    <div className=\"modal-default-style item-actions-modal toolbar-options-modal\">\r\n        <div className=\"modal-btn item-actions-btn\" onMouseDown={()=>{\r\n            setIsShown(true)\r\n            setIsOpenToolbarOptionsModal(false)\r\n            }}\r\n        >\r\n            <IoIosAddCircleOutline className=\"icon\"/>\r\n           <span>Add new workspace</span>\r\n        </div>\r\n        <ForwardModal  \r\n        btn={<div>\r\n                <VscPinned className=\"icon\"/>\r\n                <span>Pin workspaces</span>\r\n            </div>\r\n        }\r\n        toggleShownForwardModal={toggleShownForwardModal}\r\n        itemList={true}\r\n        setSearch={setSearch} \r\n        >\r\n            <div className=\"pin-workspace-title\">Choose Workspace to pin on menu</div>\r\n            <WorkspaceList \r\n            isCheckbox = {true}\r\n            search={search} \r\n            setSearch={setSearch} \r\n            />\r\n        </ForwardModal>\r\n        <div className=\"modal-btn item-actions-btn\"\r\n         onMouseDown={()=>{\r\n            onSortWorkspces()\r\n            setIsOpenToolbarOptionsModal(false)\r\n        }}\r\n        >\r\n            <MdSortByAlpha className=\"icon\"/>\r\n            <span>Sort by {`${isSorted?'default':'alphabetical'}`} order</span>\r\n        </div>\r\n    </div>\r\n    )\r\n}","D:\\git-projects\\funday\\frontend\\src\\cmps\\TablePreview.jsx",["415","416"],"import React, { useEffect,useState,useRef } from 'react';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Task } from \"./Task\";\r\nimport { TableColumnPreview } from \"./TableColumnPreview\";\r\nimport { TiArrowSortedDown } from 'react-icons/ti'\r\nimport { VscTrash } from 'react-icons/vsc'\r\nimport { FaPencilAlt } from 'react-icons/fa'\r\nimport {BsCircleFill,BsTrashFill } from 'react-icons/bs'\r\nimport { DragDropContext,Droppable ,Draggable   } from 'react-beautiful-dnd';\r\nimport { BiGridVertical } from 'react-icons/bi'\r\nimport { CgExpand } from 'react-icons/cg'\r\nimport { AiOutlineShrink } from 'react-icons/ai'\r\nimport { GoThreeBars } from 'react-icons/go'\r\nimport { IoTextSharp } from 'react-icons/io5'\r\nimport { BsPeopleCircle,BsBoxArrowDown } from 'react-icons/bs'\r\nimport { MdDateRange } from 'react-icons/md'\r\nimport { TiSortNumerically } from 'react-icons/ti'\r\nimport { FcTimeline } from 'react-icons/fc'\r\nimport { HiHashtag } from 'react-icons/hi'\r\nimport { MdUpdate } from 'react-icons/md'\r\nimport { IoMdCheckboxOutline } from 'react-icons/io'\r\nimport {colorsPicker} from '../data/colorPicker'\r\nimport { loadUsers } from '../store/actions/userActions'\r\nimport { getColumnWidth } from \"./task-cells-width.js\";\r\n\r\nexport function TablePreview({\r\n    taskKeys,\r\n    table,\r\n    IoMdNotifications,\r\n    HiPlusCircle,\r\n    onAddNewTask,\r\n    onEditTask,\r\n    onEditTable,\r\n    onEditBoard,\r\n    onRemoveTask,\r\n    removeTable,\r\n    openConversationModal,\r\n    isOpenConversationModal,\r\n    dragHandle,\r\n    isDragging,\r\n    isShrink,\r\n    onShrink,\r\n    search,\r\n    unCheckTasks,\r\n    provided,\r\n    updateBoard\r\n}){\r\n\r\n    const users = useSelector(state => state.user.users);\r\n    const loggedInUser = useSelector(state => state.user.loggedInUser);\r\n    const board = useSelector(state => state.workspace.currBoard);\r\n    const [newTaskName, setNewTaskName] = useState('');\r\n    const [isInputBtnVisable, setIsInputBtnVisable] = useState(false);\r\n    const [isShowTableOptionsModal, setIsShowTableOptionsModal] = useState(false);\r\n    const [isHover, setIsHover] = useState(false);\r\n    const [isOpenTableColorModal, setIsOpenTableColorModal] = useState(false);\r\n    const [tableCopy, setTableCopy] = useState(table);\r\n    const [isExpand, setExpandTable] = useState(true);\r\n    const [allOwners, setAllOwners] = useState([]);\r\n    const [allTablestatuses, setAllTablestatuses] = useState({});\r\n    const [statusTitles , setStatusTitles] = useState([]);\r\n    const [statusesSum , setStatusesSum] = useState([]);\r\n    const colorModal = useRef(null)\r\n    const [isShowAddColumnModal, setToggleAddColumnModal] = useState(false);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(loadUsers())\r\n    }, [dispatch])    \r\n    \r\n    \r\n    function mapOrder (array, order, key) {\r\n        array.sort( function (a, b) {\r\n          var A = a[key], B = b[key];\r\n          if (order.indexOf(A) > order.indexOf(B)) {\r\n            return 1;\r\n          } else {\r\n            return -1;\r\n          }\r\n        });\r\n        return array;\r\n    };\r\n\r\n    \r\n    useEffect(() => {\r\n        let idList = []\r\n        table.tasks.map(task=>\r\n            idList=[...idList,  ...task.owner]\r\n        )\r\n        const uniqIdList = [...new Set(idList)];\r\n        const usersArray = users.filter(user=>\r\n                    uniqIdList.includes(user._id)\r\n                )\r\n        const orderedArray = mapOrder(usersArray, uniqIdList, '_id');\r\n        setAllOwners(orderedArray)\r\n        // setAllOwners(\r\n        //     users.filter(user=>\r\n        //         uniqIdList.includes(user._id)\r\n        //     )\r\n        // )\r\n    }, [table,table.tasks,newTaskName,users]) \r\n\r\n\r\n     useEffect(() => {\r\n        let list = []\r\n        let statusesNameInUse = []\r\n        table.tasks.map((task,idx)=>\r\n            {list= [...list,task.status]\r\n            statusesNameInUse = [...statusesNameInUse,task.status.name]}\r\n        )   \r\n        const sortedList = list.sort((a, b) => a.name.localeCompare(b.name)) \r\n        setStatusesSum( list.length)\r\n        //string of the exisiting used status names in the table\r\n        //sorted\r\n        const sortedStatusesNameInUse = statusesNameInUse.sort((a, b) => a.localeCompare(b)) \r\n        const uniq = [...new Set(sortedStatusesNameInUse)];\r\n       setStatusTitles(uniq)\r\n        //[\"\", \"Done\", \"To do\"]\r\n        let tablestatuses = {}\r\n        uniq.map(title=>\r\n            tablestatuses[`${title}`]={\r\n                num:sortedList.filter(status=>status.name===title).length,\r\n                color:sortedList.filter(status=>status.name===title)[0].color\r\n            }\r\n        )\r\n        setAllTablestatuses(tablestatuses)\r\n        // setAllTablestatuses([...sortedList])\r\n    }, [table,table.tasks])    \r\n\r\n     useEffect(() => {\r\n        setTableCopy(table)\r\n    }, [table])    \r\n    \r\n    useEffect(() => {\r\n        setExpandTable(!isShrink)\r\n    }, [isShrink])    \r\n    \r\n    useEffect(() => {\r\n        onShrink(isDragging)\r\n    }, [isDragging,onShrink]) \r\n\r\n    const toggleExpandeTable=(value)=>{\r\n        setExpandTable(value)\r\n    }\r\n\r\n    const handleChange=(ev)=>{\r\n        setNewTaskName(ev.target.value)\r\n    }\r\n    const onShowBtn=(ev)=>{\r\n        setIsInputBtnVisable(true)\r\n    }   \r\n    const onHideBtn=()=>{\r\n        setIsInputBtnVisable(false)\r\n        cleanInput()\r\n    }\r\n    const cleanInput=()=>{\r\n        setNewTaskName('')\r\n    }\r\n    \r\n    const addNewTaskKeyUp=(ev,currTable,newTaskName)=>{\r\n        if (ev.keyCode === 13) {\r\n            ev.preventDefault();\r\n            const desc = `added new task \"${newTaskName}\" to group \"${currTable.name}\"`\r\n            onAddNewTask(currTable,newTaskName,desc)\r\n            setNewTaskName('')\r\n        }\r\n    }\r\n\r\n    const onRemoveTable=(tableId,boardName)=>{\r\n        removeTable(tableId,boardName)\r\n        setIsShowTableOptionsModal(false)\r\n    }   \r\n    \r\n    const toggleHover=()=>{\r\n        setIsHover(curr=>!curr)\r\n    }     \r\n    const updateTableColor=(color)=>{\r\n        const updatedTable = {\r\n            ...table,\r\n            color\r\n        }\r\n        if (table.color === color) return\r\n        const desc = `changed the group color from \"${table.color}\" to \"${color}\"`\r\n        onEditTable(updatedTable,desc)\r\n        setIsOpenTableColorModal(false)\r\n    } \r\n    const onOpenTableColorModal=()=>{\r\n        setIsOpenTableColorModal(true)\r\n        setIsShowTableOptionsModal(false)\r\n    }\r\n    useEffect(() => {\r\n        if (isOpenTableColorModal) {\r\n            colorModal.current.focus();\r\n          }\r\n    }, [isOpenTableColorModal])\r\n    \r\n    const closeTableColorModal=()=>{\r\n        setIsOpenTableColorModal(false)\r\n    }\r\n    const handleDragEnd=({destination, source})=>{\r\n        if(!destination){\r\n            // \"not dropped in droppable\"\r\n            return\r\n        }\r\n        if(destination.index===source.index&&destination.draggableId===source.draggableId){\r\n            //\"dropped in same place\"\r\n            return\r\n        }\r\n        const itemCopy = {...table.tasks[source.index]}\r\n        setTableCopy(prev=>{\r\n            prev = {...prev}\r\n            prev.tasks.splice(source.index,1);\r\n            prev.tasks.splice(destination.index, 0, itemCopy);\r\n            return prev\r\n        })\r\n        const desc = `changed the tasks order inside \"${tableCopy.name}\" group`\r\n        onEditTable(tableCopy,desc)\r\n    }\r\n\r\n    function EditBoard(newColumn,desc) {\r\n        const updatedBoard = {\r\n            ...board,\r\n            tableColumns: [...board.tableColumns,newColumn],\r\n            activities:[\r\n                {\r\n                    desc: desc,\r\n                    userId: loggedInUser._id,\r\n                    createdAt: Date.now()\r\n                },\r\n                ...board.activities]\r\n        }\r\n        onEditBoard(updatedBoard)\r\n    }\r\n\r\n    function addColumn(type){\r\n        let newColumn = {}\r\n        let desc=''\r\n        switch (type) {\r\n            case 'People':\r\n                newColumn = {\r\n                    _id:Date.now(),\r\n                    title:'People',\r\n                    type:'People',\r\n                    taskKey:'owner'\r\n                }\r\n                desc = `added new people column`\r\n                EditBoard(newColumn,desc)\r\n                break;\r\n            case 'Status':\r\n                newColumn = {\r\n                    _id:Date.now(),\r\n                    title:'Status',\r\n                    type:'Status',\r\n                    taskKey:'status'\r\n                }\r\n                desc = `added new status column`\r\n                EditBoard(newColumn,desc)\r\n                break;\r\n            case 'Date':\r\n                newColumn = {\r\n                    _id:Date.now(),\r\n                    title:'Date',\r\n                    type:'Date',\r\n                    taskKey:'createdAt'\r\n                }\r\n                desc = `added new date column`\r\n                EditBoard(newColumn,desc)\r\n                break;\r\n            case 'Text':\r\n                newColumn = {\r\n                    _id:Date.now(),\r\n                    title:'Text',\r\n                    type:'Text',\r\n                    taskKey:'text'\r\n                }\r\n                desc = `added new text column`\r\n                EditBoard(newColumn,desc)\r\n                break;\r\n            case 'Numbers':\r\n                newColumn = {\r\n                    _id:Date.now(),\r\n                    title:'Numbers',\r\n                    type:'Numbers',\r\n                    taskKey:'numbers'\r\n                }\r\n                desc = `added new numbers column`\r\n                EditBoard(newColumn,desc)\r\n                break;\r\n            case 'CheckBox':\r\n                newColumn = {\r\n                    _id:Date.now(),\r\n                    title:'Check Box',\r\n                    type:'CheckBox',\r\n                    taskKey:'checkBox'\r\n                }\r\n                desc = `added new checkBox column`\r\n                EditBoard(newColumn,desc)\r\n                break;\r\n            case 'LastUpdated':\r\n                newColumn = {\r\n                    _id:Date.now(),\r\n                    title:'Last Updated',\r\n                    type:'LastUpdated',\r\n                    taskKey:'lastUpdated'\r\n                }\r\n                desc = `added new lastUpdated column`\r\n                EditBoard(newColumn,desc)\r\n                break;\r\n            case 'Timeline':\r\n                newColumn = {\r\n                    _id:Date.now(),\r\n                    title:'Timeline',\r\n                    type:'Timeline',\r\n                    taskKey:'timeline'\r\n                }\r\n                desc = `added new timeline column`\r\n                EditBoard(newColumn,desc)\r\n                break;\r\n            case 'Dropdown':\r\n                newColumn = {\r\n                    _id:Date.now(),\r\n                    title:'Dropdown',\r\n                    type:'Dropdown',\r\n                    taskKey:'dropdown'\r\n                }\r\n                desc = `added new dropdown column`\r\n                EditBoard(newColumn,desc)\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        setToggleAddColumnModal(false)\r\n    }\r\n\r\n    const getSumColumnContent=(columnName)=>{\r\n        let content = [];\r\n        switch (columnName) {\r\n            case 'status':\r\n                content.push(\r\n                    <div className='table-cell sum-cell sum-cell-content-wrapper'>\r\n                        <div className=\"sum-status-wrapper\">\r\n                            {statusTitles.map((title,idx)=>\r\n                             <span \r\n                             key={idx} \r\n                             style={{backgroundColor:`${allTablestatuses[`${title}`].color}`, width:`${allTablestatuses[`${title}`].num/statusesSum*100}%`}}>\r\n                                 <span className=\"label-text arrow-down status-label\">\r\n                                     <span>{title===''?'Empty':title}</span>\r\n                                     <span>{allTablestatuses[`${title}`].num}/{statusesSum}</span>\r\n                                     <span>{Math.round(allTablestatuses[`${title}`].num/statusesSum*100)}%</span>\r\n                                 </span>\r\n                             </span>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                ) \r\n                break;     \r\n            case 'owner':\r\n                content.push(\r\n                    <div className='table-cell sum-cell sum-cell-content-wrapper'>\r\n                        {allOwners.length>0&&\r\n                        <div className=\"owner-container\">\r\n                            <div className=\"owner-avatar-wrapper\">\r\n                                <img src={`${allOwners[0].avatar}`} alt=\"\"/>\r\n                            </div>\r\n                            {\r\n                                allOwners.length>1?\r\n                                <div className=\"owners-count\">\r\n                                    +{allOwners.length-1}\r\n                                </div>:\r\n                                null\r\n                            }\r\n                            <span className=\"label-text arrow-down\" style={{ top:  `-${40+((allOwners.length-1)*13)}px`}}>\r\n                                <div className=\"label-text-content\">\r\n                                    {\r\n                                        allOwners.map(owner=>\r\n                                            <div style={{height:'13px'}}>{owner.username}</div>\r\n                                        )\r\n                                    }\r\n                                </div>\r\n                            </span>\r\n                        </div>\r\n                        }\r\n                    </div>\r\n                ) \r\n                break;\r\n            default:\r\n                content.push(\r\n                    <div className={`table-cell sum-cell ${getColumnWidth(columnName)}`}></div>\r\n                ) \r\n                break;\r\n        }\r\n        return content;\r\n    }\r\n\r\n    const columnBtnsContent = [\r\n        {\r\n            icon:<GoThreeBars className=\"icon\"/>,\r\n            name:'Status'\r\n        },{\r\n            icon:<BsBoxArrowDown className=\"icon\"/>,\r\n            name:'Dropdown'\r\n        }, {\r\n            icon:<IoTextSharp className=\"icon\"/>,\r\n            name:'Text'\r\n        }, {\r\n            icon:<MdDateRange className=\"icon\"/>,\r\n            name:'Date'\r\n        }, {\r\n            icon:<BsPeopleCircle className=\"icon\"/>,\r\n            name:'People'\r\n        }, {\r\n            icon:<TiSortNumerically className=\"icon\"/>,\r\n            name:'Numbers'\r\n        },{\r\n            icon:<FcTimeline className=\"icon\"/>,\r\n            name:'Timeline'\r\n        },{\r\n            icon:<MdUpdate className=\"icon\"/>,\r\n            name:'LastUpdated'\r\n        },{\r\n            icon:<IoMdCheckboxOutline className=\"icon\"/>,\r\n            name:'CheckBox'\r\n        },{\r\n            icon:<HiHashtag className=\"icon\"/>,\r\n            name:'Tags'\r\n        },\r\n    ]\r\n\r\n    const getColumnInUseStyle=(btnName)=>{\r\n        let columnsInUse = []\r\n        board.tableColumns.forEach(column=>\r\n            {for(const property in column) {\r\n                if (property === 'type')\r\n                columnsInUse.push(`${column[property]}`)\r\n            }}\r\n        )\r\n        const uniq = [ ...new Set(columnsInUse) ];\r\n        if(uniq.includes(btnName)){\r\n            return 'column-in-use'\r\n        }\r\n            \r\n    }\r\n\r\n    const getColumnBtnContent =(btnIcon,btnName)=>{\r\n        let content  = [ <div onClick={()=>addColumn(`${btnName}`)} \r\n                            className={getColumnInUseStyle(btnName)} >\r\n                            {btnIcon}\r\n                            <span>{`${\r\n                                btnName==='LastUpdated'?\r\n                                'Last Updated':\r\n                                btnName==='CheckBox'?\r\n                                'Check Box':\r\n                                btnName\r\n                            }`}</span>\r\n                        </div>]\r\n        return content\r\n    }\r\n\r\n\r\n    if (!table||!board) return <div>Loading....</div>\r\n    return (\r\n        <DragDropContext onDragEnd={handleDragEnd}>\r\n                   { isExpand?<div className=\"table\" key={table._id}>\r\n                    <div \r\n                        className=\"title-row-wrapper\" \r\n                    >\r\n                        <div\r\n                            className=\"options-wrapper\"  \r\n                            tabIndex=\"0\" \r\n                            onBlur={()=>setIsShowTableOptionsModal(false)} \r\n                        >\r\n                            <div className=\"title-options-btn\" onMouseEnter={toggleHover} onMouseLeave={toggleHover}>\r\n                                <div className={`TiArrowSortedDown-wrapper TiArrowSortedDown-title-wrapper ${isShowTableOptionsModal?'active':''}`} \r\n                                style={isHover?{backgroundColor:`white`,borderColor:`${table.color}`}:{backgroundColor:`${table.color}`}}\r\n                                onClick={()=>setIsShowTableOptionsModal(curr=>!curr)}>\r\n                                    <TiArrowSortedDown className={`TiArrowSortedDown-title ${isShowTableOptionsModal?'active':''}`} style={isHover?{color:`${table.color}`}:{color:`white`}}/>\r\n                                </div>\r\n                            </div>\r\n                            {  \r\n                            isShowTableOptionsModal&&\r\n                                <div className=\"options-modal title-options-modal\">\r\n        \r\n                                    <div  className='modal-btn item-actions-btn'\r\n                                    >\r\n                                        <FaPencilAlt className=\"icon\"/>\r\n                                        <span>Rename Group-erorr</span>\r\n                                    </div>\r\n        \r\n                                    <div  className='modal-btn item-actions-btn'\r\n                                    onClick={onOpenTableColorModal}\r\n                                    >\r\n                                        <BsCircleFill \r\n                                        className=\"icon\"\r\n                                        style={{color:table.color}}\r\n                                        />\r\n                                        <span>Change Group Color</span>\r\n                                    </div>\r\n        \r\n                                    <div className='delete-btn-wrapper'>\r\n                                        <div className='modal-btn item-actions-btn' onClick={()=>{onRemoveTable(table._id,table.name)}}>\r\n                                            <BsTrashFill className=\"icon\"/>\r\n                                            <span>Delete</span>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                        {isOpenTableColorModal&&<div className=\"table-color-modal\" ref={colorModal} tabIndex='0' onBlur={()=>setIsOpenTableColorModal(false)}>\r\n                            <div className=\"first-section\">\r\n                                    <BsCircleFill \r\n                                        className=\"group-color\"\r\n                                        style={{color:table.color}}\r\n                                    />\r\n                            </div>\r\n                            <div  className=\"second-section\">\r\n                                {colorsPicker.map(color=>\r\n                                    <div className=\"color\" style={{backgroundColor:`${color}`}} onClick={()=>updateTableColor(color)}></div>\r\n                                )}\r\n                            </div>\r\n                        </div>}\r\n                        <div className=\"table-row title-row\">\r\n                            {\r\n                                board.tableColumns.map(tableColumn=>\r\n                                    <TableColumnPreview \r\n                                        board={board} \r\n                                        tableColumn={tableColumn} \r\n                                        table={table} \r\n                                        IoMdNotifications={IoMdNotifications} \r\n                                        onEditTable={onEditTable} \r\n                                        onEditBoard={onEditBoard}\r\n                                        isOpenTableColorModal={isOpenTableColorModal}\r\n                                        closeTableColorModal={closeTableColorModal}\r\n                                        toggleExpandeTable={toggleExpandeTable}\r\n                                        isExpand={isExpand}\r\n                                        dragHandle={dragHandle}\r\n                                        onEditTask={onEditTask} \r\n                                    />\r\n                                ) \r\n                            }\r\n                                    <div className=\"table-cell title-cell\"\r\n                                     tabIndex=\"0\"\r\n                                     onBlur={()=>{\r\n                                         setToggleAddColumnModal(false)\r\n                                     }}\r\n                                    >\r\n                                        <HiPlusCircle \r\n                                        className=\"add-column-btn\"\r\n                                        onClick={()=>{\r\n                                            setToggleAddColumnModal(curr=>!curr)\r\n                                        }}\r\n                                        />\r\n                                        {isShowAddColumnModal&&<div className='modal-default-style new-column-modal'\r\n                                        >\r\n                                           <div className=\"title\">Essentials</div>\r\n                                           <div className='column-types-container'>\r\n                                               {\r\n                                                    columnBtnsContent.slice(0,6).map(content=>\r\n                                                        getColumnBtnContent(content.icon,content.name)\r\n                                                    )\r\n                                               }\r\n                                            </div>\r\n\r\n                                            <div className=\"title\">Super Useful</div>\r\n\r\n                                            <div className='column-types-container'>\r\n                                                {\r\n                                                    columnBtnsContent.slice(6).map(content=>\r\n                                                        getColumnBtnContent(content.icon,content.name)\r\n                                                    )\r\n                                                }\r\n                                            </div>\r\n                                        </div>}\r\n                                    </div>\r\n                        </div> \r\n                    </div>\r\n                    {\r\n                        table.tasks.map((task,index)=>\r\n                        task.name.toLowerCase().includes(search.toLowerCase())?\r\n                        <>\r\n                        <Droppable droppableId={`droppable-${index}`} >\r\n                        {(provided,snapshot) => (\r\n                            <div className={`task-droppable-container ${snapshot.isDraggingOver?'droppable':''}`}\r\n                            {...provided.droppableProps} ref={provided.innerRef}\r\n                            >\r\n                                <Draggable key={task._id} draggableId={task._id} index={index}>\r\n                                    {(provided, snapshot) => (\r\n                                        <Task \r\n                                        isDragging={snapshot.isDragging}\r\n                                        isDraggingOver={snapshot.isDraggingOver}\r\n                                        provided={provided}\r\n                                        task={task} \r\n                                        taskKeys={taskKeys} \r\n                                        table={table} \r\n                                        onEditTask={onEditTask} \r\n                                        onRemoveTask={onRemoveTask}\r\n                                        onEditTable={onEditTable} \r\n                                        board={board}\r\n                                        onEditBoard={onEditBoard}\r\n                                        openConversationModal={openConversationModal}\r\n                                        isOpenConversationModal={isOpenConversationModal}\r\n                                        unCheckTasks={unCheckTasks}\r\n                                        updateBoard={updateBoard}\r\n                                        />\r\n                                    )}\r\n                                </Draggable>\r\n                                {provided.placeholder}\r\n                            </div>\r\n                        )}\r\n                        </Droppable>\r\n                        </>\r\n                        :\r\n                        null\r\n                        )\r\n                    } \r\n                    <div className=\"table-row add-row\">\r\n                                <div className='table-cell add-cell'>\r\n                                    <div className='decoration-line' style={{backgroundColor:`${table.color}`}}></div>\r\n                                    <input \r\n                                        type=\"text\" \r\n                                        placeholder=\"+ Add\" \r\n                                        className={`add-new-task-input ${table.tasks.length>0?'':'new-table-input'}`}\r\n                                        onChange={(ev)=>handleChange(ev)}\r\n                                        value={newTaskName} \r\n                                        onKeyUp={(ev)=>{\r\n                                            addNewTaskKeyUp(ev,table,newTaskName)\r\n                                        }}\r\n                                        onFocus={(ev)=>onShowBtn(ev)}\r\n                                        onBlur={(ev)=>onHideBtn(ev)}\r\n                                    />\r\n                                     {isInputBtnVisable&&<div \r\n                                    className={`add-new-task-btn ${newTaskName.split(' ').join('').length>0?'active':''}`}\r\n\r\n                                    onMouseDown ={()=>{\r\n                                        const desc = `added new task \"${newTaskName}\" to group \"${table.name}\"`\r\n                                        onAddNewTask(table,newTaskName,desc)\r\n                                    }}\r\n                                >Add</div>}\r\n                                </div>\r\n                                <div className='table-cell add-cell'></div>\r\n                    </div> \r\n                    <div className=\"table-row sum-row\">\r\n                        {\r\n                            taskKeys.map((taskKey)=>\r\n                                getSumColumnContent(taskKey)\r\n                            )\r\n                        }\r\n                        <div className='table-cell sum-cell'></div>\r\n                    </div> \r\n                </div>:\r\n                <div className={`table ${!isExpand?'shrink':''}`} key={table._id}>\r\n                    <div className=\"title-row-wrapper\" >\r\n                        <div className=\"table-cell title-cell\" style={{color:`${table.color}` }} >\r\n                        <div \r\n                    className={`${isOpenTableColorModal?'':'table-name-wrapper'}`}\r\n                    tabIndex='0' \r\n                    onBlur={()=>\r\n                        {\r\n                        closeTableColorModal()\r\n                        }   \r\n                    }  \r\n                    >\r\n\r\n                        <div className=\"table-actions\">\r\n                            {!isExpand?<CgExpand className=\"expand-btn\" onClick={()=>toggleExpandeTable(true)}/>:\r\n                            <AiOutlineShrink className=\"shrink-btn\" onClick={()=>toggleExpandeTable(false)}/> }\r\n                            <div  className=\"drag-btn\"  {...dragHandle.dragHandleProps}>\r\n                            <BiGridVertical/>\r\n                            </div>\r\n                        </div>\r\n                        <span>{table.name}</span>\r\n                    </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                }\r\n        </DragDropContext>\r\n    )\r\n}\r\n\r\n","D:\\git-projects\\funday\\frontend\\src\\cmps\\CreateWorkspace.jsx",["417"],"import React, { useState,useRef,useEffect } from 'react';\r\nimport { FaPencilAlt } from 'react-icons/fa'\r\nimport { SiPandora } from 'react-icons/si';\r\nimport { BiCheck } from 'react-icons/bi';\r\nimport {colorsPicker } from '../data/shortColorPicker.js';\r\nimport {iconsPicker } from '../data/iconsPicker';\r\nimport { DynamicFaIcon } from \"../data/dynamicFaIcon\";\r\n\r\nexport function CreateWorkspace({setIsShown,addNewWorkspace}) {\r\n\r\n    const[newWorkspaceName,setNewWorkspaceName]=useState('New Workspace')\r\n    const[newWorkspaceColor,setNewWorkspaceColor]=useState('#f368e0')\r\n    const[newWorkspaceIcon,setNewWorkspaceIcon]=useState('M')\r\n    const[isOpenModal,setIsOpenModal]=useState(false)\r\n\r\n    const inputEl = useRef()\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            inputEl.current.focus()\r\n        }, 0); \r\n    }, [])\r\n    const focusText = () => {\r\n        setTimeout(() => {\r\n            document.execCommand('selectAll', false, null)\r\n        }, 0)\r\n    }\r\n    const handleChangeName =(ev)=>{\r\n        setNewWorkspaceName(ev.target.value)\r\n    }\r\n\r\n    return (\r\n    <div className=\"create-workspace create-item-wrapper\"\r\n     >\r\n        <div className=\"create-item-title\">Create Workspace</div>\r\n        <div\r\n            className=\"workspace-icon\"  \r\n            style={{backgroundColor:`${newWorkspaceColor}`}}\r\n            onClick={()=>{setIsOpenModal(true)}}\r\n            tabIndex=\"0\"\r\n            onBlur={()=>{setIsOpenModal(false)}}\r\n            >\r\n           <DynamicFaIcon name={newWorkspaceIcon} />\r\n           {!isOpenModal&&<div className=\"workspace-icon-edit\" >\r\n               <div><FaPencilAlt className=\"workspace-edit-pencil\"/></div>\r\n               <div>Edit</div>\r\n           </div>}\r\n           {isOpenModal&&<div className=\" modal-default-style workspace-icon-modal\">\r\n                <div className=\"small-font\">Background color</div>\r\n                <div className=\"workspace-color-picker\">\r\n                    {colorsPicker.map(color=>\r\n                        <div className=\"workspace-color\" style={{backgroundColor:`${color}`}}\r\n                         onClick={()=>setNewWorkspaceColor(color)}\r\n                         >\r\n                             {newWorkspaceColor===color&&<BiCheck/>}\r\n                         </div>\r\n                    )}\r\n                </div>\r\n                <div className=\"small-font\">Icon</div>\r\n                <div className=\"icon-picker\">\r\n                    {iconsPicker.map(iconStr=>\r\n                        <div className=\"icon\"\r\n                        style={{backgroundColor:`${newWorkspaceColor}`}}\r\n                         onClick={()=>setNewWorkspaceIcon(iconStr)}\r\n                         >\r\n                           <DynamicFaIcon name={iconStr} />\r\n                         </div>\r\n                    )}\r\n                </div>\r\n           </div>}\r\n        </div>\r\n        <div className=\"workspace-name small-font\">Workspace name</div>\r\n        <input \r\n            className=\"new-item-input\"\r\n            type=\"text\" \r\n            value={newWorkspaceName} \r\n            onChange={handleChangeName}\r\n            onFocus={focusText}\r\n            ref={inputEl}\r\n            onKeyDown={(ev) => {\r\n                if (ev.key === 'Enter') {\r\n                    if(newWorkspaceName.length<1)return\r\n                    addNewWorkspace(newWorkspaceName,newWorkspaceColor,newWorkspaceIcon)\r\n                    setIsShown(false)\r\n                }\r\n            }}\r\n        />\r\n        <div className=\"btns-container\">\r\n            <div className=\"cancel-btn\" onClick={ ()=>{setIsShown(false)} }>Cancel</div>\r\n            <div className='add-btn' onClick={()=>{\r\n            if(newWorkspaceName.length<1)return\r\n            addNewWorkspace(newWorkspaceName,newWorkspaceColor,newWorkspaceIcon)\r\n            setIsShown(false)\r\n            }}>Create Workspace</div>\r\n        </div>\r\n    </div>\r\n    )\r\n}","D:\\git-projects\\funday\\frontend\\src\\cmps\\TextareaEditor.jsx",[],"D:\\git-projects\\funday\\frontend\\src\\cmps\\WorkspaceIconPicker.jsx",[],"D:\\git-projects\\funday\\frontend\\src\\data\\shortColorPicker.js",[],"D:\\git-projects\\funday\\frontend\\src\\data\\iconsPicker.js",[],"D:\\git-projects\\funday\\frontend\\src\\data\\colorPicker.js",[],"D:\\git-projects\\funday\\frontend\\src\\cmps\\FolderPreview.jsx",["418","419","420"],"import React, { useState,useRef,useEffect } from 'react';\r\nimport { IoMdArrowDropright } from 'react-icons/io'\r\nimport {IoArrowForwardCircleOutline } from 'react-icons/io5'\r\nimport { BsThreeDots, BsPencil } from 'react-icons/bs'\r\nimport { VscTrash } from 'react-icons/vsc'\r\nimport { IoIosArrowForward } from 'react-icons/io'\r\nimport { BoardList } from \"./BoardList\";\r\nimport { WorkspaceList } from './WorkspaceList';\r\nimport { CreateBoard } from \"./CreateBoard\";\r\nimport { PopupModal } from \"./PopupModal\";\r\nimport { ForwardModal } from \"./ForwardModal\";\r\n\r\nexport function FolderPreview({\r\n    folder,\r\n    IoMdArrowDropdown,\r\n    CgViewComfortable,\r\n    onGettingCurrentBoard,\r\n    addBoardInFolder,\r\n    removeFolder,\r\n    updateFolder,\r\n    removeBoard,\r\n    editBoard,\r\n    moveFolder,\r\n    moveBoard,\r\n    moveBoardToFolder,\r\n    scroll,\r\n    index,\r\n    isNewFolderCreated,\r\n    onEndNewFolderUpdating,\r\n    folders,\r\n    onEditBoard\r\n}) {\r\n    const [isFolderOpen, setIsFolderOpen] = useState(false);\r\n    const [isOpenModal, setIsOpenModal] = useState(false);\r\n    const [isOpenMoveToModal, setIsOpenMoveToModal] = useState(false);\r\n    const [isUpdateName, setIsUpdateName] = useState(false);\r\n    const [folderName, setFolderName] = useState(folder.name);\r\n    const [isShown, setIsShown] = useState(false)\r\n    const inputEl = useRef()\r\n\r\n    const [dimensions, setDimensions] = useState(null);\r\n    const folderRef = useRef(null)\r\n\r\n    const [isShownMoveToWorkspaceModal, setIsShownMoveToWorkspaceModal] = useState(false)\r\n\r\n    const [search, setSearch] = useState(\"\");\r\n    \r\n    const set = () =>\r\n    setDimensions(folderRef && folderRef.current ? \r\n        folderRef.current.getBoundingClientRect().bottom>500?\r\n            {...folderRef.current.getBoundingClientRect(),bottom:folderRef.current.getBoundingClientRect().bottom-191}\r\n            : folderRef.current.getBoundingClientRect()\r\n        : {}\r\n    );\r\n\r\n    useEffect(() => {\r\n        if(index===folders.length-1&&isNewFolderCreated){\r\n            setIsUpdateName(true) \r\n            setTimeout(() => {\r\n                inputEl.current.focus()\r\n            }, 0);\r\n        }\r\n    }, [index,folders.length,isNewFolderCreated]) \r\n\r\n\r\n    useEffect(() => {\r\n        set();\r\n    }, [scroll]) \r\n\r\n    useEffect(() => {\r\n        setFolderName(folder.name)\r\n    }, [folder])\r\n    const onToggleFolder=()=>{\r\n        setIsFolderOpen(current => !current)\r\n    } \r\n    function toggleModal(ev){\r\n        ev.stopPropagation();\r\n        setIsOpenModal(curr=>!curr)\r\n    }\r\n\r\n\r\n    function handleChangeName(ev) {\r\n        setFolderName(ev.target.value)\r\n    }\r\n    function updateFolderName() {\r\n        const newFolder = {\r\n            ...folder,\r\n            name:folderName\r\n        }\r\n        updateFolder(newFolder)\r\n    }\r\n    // function onMoveFolder(currWorkspace,workspace) {\r\n    //     moveFolder(currWorkspace,workspace,folder)\r\n    //     setIsOpenModal(false)\r\n    // }\r\n    function onMoveFolder(workspace) {\r\n        moveFolder(workspace,folder)\r\n        setIsOpenModal(false)\r\n    }\r\n\r\n    function addNewBoard(boardName) {\r\n        addBoardInFolder(folder,boardName)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(!isShownMoveToWorkspaceModal){\r\n            setTimeout(() => {\r\n               if(folderRef&&folderRef.current){\r\n                folderRef.current.focus()\r\n               }\r\n            }, 0);\r\n        }\r\n    }, [isShownMoveToWorkspaceModal])\r\n    \r\n    const toggleShownForwardModal=(val)=>{\r\n        setIsShownMoveToWorkspaceModal(val)\r\n    }\r\n    \r\n\r\n    if (!folder) return <div>Loading...</div>\r\n    return (\r\n        <>\r\n        <div key={folder._id}>\r\n            <div \r\n                className={`\r\n                folder-wrapper \r\n                ${isOpenModal?'open-modal':''} \r\n                ${isUpdateName?'updating-style':''}`}\r\n                tabIndex={!isNewFolderCreated ? 0 : null}\r\n                onBlur={()=>{\r\n                    setIsOpenModal(isShownMoveToWorkspaceModal)\r\n                }}\r\n                ref={folderRef}\r\n            >\r\n               <div \r\n                onClick={onToggleFolder}\r\n                className=\"name-wrapper\"\r\n                >\r\n                    {isFolderOpen?\r\n                        <IoMdArrowDropdown className={`icon ${isUpdateName?'updating-style':''}`} />:\r\n                        <IoMdArrowDropright className={`icon ${isUpdateName?'updating-style':''}`}  />\r\n                    }\r\n                    {isUpdateName?\r\n                        <input \r\n                        className=\"update-folder-name-input\" \r\n                        type=\"text\" \r\n                        value={folderName}\r\n                        onChange={handleChangeName}\r\n                        ref={inputEl}\r\n                        onBlur={()=>{\r\n                            setIsUpdateName(false)\r\n                            updateFolderName()\r\n                            onEndNewFolderUpdating()\r\n                        }}\r\n                        onKeyDown={(ev) => {\r\n                            if (ev.key === 'Enter') {\r\n                                ev.target.blur()\r\n                            }\r\n                        }}\r\n                        />\r\n                        :\r\n                        <span  \r\n                        title={folderName.length>14?folderName:''} \r\n                        className={`${folderName.length>14?'ellipsis-folder-name':''}`}\r\n                        >{folderName}</span>\r\n                    }\r\n               </div>\r\n               <BsThreeDots className={`BsThreeDots ${isUpdateName?'hide':''}`}  onClick={(ev)=>{\r\n                   if(folderRef.current.getBoundingClientRect().bottom>500){\r\n                        setDimensions({...folderRef.current.getBoundingClientRect(),bottom:folderRef.current.getBoundingClientRect().bottom-191});\r\n                    }else{\r\n                        setDimensions(folderRef.current.getBoundingClientRect());\r\n                    }\r\n                   toggleModal(ev)\r\n                   }}/>\r\n               {\r\n               isOpenModal&&\r\n               <div className='modal-default-style item-actions-modal folder-modal-wrapper '\r\n               style={{top: `${dimensions?dimensions.bottom-181:0}px`}}\r\n               >\r\n                    <div className='modal-btn item-actions-btn' onClick={()=>{\r\n                        // addBoardInFolder(folder)\r\n                        setIsShown(true)\r\n                        setIsOpenModal(false)\r\n                    }}>\r\n                        <CgViewComfortable className=\"icon\" />\r\n                        <span>Create board in folder</span>\r\n                    </div>\r\n                    <div  className='modal-btn item-actions-btn' onClick={()=>{\r\n                        setIsOpenModal(false)\r\n                        setIsUpdateName(true)\r\n                        setTimeout(() => {\r\n                            inputEl.current.focus()\r\n                        }, 0); \r\n                    }}>\r\n                        <BsPencil className=\"icon\"/>\r\n                        <span>Rename folder</span>\r\n                    </div>\r\n                    <ForwardModal \r\n                    btn={<div>\r\n                            <IoArrowForwardCircleOutline className=\"icon\"/>\r\n                            <span>Move To Workspace</span>\r\n                        </div>\r\n                    }\r\n                    toggleShownForwardModal={toggleShownForwardModal}\r\n                    itemList={true}\r\n                    setSearch={setSearch} \r\n                    >\r\n                        <WorkspaceList \r\n                        onMoveObject={onMoveFolder}\r\n                        search={search} \r\n                        setSearch={setSearch} \r\n                        />\r\n                    </ForwardModal>\r\n                    <div className='delete-btn-wrapper'>\r\n                        <div className='modal-btn item-actions-btn' onClick={()=>{\r\n                            removeFolder(folder._id)\r\n                            setIsOpenModal(false)\r\n                        }}>\r\n                            <VscTrash className=\"icon\"/>\r\n                            <span>Delete folder</span>\r\n                        </div>\r\n                    </div>\r\n                </div>}\r\n            </div>\r\n            {isFolderOpen&&\r\n             <div className='folder-dropdown' key={folder._id}>\r\n             {folder.boards.length>0&&\r\n                <BoardList \r\n                     boards={folder.boards}\r\n                     onGettingCurrentBoard={onGettingCurrentBoard}\r\n                     CgViewComfortable={CgViewComfortable}\r\n                     removeBoard={removeBoard}\r\n                     editBoard={editBoard}\r\n                     moveBoard={moveBoard}\r\n                     moveBoardToFolder={moveBoardToFolder}\r\n                     object='insideFolder'\r\n                     scroll={scroll}\r\n                     onEditBoard={onEditBoard}\r\n\r\n                />\r\n             }\r\n             </div>\r\n            }\r\n        </div >\r\n\r\n        \r\n        {isShown&&<PopupModal setIsShown={setIsShown} >\r\n            <CreateBoard addNewBoard={addNewBoard} setIsShown={setIsShown}/>\r\n        </PopupModal>}\r\n        </>\r\n    );\r\n}\r\n","D:\\git-projects\\funday\\frontend\\src\\cmps\\BoardPreview.jsx",["421"],"import React, {useState,useRef,useEffect } from 'react';\r\nimport { BsThreeDots, BsPencil } from 'react-icons/bs'\r\nimport {IoArrowForwardCircleOutline } from 'react-icons/io5'\r\nimport { AiOutlineStar } from 'react-icons/ai'\r\nimport { VscTrash } from 'react-icons/vsc'\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { updateCurrBoard} from '../store/actions/workspaceActions'\r\nimport { WorkspaceList } from './WorkspaceList';\r\nimport { AvailableFoldersList } from './AvailableFoldersList';\r\nimport { toggleFavUserBoardList } from '../store/actions/userActions'\r\nimport { ForwardModal } from \"./ForwardModal\";\r\nimport { updateBoardWorkspace} from '../store/actions/workspaceActions'\r\n\r\nexport function BoardPreview({\r\n    board,\r\n    onGettingCurrentBoard,\r\n    CgViewComfortable,\r\n    removeBoard,\r\n    editBoard,\r\n    moveBoard,\r\n    moveBoardToFolder,\r\n    object,\r\n    scroll,\r\n    cmp,\r\n    onEditBoard\r\n}) {\r\n\r\n    const workspaces = useSelector(state => state.workspace.workspaces)\r\n    const currBoard = useSelector(state => state.workspace.currBoard)\r\n    const loggedInUser = useSelector(state => state.user.loggedInUser);\r\n    const [dimensions, setDimensions] = useState(null);\r\n    const [currWorkspace, setCurrWorkspace] = useState(null);\r\n    const boardRef = useRef(null)\r\n    const [search, setSearch] = useState(\"\");\r\n    const dispatch = useDispatch();\r\n      \r\n    const onGetCurrWorkspace=()=>{\r\n        let theWorkspace = null\r\n        workspaces.forEach(workspace=>\r\n            workspace.boards.forEach(_board=>{ \r\n                   if(_board._id===board._id){\r\n                    theWorkspace= workspace\r\n                    }\r\n                }\r\n             \r\n            )\r\n        )\r\n        if(!theWorkspace){\r\n            workspaces.forEach(workspace=>\r\n                workspace.folders.forEach(folder=>\r\n                    folder.boards.forEach(_board=>\r\n                        { \r\n                            if(_board._id===board._id){\r\n                                theWorkspace= workspace\r\n                            }\r\n                        }\r\n                    )\r\n                )\r\n            )\r\n        }\r\n        setCurrWorkspace(theWorkspace)\r\n        dispatch(updateBoardWorkspace(theWorkspace))\r\n    }\r\n\r\n    const set = () =>\r\n    setDimensions(boardRef && boardRef.current ? \r\n        boardRef.current.getBoundingClientRect().bottom>500?\r\n            {...boardRef.current.getBoundingClientRect(),bottom:boardRef.current.getBoundingClientRect().bottom-191}\r\n            : boardRef.current.getBoundingClientRect()\r\n        : {}\r\n    );\r\n\r\n    useEffect(() => {\r\n        set();\r\n    }, [scroll]) \r\n\r\n    useEffect(() => {\r\n        setBoardName(board.name)\r\n    }, [board])\r\n\r\n    const [isOpenModal, setIsOpenModal] = useState(false);\r\n    const [isUpdateName, setIsUpdateName] = useState(false);\r\n    const [boardName, setBoardName] = useState(board.name);\r\n    const [moveToObject, setMoveToObject] = useState(null);\r\n    const inputEl = useRef()\r\n\r\n    const [isShownMoveToWorkspaceModal, setIsShownMoveToWorkspaceModal] = useState(false)\r\n\r\n    function toggleModal(ev){\r\n        ev.stopPropagation();\r\n        setIsOpenModal(curr=>!curr)\r\n    }\r\n\r\n    function handleChangeName(ev) {\r\n        setBoardName(ev.target.value)\r\n    }\r\n    function updateBoardName() {\r\n        const newBoard = {\r\n            ...board,\r\n            name:boardName\r\n        }\r\n        dispatch(updateCurrBoard(newBoard))\r\n        editBoard(newBoard)\r\n    }\r\n    function onMoveBoard(workspace) {\r\n        moveBoard(workspace,board)\r\n        setIsOpenModal(false)\r\n    }\r\n    function onMoveBoardToFolder(workspace,folder) {\r\n        moveBoardToFolder(workspace,folder,board)\r\n        setIsOpenModal(false)\r\n    }\r\n    const onToggleFavUserBoardList=()=>{\r\n        dispatch(toggleFavUserBoardList(loggedInUser,board._id))\r\n        const desc = `${loggedInUser.favBoards.includes(board._id)?'added board to ':'removed board from '}favorites`\r\n        const updatedBoard = {\r\n         ...board,\r\n        activities:[\r\n             {\r\n                 desc: desc,\r\n                 userId: loggedInUser._id,\r\n                 createdAt: Date.now()\r\n             },\r\n             ...board.activities]\r\n        }\r\n        onEditBoard(updatedBoard)\r\n        updateCurrBoard(updatedBoard)\r\n        setIsOpenModal(false)\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        if(!isShownMoveToWorkspaceModal){\r\n            setTimeout(() => {\r\n               if(boardRef&&boardRef.current){\r\n                boardRef.current.focus()\r\n               }\r\n            }, 0);\r\n        }\r\n    }, [isShownMoveToWorkspaceModal])\r\n\r\n\r\n    const toggleShownForwardModal=(val)=>{\r\n        setIsShownMoveToWorkspaceModal(val)\r\n    }\r\n    if (!board) return <div>Loading...</div>\r\n    return (\r\n    <div\r\n    className={`board-wrapper \r\n    ${isOpenModal?'open-modal':''} \r\n    ${isUpdateName?'updating-style':''}\r\n    ${currBoard._id===board._id?'active':''}\r\n    `}\r\n     onClick={()=>\r\n        onGettingCurrentBoard(board)\r\n    }\r\n     tabIndex='0'\r\n     onBlur={()=>{\r\n         setIsOpenModal(isShownMoveToWorkspaceModal)\r\n    }}\r\n     ref={boardRef}\r\n    >\r\n        <div className=\"name-wrapper\">\r\n            <CgViewComfortable className={`icon ${isUpdateName?'updating-style':''}`}/>\r\n            {isUpdateName?\r\n                <input \r\n                className=\"update-board-name-input\" \r\n                type=\"text\" \r\n                value={boardName}\r\n                onChange={handleChangeName}\r\n                ref={inputEl}\r\n                onBlur={()=>{\r\n                    setIsUpdateName(false)\r\n                    updateBoardName()\r\n                }}\r\n                onKeyDown={(ev) => {\r\n                    if (ev.key === 'Enter') {\r\n                        ev.target.blur()\r\n                    }\r\n                }}\r\n                />\r\n                :\r\n                <span \r\n                title={boardName.length>14?boardName:''} \r\n                className={`${boardName.length>14?'ellipsis-board-name':''}`}\r\n                >\r\n                    {boardName}\r\n                </span>\r\n            }\r\n        </div>\r\n        <BsThreeDots className={`BsThreeDots ${isUpdateName?'hide':''}`} onClick={(ev)=>{\r\n            onGetCurrWorkspace()//for favorite section\r\n            if(boardRef.current.getBoundingClientRect().bottom>500){\r\n                setDimensions({...boardRef.current.getBoundingClientRect(),bottom:boardRef.current.getBoundingClientRect().bottom-191});\r\n            }else if(boardRef.current.getBoundingClientRect().bottom<250){\r\n                if(cmp){\r\n                    setDimensions({...boardRef.current.getBoundingClientRect(),bottom:boardRef.current.getBoundingClientRect().bottom+5+181});\r\n                }else{\r\n                    setDimensions({...boardRef.current.getBoundingClientRect(),bottom:boardRef.current.getBoundingClientRect().bottom+2});\r\n                }\r\n            }else{\r\n                setDimensions(boardRef.current.getBoundingClientRect());\r\n            }\r\n            toggleModal(ev) \r\n             console.log(boardRef.current.getBoundingClientRect())\r\n            }}/>\r\n        {\r\n        isOpenModal&&\r\n        <div className='modal-default-style item-actions-modal board-modal-wrapper'\r\n        style={{top: `${dimensions?dimensions.bottom-181:0}px`}}\r\n        >\r\n                    <div  className='modal-btn item-actions-btn' onClick={()=>{\r\n                        setIsOpenModal(false)\r\n                        setIsUpdateName(true)\r\n                        setTimeout(() => {\r\n                            inputEl.current.focus()\r\n                        }, 0); \r\n                    }}>\r\n                        <BsPencil className=\"icon\"/>\r\n                        <span>Rename Board</span>\r\n                    </div>\r\n                    <div className='modal-btn item-actions-btn' onClick={onToggleFavUserBoardList} >\r\n                        <AiOutlineStar className=\"icon\"/>\r\n                       {loggedInUser.favBoards.includes(board._id)? <span>Remove from favorites</span>:\r\n                        <span>Add to favorites</span>}\r\n                    </div>\r\n                    <ForwardModal \r\n                    btn={<div>\r\n                            <IoArrowForwardCircleOutline className=\"icon\"/>\r\n                            <span>Move To</span>\r\n                        </div>\r\n                    }\r\n                    setMoveToObject={setMoveToObject}\r\n                    isFolderModal={true}\r\n                    toggleShownForwardModal={toggleShownForwardModal}\r\n                    moveToObject={moveToObject}\r\n                    setSearch={setSearch} \r\n                    >\r\n                        {!moveToObject&&<div className='modal-btn item-actions-btn forward-modal-btn' onClick={()=>{setMoveToObject('Folder')}}>\r\n                            <IoArrowForwardCircleOutline className=\"icon\"/>\r\n                            <span>Move To Folder</span>\r\n                        </div>}\r\n                        {!moveToObject&&<div className='modal-btn item-actions-btn' onClick={()=>{setMoveToObject('Workspace')}}> \r\n                            <IoArrowForwardCircleOutline className=\"icon\"/>\r\n                            <span>Move To Workspace</span>\r\n                        </div>}\r\n                        { moveToObject&&<div>\r\n                            <div onClick={()=>{setMoveToObject(null)}} className='forward-modal-title'>\r\n                                <div>Choose {moveToObject}</div>\r\n                                <div  className='modal-btn item-actions-btn'>back</div>\r\n                            </div>\r\n                        </div>}\r\n                        {moveToObject==='Workspace'&& <WorkspaceList \r\n                            onMoveObject={onMoveBoard}\r\n                            object={object}\r\n                            search={search} \r\n                            setSearch={setSearch} \r\n                        />}\r\n                        {moveToObject==='Folder'&&<AvailableFoldersList onMoveBoardToFolder={onMoveBoardToFolder}\r\n                        search={search} \r\n                        setSearch={setSearch} \r\n                        /> }\r\n                    </ForwardModal>\r\n                    <div className='delete-btn-wrapper'>\r\n                        <div className='modal-btn item-actions-btn' onClick={()=>{\r\n                            removeBoard(board._id)\r\n                            setIsOpenModal(false)\r\n                        }}>\r\n                            <VscTrash className=\"icon\"/>\r\n                            <span>Delete</span>\r\n                        </div>\r\n                    </div>\r\n        </div>}\r\n    </div>\r\n    );\r\n}\r\n","D:\\git-projects\\funday\\frontend\\src\\cmps\\ToolbarMenuActionsBtnModal.jsx",["422","423","424"],"import React, { useEffect,useState,useRef } from 'react';\r\nimport { CgViewComfortable } from 'react-icons/cg'\r\n// import { CreateBoard } from \"./CreateBoard\";\r\n// import { PopupModal } from \"./PopupModal\";\r\n\r\nexport function ToolbarMenuActionsBtnModal({\r\n    btnName,\r\n    addNewBoard,\r\n    addNewFloder,\r\n    setIsShown\r\n}) {\r\n    // const [isShown, setIsShown] = useState(false)\r\n\r\n    const getBtnOptions=()=>{\r\n        let content = [];\r\n        switch(btnName) {\r\n            case 'Add':\r\n                content.push(\r\n                <> \r\n                    <div className=\"actions-btn actions-modal-btn modal-btn \"\r\n                     onClick={()=>{setIsShown(true)}}\r\n                    //  onClick={addNewBoard}\r\n                     >\r\n                        <CgViewComfortable className=\"icon\" />\r\n                        <span>New Board</span>\r\n                    </div>  \r\n                    <div className=\"actions-btn modal-btn\" onClick={addNewFloder}>\r\n                        <CgViewComfortable className=\"icon\" />\r\n                        <span>New Folder</span>\r\n                    </div>   \r\n                </>\r\n                );\r\n                break; \r\n            case 'Filters':\r\n                content.push(\r\n                <>  \r\n                   {btnName}\r\n                </>\r\n                );\r\n                break;\r\n            case 'Search':\r\n                content.push(\r\n                <> \r\n                   {btnName}\r\n                </>\r\n                );\r\n                break;\r\n            default:\r\n                content.push('');\r\n                break;\r\n        }                                \r\n        return content;\r\n    }\r\n    return (\r\n        <>\r\n        <div className='modal-default-style actions-modal-wrapper'>\r\n           {getBtnOptions()}\r\n        </div>\r\n        {/* {isShown&&<PopupModal setIsShown={setIsShown} addNewBoard={addNewBoard}>\r\n            <CreateBoard/>\r\n        </PopupModal>} */}\r\n        </>\r\n    );\r\n}\r\n","D:\\git-projects\\funday\\frontend\\src\\cmps\\CreateBoard.jsx",[],"D:\\git-projects\\funday\\frontend\\src\\cmps\\ForwardModal.jsx",["425","426"],"import React, { useState,useRef,useEffect } from 'react';\r\nimport {IoArrowForwardCircleOutline } from 'react-icons/io5'\r\nimport { IoIosArrowForward } from 'react-icons/io'\r\nexport function ForwardModal({\r\n    children,btn,setMoveToObject,isFolderModal,\r\n    toggleShownForwardModal,isWorkspaceIconPicker,\r\n    itemList,moveToObject,setSearch\r\n\r\n}) {\r\n    const [isShown, setIsShown] = useState(false);\r\n\r\n    useEffect(() => {\r\n        toggleShownForwardModal(isShown)\r\n    }, [isShown,toggleShownForwardModal])\r\n\r\n    return (\r\n        <div className='forward-modal-btn-wrapper'\r\n        onMouseOver={()=>setIsShown(true)}\r\n        onMouseLeave={()=>{\r\n            setIsShown(false)\r\n            if(isFolderModal){\r\n                setMoveToObject(null)\r\n            }\r\n            (itemList||moveToObject)&&setSearch('')\r\n        }}\r\n       >\r\n           <div  \r\n           className={`modal-btn item-actions-btn forward-modal-btn ${isShown?'open-modal':''} `}\r\n           >\r\n                {btn}\r\n               <IoIosArrowForward className=\"icon\"/>\r\n           </div>\r\n           {\r\n                   isShown&&\r\n                   <div \r\n                   className={`modal-default-style ${isWorkspaceIconPicker?'menu-icon-picker':'forward-modal'}\r\n                   ${itemList||moveToObject?'items-list':''}\r\n                   `}\r\n                   >\r\n                        {children}\r\n                   </div>\r\n           }\r\n       </div>     \r\n    );\r\n}\r\n","D:\\git-projects\\funday\\frontend\\src\\cmps\\WorkspaceList.jsx",["427","428"],"import React, { useState,useRef,useEffect } from 'react';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { PinCheckbox } from \"./PinCheckbox\";\r\nimport { DynamicFaIcon } from \"../data/dynamicFaIcon\";\r\n\r\nexport function WorkspaceList({\r\n    onMoveObject,\r\n    object,\r\n    isCheckbox,\r\n    search,\r\n    setSearch\r\n}){\r\n\r\n    const workspaces = useSelector(state => state.workspace.workspaces);\r\n    const currWorkspace = useSelector(state => state.workspace.currWorkspace);\r\n    const [listOfWorkspaces, setListOfWorkspaces] = useState(\r\n        object==='insideFolder'?\r\n        workspaces:\r\n        workspaces.filter(workspace=>workspace._id!==currWorkspace._id)\r\n    );\r\n    useEffect(() => {\r\n        object==='insideFolder'||isCheckbox?\r\n        setListOfWorkspaces(workspaces):\r\n        setListOfWorkspaces(\r\n            workspaces.filter(workspace=>workspace._id!==currWorkspace._id)\r\n        )\r\n    }, [currWorkspace,workspaces,object,isCheckbox])\r\n    return(\r\n        <div>\r\n            <input type=\"search\" placeholder=\"Search Workspace\" className=\"forward-modal-search-input\"\r\n            onChange={(e) => setSearch(e.target.value)}\r\n            />\r\n           {    listOfWorkspaces.map(workspace=>\r\n                    workspace.name.toLowerCase().includes(search.toLowerCase())?\r\n                    <div \r\n                    className={`modal-btn item-actions-btn forward-modal-btn ${isCheckbox?'remove-pointer':''}`}\r\n                    key={workspace._id} \r\n                    onClick={()=>{\r\n                        if(isCheckbox){\r\n                            return\r\n                        }\r\n                        onMoveObject(workspace)\r\n                    }}\r\n                    >\r\n                        <div>\r\n                            <div \r\n                            className=\"workspace-icon\" \r\n                            style={{backgroundColor:workspace.color}}\r\n                            >\r\n                            <DynamicFaIcon name={workspace.img} />\r\n                            </div>\r\n                            <span  className=\"workspace-name\">{workspace.name}</span>\r\n                        </div>\r\n                       {isCheckbox&&\r\n                       <PinCheckbox workspace={workspace}/>\r\n                        }\r\n                        \r\n                    </div>:\r\n                    null\r\n                )\r\n           }\r\n        </div>\r\n    )\r\n}\r\n","D:\\git-projects\\funday\\frontend\\src\\cmps\\GoogleOauth.jsx",["429"],"import React, { Component } from 'react'\r\nimport { Route , withRouter} from 'react-router-dom';\r\nimport { connect } from 'react-redux'\r\nimport { GoogleLogin } from 'react-google-login';\r\nimport { loginByGoogle } from '../store/actions/userActions'\r\nimport { Loading } from './Loading'\r\nimport { loadWorkspaces} from '../store/actions/workspaceActions'\r\n\r\nexport class _GoogleOauth extends Component {\r\n    state={\r\n        isLoading: false,\r\n    }\r\n    responseGoogle =async (response) => {\r\n        const userCreds = { \r\n            email: response.profileObj.email,\r\n            avatar:response.profileObj.imageUrl, \r\n            username: response.profileObj.givenName \r\n        }\r\n        await this.props.loginByGoogle(userCreds)\r\n        this.setState({ isLoading: true })\r\n        await this.props.loadWorkspaces()\r\n        this.setState({ isLoading: false })\r\n        if (this.props.loggedInUser) this.props.history.push(`/boards`)\r\n    }\r\n       \r\n    render() {\r\n        if (this.state.isLoading) return <Loading txt='SIGNING IN WITH GOOGLE...'/>\r\n        return (\r\n           <div>\r\n                <GoogleLogin\r\n                    clientId=\"866960241942-jhfvtsh6b7adl5jae5cth72jlhug4i72.apps.googleusercontent.com\"\r\n                    buttonText=\"Login With Google\"\r\n                    onSuccess={this.responseGoogle}\r\n                    onFailure={this.responseGoogle}\r\n                    cookiePolicy={'single_host_origin'}\r\n                />\r\n           </div> \r\n        )}\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      users: state.user.users,\r\n      loggedInUser: state.user.loggedInUser,\r\n      isLoading: state.system.isLoading,\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    loginByGoogle,\r\n    loadWorkspaces\r\n}\r\nexport const GoogleOauth =  connect(mapStateToProps, mapDispatchToProps)(withRouter(_GoogleOauth))","D:\\git-projects\\funday\\frontend\\src\\cmps\\Task.jsx",["430","431","432","433","434","435","436","437","438"],"import React, { useEffect,useState,useRef } from 'react';\r\nimport { FaRegUserCircle,FaPencilAlt } from 'react-icons/fa'\r\nimport { TiArrowSortedDown, TiVendorAndroid } from 'react-icons/ti'\r\nimport { getColumnWidth } from \"./task-cells-width.js\";\r\nimport { TaskStatus } from \"./TaskStatus\";\r\nimport { TaskText } from \"./TaskText\";\r\nimport { TaskCheckBox } from \"./TaskCheckBox\";\r\nimport { TaskDate } from \"./TaskDate\";\r\nimport { TaskConversation } from \"./TaskConversation\";\r\nimport { OwnerModal } from \"./OwnerModal\";\r\nimport { DropdownModal } from \"./DropdownModal\";\r\nimport { TaskNumbersColumn } from \"./TaskNumbersColumn\";\r\nimport { TaskTimeline } from \"./TaskTimeline\";\r\nimport { BsTrashFill ,BsPlusCircleFill} from 'react-icons/bs'\r\nimport { GoCheck} from 'react-icons/go'\r\nimport { addCheckedTasks,removeCheckedTasks} from '../store/actions/workspaceActions'\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { loadUsers } from '../store/actions/userActions'\r\nimport { updateTaskConversation } from '../store/actions/workspaceActions'\r\nimport moment from 'moment'\r\n\r\n\r\nexport function Task({\r\n    task,\r\n    taskKeys, \r\n    table, \r\n    board,\r\n    onEditBoard,\r\n    provided,\r\n    isDragging,\r\n    openConversationModal,\r\n    isOpenConversationModal,\r\n    onEditTable,\r\n    onEditTask,\r\n    unCheckTasks,\r\n}){\r\n    const users = useSelector(state => state.user.users);\r\n    const loggedInUser = useSelector(state => state.user.loggedInUser);\r\n    const checkedTasks = useSelector(state => state.workspace.checkedTasks)\r\n    const [currTask, setTask] = useState(task);\r\n    const [isShowOptionsModal, setIsShowOptionsModal] = useState(false);\r\n    const [isUpdating, setIsUpdating] = useState(false);\r\n    const [isOwnerModalShown, setToggleOwnerModal] = useState(false);\r\n    const [isDropdownModalShown, setToggleDropdownModal] = useState(false);\r\n    const [isMouseInside, setIsMouseInside] = useState(false);\r\n    const [isUpdatingText, setUpdatingText] = useState(false);\r\n    const [isUpdatingNumbers, setUpdatingNumbers] = useState(false);\r\n    const [isChecked, setCheckTask] = useState(false);\r\n    const [getCurrTime, setCurrTime] = useState(null);\r\n    const [newInterval, setNewInterval] = useState(0);\r\n    const [owners, setOwners] = useState(task.owner);\r\n    const editableTaskName = useRef()\r\n    const btnEl = useRef()\r\n    const modalEl = useRef(null)\r\n    const dropdownModalEl = useRef(null)\r\n    const dispatch = useDispatch();\r\n\r\n    const [modalPosition, setModalPosition] =useState({})\r\n    const [modalName, setCurrModalName] =useState('')\r\n    const cellEl = useRef(null)\r\n\r\n    //status\r\n    const [isStatusModalOpen, setIsStatusModalOpen] =useState(false)\r\n    const [isEditLabelsModalOpen, setIsEditLabelsModalOpen] =useState(false)\r\n\r\n    const conversationLocation = useSelector(state => state.workspace.conversationLocation)\r\n\r\n    useEffect(() => {\r\n      dispatch(loadUsers())\r\n    }, [dispatch]) \r\n\r\n\r\n    \r\n    function mapOrder (array, order, key) {\r\n        array.sort( function (a, b) {\r\n          var A = a[key], B = b[key];\r\n          if (order.indexOf(A) > order.indexOf(B)) {\r\n            return 1;\r\n          } else {\r\n            return -1;\r\n          }\r\n        });\r\n        return array;\r\n    };\r\n\r\n    useEffect(() => {\r\n        //sorted by the task.owner order!\r\n        const itemsArray = users.filter(user=>\r\n            task.owner.includes(user._id)\r\n        )\r\n        const itemOrder = [...task.owner]\r\n        const orderedArray = mapOrder(itemsArray, itemOrder, '_id');\r\n\r\n        setOwners(orderedArray)\r\n    }, [task,users,loggedInUser])\r\n\r\n    useEffect(() => {\r\n        const currCheckedTask = {\r\n            _id:task._id,\r\n            table:table\r\n        }\r\n        if(isChecked){\r\n            dispatch(addCheckedTasks(currCheckedTask))\r\n        }else{\r\n            dispatch(removeCheckedTasks(task._id))\r\n        }\r\n    }, [isChecked,dispatch,task._id,table])\r\n\r\n    useEffect(() => {\r\n        if(unCheckTasks){\r\n            setCheckTask(false)\r\n        }\r\n    }, [unCheckTasks])\r\n   \r\n\r\n    useEffect(() => {\r\n       setTask(task)\r\n    }, [task]) \r\n    \r\n    useEffect(() => {\r\n       if(isShowOptionsModal){\r\n       setTimeout(() => {\r\n        btnEl.current.focus()\r\n       }, 0);\r\n       }\r\n    }, [isShowOptionsModal])\r\n    \r\n     \r\n    useEffect(() => {\r\n       if(isUpdating){\r\n        setTask(task)\r\n        editableTaskName.current.focus()\r\n       }\r\n     }, [isUpdating,task])   \r\n\r\n    const focusText = () => {\r\n        setTimeout(() => {\r\n            document.execCommand('selectAll', false, null)\r\n        }, 0)\r\n    }\r\n    const handleChangeName = (ev) => {\r\n        setTask({\r\n            ...currTask,\r\n            name: ev.target.value \r\n        })\r\n    }\r\n    const onOpenModal =(name,e)=>{\r\n        getModalPosition(e)\r\n        setCurrModalName(name)\r\n        if(name==='owner'){\r\n            // setToggleOwnerModal(curr=>!curr)\r\n            setToggleOwnerModal(true)\r\n            // if(modalEl.current){\r\n            //     modalEl.current.focus()\r\n            // }\r\n        }\r\n        if(name==='dropdown'){\r\n            setToggleDropdownModal(true)\r\n            // setToggleDropdownModal(curr=>!curr)\r\n            // if(dropdownModalEl.current){\r\n            //     dropdownModalEl.current.focus()\r\n            // }\r\n        }\r\n        if(name==='status'){\r\n            setIsStatusModalOpen(true)\r\n        }\r\n    }\r\n    const closeModal =()=>{\r\n        setToggleOwnerModal(false)\r\n        setToggleDropdownModal(false)\r\n        closeStatusModal()\r\n    }\r\n    const getModalStyle=()=>{\r\n        switch (true) {\r\n            case modalName==='owner':\r\n                return 'owner-modal';\r\n            case modalName==='dropdown':\r\n                return 'dropdown-modal'; \r\n            // case modalName==='status':\r\n            //     return 'status-modal-wrapper';\r\n            default:\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n        //   console.log('This will run every second!');\r\n          tick()\r\n        }, 1000);\r\n        return () => clearInterval(interval);\r\n      }, [newInterval]);\r\n\r\n    useEffect(() => {\r\n        tick()\r\n    }, [])\r\n\r\n      useEffect(() => {\r\n        tick()\r\n        setNewInterval(prev=>prev+1)\r\n      }, [task]);\r\n\r\n    const tick =()=>{\r\n        let date = moment(task.lastUpdated.date).fromNow()\r\n        if(date==='a few seconds ago'){\r\n            date = 'Just now'\r\n        }\r\n        setCurrTime(date)\r\n    }\r\n\r\n    const lastUpdatedUser=(id)=>{\r\n        return users.filter(user=>user._id===id)[0]\r\n    }\r\n\r\n\r\n    const getModalPosition = (ev) => {\r\n        const translateY = ev.clientY > window.innerHeight / 2 ? '-100%' : '0';\r\n        const translateX = ev.clientX > window.innerWidth / 2 ? '-100%' : '0';\r\n\r\n        const divOffsetS = {\r\n            x:ev.nativeEvent.offsetX,\r\n            y:ev.nativeEvent.offsetY,\r\n            width:ev.nativeEvent.offsetWidth\r\n        }\r\n\r\n        const divSizes={\r\n            width:cellEl.current?cellEl.current.offsetWidth:0,\r\n            height:cellEl.current?cellEl.current.offsetHeight:0\r\n        }\r\n\r\n        const position = { top: ev.clientY, left: ev.clientX, transform: `translate(${translateX}, ${translateY})` };\r\n        setModalPosition(position)\r\n        console.log('ModalPosition123:',position)\r\n        console.log('ev.clientY:',ev.clientY)\r\n        console.log('window.innerHeight:',window.innerHeight)\r\n        console.log('ev.clientX:',ev.clientX)\r\n        console.log('window.innerWidth:',window.innerWidth)\r\n        console.log('divSizes:',divSizes)\r\n        console.log('divOffsetS:',divOffsetS)\r\n    }\r\n    \r\n\r\n    const getTaskValue= (taskKey)=>{\r\n        let content = [];\r\n        switch(taskKey) {\r\n            case 'name':\r\n                content.push(\r\n                <React.Fragment>\r\n                    <div className=\"task-name-wrapper\">\r\n                        <span className={`task-name-span ${ isUpdating?'task-name-span-updating':''}`}>\r\n                        { isUpdating?\r\n                            <input \r\n                            className=\"task-name\"\r\n                            onFocus={focusText}\r\n                            type=\"text\" \r\n                            name=\"name\" \r\n                            ref={editableTaskName} \r\n                            value={currTask[taskKey]} \r\n                            onChange={handleChangeName}\r\n                            onBlur={() => {\r\n                                if (currTask.name === task.name) return\r\n                                const desc = `changed the task name from ${task.name} to ${currTask.name}`\r\n                                const updatedTask = {\r\n                                    ...task,\r\n                                    name: currTask.name\r\n                                }\r\n                                onEditTask(table,updatedTask,desc)\r\n                                setIsUpdating(false)\r\n                            }}\r\n                            onKeyDown={(ev) => {\r\n                                if (ev.key === 'Enter') {\r\n                                    ev.target.blur()\r\n                                }\r\n                            }}\r\n                            />:\r\n                            <span \r\n                            onClick={()=>{\r\n                                dispatch(updateTaskConversation(\r\n                                    {\r\n                                        taskId:task._id,\r\n                                        tableId:table._id\r\n                                    }\r\n                                ))\r\n                                openConversationModal()\r\n                            }}\r\n                            >{task[taskKey]}</span>\r\n                        }\r\n                        </span>\r\n                        <FaPencilAlt className=\"FaPencilAlt\" onClick={() => {\r\n                            setIsUpdating(true)\r\n                        }}/>\r\n                    </div>\r\n\r\n                    <TaskConversation \r\n                    table={table}\r\n                    task={task}\r\n                    openConversationModal={openConversationModal}\r\n\r\n                    />\r\n                </React.Fragment>\r\n                );\r\n                break; \r\n            case 'owner':\r\n                content.push(\r\n                    <div className={`add-cell-content-btn-wrapper ${task[taskKey].length>0?'add-more':'add-first'}`}\r\n                    >\r\n                        <BsPlusCircleFill className={`add-owner ${isOwnerModalShown?'active':''}`}\r\n                        //    onClick={()=>onOpenModal()}\r\n                        /> \r\n                       {/* { isOwnerModalShown&&\r\n                        <div className='modal-default-style owner-modal'\r\n                        ref={modalEl}\r\n                        tabIndex=\"0\"\r\n                        // onClick={()=> modalEl.current.focus()}\r\n                        onBlur={()=>setToggleOwnerModal(false)}\r\n                        >\r\n                            <OwnerModal\r\n                            task={task} \r\n                            onEditTask={onEditTask} \r\n                            table={table}\r\n                            setToggleOwnerModal={setToggleOwnerModal}\r\n                            />\r\n                        </div>} */}\r\n                    </div>\r\n                )\r\n                if(task[taskKey].length>0&&owners.length>0){\r\n                    // const owner = task[taskKey][0]\r\n                    content.push(\r\n                        <div className=\"owner-container\">\r\n                            <div className=\"owner-avatar-wrapper\">\r\n                                <img src={`${owners[0].avatar}`} alt=\"\"/>\r\n                            </div>\r\n                            {\r\n                                task[taskKey].length>1?\r\n                                <div className=\"owners-count\">\r\n                                    +{task[taskKey].length-1}\r\n                                </div>:\r\n                                null\r\n                            }\r\n                         </div>\r\n                    )\r\n                }else{\r\n                    content.push(\r\n                        <FaRegUserCircle style={{ width: '30px', height: '30px', color:\"rgb(180, 182, 188)\" }}/>\r\n                    )\r\n                }\r\n                break;\r\n            case 'createdAt':\r\n                if(!task[taskKey]){\r\n                    content.push(\r\n                        <TaskDate task={task} taskKey={taskKey} onEditTask={onEditTask} table={table}/>\r\n                    )\r\n                }else{   \r\n                    content.push(\r\n                        <React.Fragment>\r\n                            <TaskDate task={task} taskKey={taskKey} onEditTask={onEditTask} table={table}/>\r\n                        </React.Fragment>\r\n                    );\r\n                }\r\n                break;\r\n            case 'text':\r\n                content.push(\r\n                    <TaskText onEditTask={onEditTask} task={task} table={table} setUpdatingText={setUpdatingText}/>\r\n                ) \r\n                break; \r\n            case 'numbers':\r\n                content.push(\r\n                    <TaskNumbersColumn onEditTask={onEditTask} task={task} table={table} setUpdatingNumbers={setUpdatingNumbers}/>\r\n                ) \r\n                break;\r\n            case 'checkBox':\r\n                content.push(\r\n                    <TaskCheckBox onEditTask={onEditTask} task={task} table={table} />\r\n                ) \r\n                break;\r\n            case 'lastUpdated':\r\n                if(task[taskKey]&&task[taskKey].date){\r\n                    content.push(\r\n                        <div className=\"last-updated-task-container\">\r\n                            <div className=\"avatar-wrapper\">\r\n                                {lastUpdatedUser(task[taskKey].byUser)&&\r\n                                <img \r\n                                src={`${lastUpdatedUser(task[taskKey].byUser).avatar}`} alt=\"\"/>}\r\n                            </div>\r\n                            <span>{getCurrTime}</span>\r\n                        </div>\r\n                        \r\n                        \r\n                    ) \r\n                }\r\n                break;\r\n            case 'timeline':\r\n                    content.push(\r\n                        <TaskTimeline task={task} taskKey={taskKey} onEditTask={onEditTask} table={table}/>\r\n                    ) \r\n                break;\r\n            case 'dropdown':\r\n                    content.push(\r\n                        <div className={`add-cell-content-btn-wrapper dropdown add-first`}\r\n                        >\r\n                            <BsPlusCircleFill className={`add-owner ${isDropdownModalShown?'active':''}`}\r\n                            /> \r\n                           {/* { isDropdownModalShown&&\r\n                            <div className='modal-default-style dropdown-modal'\r\n                            ref={dropdownModalEl}\r\n                            onMouseEnter = {()=>setIsMouseInside(true)}\r\n                            onMouseLeave = {()=>setIsMouseInside(false)}\r\n                            onBlur={()=>{\r\n                                //need to remove the modal outside task..\r\n                                if(isMouseInside)return\r\n                                setTimeout(() => {\r\n                                    setToggleDropdownModal(false)\r\n                                }, 0);\r\n                            }}\r\n                            >\r\n                                \r\n                                <DropdownModal\r\n                                task={task} \r\n                                onEditTask={onEditTask} \r\n                                table={table}\r\n                                setToggleDropdownModal={setToggleDropdownModal}\r\n                                onEditBoard={onEditBoard}\r\n                                />\r\n                                \r\n                            </div>} */}\r\n                        </div>\r\n                    )\r\n                    if(task[taskKey].length>0){\r\n                        // const owner = task[taskKey][0]\r\n                        content.push(\r\n                            <div className=\"dropdown-container\">\r\n                                <div className=\"labels-container\">\r\n                                    {\r\n                                        task[taskKey].length>1?\r\n                                        \r\n                                            task[taskKey].slice(0,2).map(label=>\r\n                                                <div className=\"label-wrapper\"\r\n                                                title={label.name}\r\n                                                >\r\n                                                {\r\n                                                    label.name.length>8?\r\n                                                    <div className=\"ellipsis-wrapper\">{label.name}</div>\r\n                                                    : \r\n                                                    <>{label.name}</>\r\n                                                }\r\n                                                </div>\r\n                                            )\r\n                                        :\r\n                                        task[taskKey][0]?<div className={`label-wrapper `}>\r\n                                        {\r\n                                            task[taskKey][0].name.length>8?\r\n                                            <div className='ellipsis-wrapper'\r\n                                            title={task[taskKey][0].name}\r\n                                            >{task[taskKey][0].name}</div>\r\n                                            : \r\n                                            <>{task[taskKey][0].name}</>\r\n                                        }\r\n                                        </div>\r\n                                        :\r\n                                        null\r\n                                    }\r\n                                </div>\r\n                                {\r\n                                    task[taskKey].length>2?\r\n                                    <div className=\"dropdown-label-count\">\r\n                                        +{task[taskKey].length-2}\r\n                                    </div>:\r\n                                    null\r\n                                }\r\n                             </div>\r\n                        )\r\n                    }\r\n                break;\r\n            default:\r\n                content.push(task[taskKey]);\r\n                break;\r\n        }                                \r\n        return content;\r\n    }\r\n\r\n    function getMonthName(month){\r\n        switch(month) {\r\n            case 1:\r\n              return 'Jan';\r\n            case 2:\r\n              return 'Feb';\r\n            case 3:\r\n              return 'Mar';\r\n            case 4:\r\n              return 'Apr';\r\n            case 5:\r\n              return 'May';\r\n            case 6:\r\n              return 'June';\r\n            case 7:\r\n              return 'July';\r\n            case 8:\r\n              return 'Aug';\r\n            case 9:\r\n              return 'Sept';\r\n            case 10:\r\n              return 'Oct';\r\n            case 11:\r\n              return 'Nov';\r\n            case 12:\r\n              return 'Dec';\r\n            default:\r\n              return 'foo';\r\n        }\r\n    }\r\n\r\n    const getColumnStyle=(val)=>{\r\n        switch (val) {\r\n            case 'text':\r\n                return 'text-style'\r\n            case 'numbers':\r\n                return 'numbers-style'\r\n            case 'checkBox':\r\n                return 'checkBox-style'\r\n            case 'lastUpdated':\r\n                return 'lastUpdated-style'\r\n            case 'dropdown':\r\n                return `dropdown-style ${task.dropdown.length>0?'not-empty':''}`\r\n            case 'timeline':\r\n                return `timeline-style ${task.timeline.from?'not-empty':''}`\r\n            default:\r\n                return ''\r\n        }\r\n    }\r\n\r\n\r\n    const removeTask=(currTask)=>{\r\n        const newTable = {\r\n            ...table,\r\n            tasks:table.tasks.filter(task=>task._id!==currTask._id)\r\n        }\r\n        const desc = `removed the task \"${currTask.name}\" from \"${table.name}\"`\r\n        onEditTable(newTable,desc)\r\n        setIsShowOptionsModal(false)\r\n    }\r\n\r\n\r\n    const closeStatusModal=()=>{\r\n        if(isEditLabelsModalOpen)return\r\n        setIsStatusModalOpen(false)\r\n        closeEditLabelsModal()\r\n    }\r\n\r\n    const toggleStatusModal=()=>{\r\n        setIsStatusModalOpen(prev=>!prev)\r\n    }\r\n\r\n    const openEditLabelsModal=()=>{\r\n        setIsEditLabelsModalOpen(true)\r\n    }\r\n    const closeEditLabelsModal=()=>{\r\n        setIsEditLabelsModalOpen(false)\r\n    }\r\n\r\n        if (!task) return <div>Loading....</div>\r\n        return (\r\n            <>\r\n <div className={`table-row-wrapper ${isDragging?'task-dragging':''}`} ref={provided.innerRef} {...provided.draggableProps}  {...provided.dragHandleProps}>\r\n            <div\r\n                className=\"options-wrapper\"  \r\n            >\r\n                <div className={`options-btn ${isShowOptionsModal?'options-btn-visible':''}`} onClick={()=>setIsShowOptionsModal(true)} \r\n                tabIndex=\"0\"\r\n                ref={btnEl} \r\n                 onBlur={()=>setIsShowOptionsModal(false)\r\n                }\r\n                >\r\n                    <div className=\"TiArrowSortedDown-wrapper   TiArrowSortedDown-task-wrapper\">\r\n                        <TiArrowSortedDown/>\r\n                    </div>\r\n                    { \r\n                isShowOptionsModal&&\r\n                    <div className=\"options-modal task-options-modal\" >\r\n                        <div className='modal-btn item-actions-btn' >\r\n                            <FaPencilAlt className=\"icon\"/>\r\n                            <span onClick={() => {\r\n                                setIsUpdating(true)\r\n                                setIsShowOptionsModal(false)\r\n                            }}>Rename Item</span>\r\n                        </div>\r\n                        <div className='delete-btn-wrapper'>\r\n                            <div className='modal-btn item-actions-btn' onClick={()=>removeTask(task)}>\r\n                                <BsTrashFill className=\"icon\"/>\r\n                                <span>Delete</span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                }\r\n                </div>\r\n            </div>\r\n            <div className={`table-row task-row ${isOpenConversationModal&&task._id===conversationLocation.taskId?'conversation-modal-open':''}`} >\r\n                {taskKeys.map((taskKey)=>\r\n                    taskKey===\"status\"?\r\n                    <div \r\n                    className='table-cell task-cell'\r\n                    tabIndex=\"0\" \r\n                    onBlur={closeStatusModal}\r\n                    >\r\n                        <div className='task-cell-status' style={{backgroundColor:`${task.status.color}`}}\r\n                         onClick={toggleStatusModal}\r\n                         >\r\n                            <div className=\"cell-content-wrapper\">\r\n                            {task[taskKey].name}\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"status-container\">\r\n                        {isStatusModalOpen&&\r\n                        <TaskStatus \r\n                        taskKey={taskKey} \r\n                        task={task} \r\n                        table={table} \r\n                        FaPencilAlt={FaPencilAlt} \r\n                        onEditTask={onEditTask} \r\n                        board={board} \r\n                        onEditBoard={onEditBoard}\r\n                        isStatusModalOpen={isStatusModalOpen}\r\n                        isEditLabelsModalOpen={isEditLabelsModalOpen}\r\n                        openEditLabelsModal={openEditLabelsModal}\r\n                        closeEditLabelsModal={closeEditLabelsModal}\r\n                        setIsStatusModalOpen={setIsStatusModalOpen}\r\n                        closeStatusModal={closeStatusModal}\r\n                        />\r\n                        }\r\n                        </div>\r\n                    </div>\r\n\r\n                    :\r\n                    <div className={`table-cell task-cell ${getColumnStyle(taskKey)} ${getColumnWidth(taskKey)} ${isUpdatingText?'updating-text':''} ${isUpdatingNumbers?'updating-numbers':''}\r\n                    `}\r\n                    ref = {cellEl}\r\n                    onClick={(e)=>\r\n                        {if(taskKey==='owner'||taskKey==='dropdown'){\r\n                            console.log('open-owner-modal');\r\n                            onOpenModal(taskKey,e)\r\n                        }\r\n                        }}\r\n                    >\r\n                        <div className={`decoration-line task-line ${checkedTasks.length>0?'open':''}`} style={{backgroundColor:`${table.color}`}}>\r\n                            <div className={`task-line-square ${isChecked?'checked':''}`} onClick={()=>setCheckTask(curr=>!curr)}>\r\n                               { isChecked&&<GoCheck style={{color:`${table.color}`}}/>}\r\n                            </div>\r\n                        </div>\r\n                        <div className={`cell-content-wrapper ${taskKey==='name'?'name-wrapper-cell':''}\r\n                        ${taskKey==='dropdown'?'dropdown-wrapper-cell':''}\r\n                        `}\r\n                        >\r\n                            {getTaskValue(taskKey)}\r\n                        </div>\r\n                    </div>\r\n                )}\r\n                <div className='table-cell task-cell'\r\n                ref = {cellEl}\r\n                ></div>\r\n            </div>\r\n        </div>\r\n       \r\n\r\n        { (isOwnerModalShown||isDropdownModalShown)&&\r\n        <div className=\"modal-screen-wrapper\" onClick={closeModal}>\r\n            {<div \r\n            className={`modal-default-style ${getModalStyle()}`}\r\n            style={{...modalPosition}}\r\n            onClick={(ev) => ev.stopPropagation()}>\r\n\r\n                {isOwnerModalShown&&<OwnerModal\r\n                task={task} \r\n                onEditTask={onEditTask} \r\n                table={table}\r\n                setToggleOwnerModal={setToggleOwnerModal}/>}\r\n\r\n                {isDropdownModalShown&&<DropdownModal\r\n                task={task} \r\n                onEditTask={onEditTask} \r\n                table={table}\r\n                setToggleDropdownModal={setToggleDropdownModal}\r\n                onEditBoard={onEditBoard}/>}\r\n                \r\n                {/* {isStatusModalOpen&&<TaskStatus \r\n                task={task} \r\n                table={table} \r\n                FaPencilAlt={FaPencilAlt} \r\n                onEditTask={onEditTask} \r\n                board={board} \r\n                onEditBoard={onEditBoard}\r\n                isStatusModalOpen={isStatusModalOpen}\r\n                isEditLabelsModalOpen={isEditLabelsModalOpen}\r\n                openEditLabelsModal={openEditLabelsModal}\r\n                closeEditLabelsModal={closeEditLabelsModal}\r\n                setIsStatusModalOpen={setIsStatusModalOpen}\r\n                />} */}\r\n            </div>}\r\n            {/* {isStatusModalOpen&&\r\n                <div className=\"status-container modal-default-style\" style={{...modalPosition}}>\r\n                    <TaskStatus \r\n                    task={task} \r\n                    table={table} \r\n                    FaPencilAlt={FaPencilAlt} \r\n                    onEditTask={onEditTask} \r\n                    board={board} \r\n                    onEditBoard={onEditBoard}\r\n                    isStatusModalOpen={isStatusModalOpen}\r\n                    isEditLabelsModalOpen={isEditLabelsModalOpen}\r\n                    openEditLabelsModal={openEditLabelsModal}\r\n                    closeEditLabelsModal={closeEditLabelsModal}\r\n                    setIsStatusModalOpen={setIsStatusModalOpen}\r\n                    />\r\n                </div>\r\n            }    */}\r\n        </div>\r\n        }\r\n       </>\r\n    )\r\n\r\n}","D:\\git-projects\\funday\\frontend\\src\\cmps\\TableColumnPreview.jsx",["439"],"import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport ContentEditable from 'react-contenteditable';\r\nimport { BiGridVertical } from 'react-icons/bi'\r\nimport { CgExpand } from 'react-icons/cg'\r\nimport { AiOutlineShrink } from 'react-icons/ai'\r\nimport { getColumnWidth } from \"./task-cells-width.js\";\r\nimport { TitleOptionsBtn } from './TitleOptionsBtn'\r\n\r\nclass _TableColumnPreview extends Component {\r\n    state={\r\n        table:{},\r\n        board:{},\r\n        currTableColumn:{},\r\n        isDivOnFocus:false,\r\n        isShownTitleOptionsModal:false\r\n    }\r\n    componentDidMount(){\r\n        this.setState({table:this.props.table})\r\n        this.setState({board:this.props.board})\r\n        this.setState({currTableColumn:this.props.tableColumn})\r\n        this.editableGroupName = React.createRef();\r\n        this.editableGroupTitle = React.createRef();\r\n    }\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevState.currTableColumn.title !== this.state.currTableColumn.title) {\r\n            this.setState({board:this.props.board})\r\n        }\r\n        if (prevProps.tableColumn.title !== this.props.tableColumn.title) {\r\n            this.setState({board:this.props.board})\r\n        }\r\n        if(prevProps.board !== this.props.board){\r\n            this.setState({          \r\n                board: this.props.board\r\n            });\r\n            this.setState({currTableColumn:this.props.tableColumn})\r\n        }\r\n    }\r\n\r\n    focusText = () => {\r\n        setTimeout(() => {\r\n            document.execCommand('selectAll', false, null)\r\n        }, 0)\r\n    }\r\n \r\n    handleChangeGroupName = (ev) => {\r\n        this.setState({ table: { ...this.state.table, name: ev.target.value } })\r\n    }\r\n    handleChangeGroupTitle=(ev)=>{\r\n        this.setState({ currTableColumn : {...this.props.tableColumn, title:ev.target.value} },()=>{\r\n            this.setState({ board: { ...this.props.board, tableColumns:\r\n                this.props.board.tableColumns.map(tableColumn=>\r\n                    tableColumn._id===this.state.currTableColumn._id?\r\n                    this.state.currTableColumn:tableColumn\r\n                )\r\n            } })\r\n        })\r\n    }\r\n    toggleFocusOnDiv=(bool)=>{\r\n        this.setState({isDivOnFocus:bool})\r\n    }\r\n    changeToContentEditable=(value)=>{\r\n        const {dragHandle} = this.props\r\n            let content = [];\r\n            if(value.taskKey==='name'){\r\n                content.push(\r\n                    <div \r\n                    className={`${this.props.isOpenTableColorModal?'':'table-name-wrapper'} ${this.editableGroupName&&this.editableGroupName.current&&(document.activeElement === this.editableGroupName.current)?'title-editable-focus':''}`}\r\n                    tabIndex='0' \r\n                    onClick={()=> this.toggleFocusOnDiv(true)} \r\n                    onBlur={()=>\r\n                        {\r\n                        this.toggleFocusOnDiv(false)\r\n                        this.props.closeTableColorModal()\r\n                        }   \r\n                    }  \r\n                    >\r\n\r\n                        <div className=\"table-actions\">\r\n                            {!this.props.isExpand?<CgExpand className=\"expand-btn\" onClick={()=>this.props.toggleExpandeTable(true)}/>:\r\n                            <AiOutlineShrink className=\"shrink-btn\" onClick={()=>this.props.toggleExpandeTable(false)}/> }\r\n                            <div  className=\"drag-btn\"  {...dragHandle.dragHandleProps}>\r\n                            <BiGridVertical/>\r\n                            </div>\r\n                        </div>\r\n                        <ContentEditable\r\n                        onFocus={this.focusText}\r\n                        className={`content-editable ${this.props.isOpenTableColorModal?'focus':''}`}\r\n                        innerRef={this.editableGroupName}\r\n                        html={this.state.table.name}\r\n                        disabled={false}  \r\n                        onChange={this.handleChangeGroupName}\r\n                        onBlur={() => {\r\n                            if (this.props.table.name === this.state.table.name) return\r\n                            const desc = `changed group name from \"${this.props.table.name}\" to \"${this.state.table.name}\"`\r\n                            const updatedTable = {\r\n                                ...this.props.table,\r\n                                name: this.state.table.name\r\n                            }\r\n                            this.props.onEditTable(updatedTable,desc)\r\n                        }}\r\n                        onKeyDown={(ev) => {\r\n                            if (ev.key === 'Enter') {\r\n                                ev.target.blur()\r\n                            }\r\n                        }}\r\n                        />\r\n                    </div>\r\n                )\r\n            }else{\r\n                content.push(\r\n                    <ContentEditable\r\n                        onFocus={this.focusText}\r\n                        className='content-editable'\r\n                        innerRef={this.editableGroupTitle}\r\n                        html={this.state.currTableColumn.title}\r\n                        disabled={false}  \r\n                        onChange={this.handleChangeGroupTitle}\r\n                        onBlur={() => {\r\n                             if (this.props.tableColumn.title === this.state.currTableColumn.title) return\r\n                            const desc = `changed the table column name from ${this.props.tableColumn.title} to ${this.state.currTableColumn.title}`\r\n                            const updatedBoard = {\r\n                                ...this.props.board,\r\n                                tableColumns: [...this.state.board.tableColumns],\r\n                                activities:[\r\n                                    {\r\n                                        desc: desc,\r\n                                        userId: this.props.loggedInUser._id,\r\n                                        createdAt: Date.now()\r\n                                    },\r\n                                    ...this.props.board.activities]\r\n                            }\r\n                            this.props.onEditBoard(updatedBoard)\r\n                        }}\r\n                        onKeyDown={(ev) => {\r\n                            if (ev.key === 'Enter') {\r\n                                ev.target.blur()\r\n                            }\r\n                        }}\r\n                    />\r\n                )\r\n            }\r\n            \r\n            return content;\r\n    }\r\n\r\n    \r\n    getTitleColumnStyle = (columnName) =>\r\n    {\r\n        switch (columnName) {\r\n            case 'checkBox':\r\n                return `checkBox-title ${this.state.isShownTitleOptionsModal?'updating':''}`\r\n            default:\r\n                return ''\r\n        }\r\n    }\r\n\r\n    toggleTitleOptionsModal=()=>{\r\n        this.setState({isShownTitleOptionsModal:!this.state.isShownTitleOptionsModal})\r\n    }    \r\n    closeTitleOptionsModal=()=>{\r\n        this.setState({isShownTitleOptionsModal:false})\r\n    }\r\n\r\n    render() {\r\n        const { board, tableColumn, table, IoMdNotifications } = this.props\r\n        if (!tableColumn) return <div>Loading....</div>\r\n        return (\r\n            <div key={tableColumn._id} className={`table-cell title-cell ${this.getTitleColumnStyle(tableColumn.taskKey)} ${getColumnWidth(tableColumn.taskKey)} ${this.state.isShownTitleOptionsModal?'updating':''}`} style={{color:`${table.color}` }}>\r\n                {tableColumn.taskKey===\"createdAt\"?\r\n                    <>\r\n                        <div className=\"date-title-wrapper\">\r\n                            <IoMdNotifications style={{ width: '18px', height: '18px' }}/>\r\n                            <span>{this.changeToContentEditable(tableColumn)}</span>\r\n                        </div>\r\n                        <TitleOptionsBtn \r\n                        toggleTitleOptionsModal={this.toggleTitleOptionsModal}\r\n                        isShownTitleOptionsModal={this.state.isShownTitleOptionsModal}\r\n                        closeTitleOptionsModal={this.closeTitleOptionsModal}\r\n                        tableColumn={this.props.tableColumn}\r\n                        table={this.props.table}\r\n                        onEditBoard={this.props.onEditBoard}\r\n                        onEditTable={this.props.onEditTable}\r\n                        onEditTask={this.props.onEditTask} \r\n                        />\r\n                    </>\r\n                    :\r\n                    <>\r\n                    {this.changeToContentEditable(tableColumn)}\r\n                    <TitleOptionsBtn \r\n                    toggleTitleOptionsModal={this.toggleTitleOptionsModal}\r\n                    isShownTitleOptionsModal={this.state.isShownTitleOptionsModal}\r\n                    closeTitleOptionsModal={this.closeTitleOptionsModal}\r\n                    tableColumn={this.props.tableColumn}\r\n                    table={this.props.table}\r\n                    onEditBoard={this.props.onEditBoard}\r\n                    onEditTable={this.props.onEditTable}\r\n                    onEditTask={this.props.onEditTask} \r\n                    />\r\n                    </>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loggedInUser: state.user.loggedInUser\r\n    }\r\n}\r\n\r\nexport const TableColumnPreview = connect(mapStateToProps)(_TableColumnPreview)","D:\\git-projects\\funday\\frontend\\src\\cmps\\PinCheckbox.jsx",["440","441"],"import React, { useState,useRef,useEffect } from 'react';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { updateUser } from '../store/actions/userActions'\r\n\r\nexport function PinCheckbox({workspace}){\r\n\r\n    const dispatch = useDispatch();\r\n    const loggedInUser = useSelector(state => state.user.loggedInUser);\r\n    const [checked, setChecked] = useState(loggedInUser.pinnedWorkspaces.includes(workspace._id))\r\n   \r\n\r\n    useEffect(() => {\r\n        setChecked(loggedInUser.pinnedWorkspaces.includes(workspace._id))\r\n    }, [workspace,loggedInUser.pinnedWorkspaces.length])\r\n\r\n\r\n    function handleChange(workspaceId) {\r\n        checked?unpinWorkspace(workspaceId):pinWorkspace(workspaceId)\r\n    }\r\n\r\n    function pinWorkspace(workspaceId) {\r\n        const newUser= {\r\n            ...loggedInUser,\r\n            pinnedWorkspaces:[\r\n                ...loggedInUser.pinnedWorkspaces,\r\n                workspaceId\r\n            ]\r\n        }\r\n        dispatch(updateUser(newUser))\r\n    }\r\n\r\n    function unpinWorkspace(workspaceId) {\r\n        const newUser= {\r\n            ...loggedInUser,\r\n            pinnedWorkspaces:loggedInUser.pinnedWorkspaces.filter(id=>id!==workspaceId)\r\n        }\r\n        dispatch(updateUser(newUser))\r\n    }\r\n\r\n    return(\r\n        <input type=\"checkbox\"\r\n                className=\"checkbox\"\r\n                defaultChecked={checked}\r\n                onChange={()=>handleChange(workspace._id)}\r\n        />\r\n    )\r\n}\r\n","D:\\git-projects\\funday\\frontend\\src\\cmps\\AvailableFoldersList.jsx",[],"D:\\git-projects\\funday\\frontend\\src\\cmps\\TaskStatus.jsx",[],"D:\\git-projects\\funday\\frontend\\src\\cmps\\TaskCheckBox.jsx",[],"D:\\git-projects\\funday\\frontend\\src\\cmps\\TaskText.jsx",[],"D:\\git-projects\\funday\\frontend\\src\\cmps\\TaskConversation.jsx",["442","443"],"import React, { useEffect,useState,useRef } from 'react';\r\nimport {  IoChatbubbleOutline, } from 'react-icons/io5'\r\nimport { updateTaskConversation } from '../store/actions/workspaceActions'\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nexport function TaskConversation({openConversationModal,task,table}) {\r\n    const [conversations,setConversations] = useState(task.conversations)\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        setConversations(task.conversations)\r\n    }, [task])\r\n\r\n    return (\r\n        <>\r\n            <div className='task-conversation-wrapper'>\r\n                <IoChatbubbleOutline className=\"conversation-bubble\" \r\n                onClick={()=>{\r\n                    dispatch(updateTaskConversation(\r\n                        {\r\n                            taskId:task._id,\r\n                            tableId:table._id\r\n                        }\r\n                    ))\r\n                    openConversationModal()\r\n                }}\r\n                 />\r\n                {conversations.length>0&&<div className=\"conversations-count\">\r\n                    {conversations.length}\r\n                 </div>}\r\n                <span className=\"label-text arrow-down\">Start conversation</span>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","D:\\git-projects\\funday\\frontend\\src\\cmps\\OwnerModal.jsx",[],"D:\\git-projects\\funday\\frontend\\src\\data\\stickers.js",[],"D:\\git-projects\\funday\\frontend\\src\\cmps\\StatusLabelPreview.jsx",[],"D:\\git-projects\\funday\\frontend\\src\\cmps\\UpdateLabelName.jsx",[],"D:\\git-projects\\funday\\frontend\\src\\cmps\\ActivitiesModal.jsx",[],"D:\\git-projects\\funday\\frontend\\src\\services\\socketService.js",[],"D:\\git-projects\\funday\\frontend\\src\\cmps\\task-cells-width.js",[],"D:\\git-projects\\funday\\frontend\\src\\cmps\\TaskNumbersColumn.jsx",[],"D:\\git-projects\\funday\\frontend\\src\\cmps\\DropdownModal.jsx",[],"D:\\git-projects\\funday\\frontend\\src\\cmps\\DropdownEditLabelPreview.jsx",["444","445"],"import React, { useEffect,useState,useRef } from 'react';\r\nimport userService from '../services/userService';\r\nimport { RiCloseCircleFill } from 'react-icons/ri'\r\n\r\nexport function DropdownEditLabelPreview({label,onEditBoardLabel,onRemoveLabelFromBoard}) {\r\n\r\n    const [isUpdating , setIsUpdating ] = useState(false);\r\n    const [newLabel , setNewLabel ] = useState(label);\r\n\r\n    useEffect(() => {\r\n        setNewLabel(label)\r\n    }, [label])\r\n\r\n    return(\r\n        <div className=\"edit-label-wrapper\">\r\n        {isUpdating?\r\n            <input \r\n            type=\"text\" \r\n            value={newLabel.name} \r\n            onChange={(e)=>setNewLabel({...label,name:e.target.value})}\r\n            onBlur={()=>{\r\n                setIsUpdating(false)\r\n                //updating the board label array\r\n                onEditBoardLabel(label,newLabel)\r\n            }}\r\n            onKeyDown={(e) => {\r\n                if (e.key === 'Enter') {\r\n                    if(e.target.value.trim().length<1){\r\n                        setNewLabel(label)\r\n                        setIsUpdating(false)\r\n                        return\r\n                    }\r\n                    e.target.blur()\r\n                }\r\n            }}\r\n            />\r\n            :<span className='dropdown-baord-label' onClick={()=>setIsUpdating(true)}>\r\n                {newLabel.name}\r\n            </span>\r\n        }\r\n            <span onClick={()=>onRemoveLabelFromBoard(newLabel)}><RiCloseCircleFill className=\"close-btn\"/></span>\r\n        </div>\r\n    )\r\n}","D:\\git-projects\\funday\\frontend\\src\\cmps\\TaskTimeline.jsx",["446"],"import React, { useEffect,useState,useRef } from 'react';\r\nimport { RiCloseCircleFill } from 'react-icons/ri'\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\n\r\nexport function TaskTimeline({task,taskKey,onEditTask,table}) {\r\n    const [startDate, setStartDate] = useState(task.timeline.from?new Date(task.timeline.from):new Date());\r\n    const [endDate, setEndDate] = useState(task.timeline.to?new Date(task.timeline.to):null);\r\n    const [isShown, setIsShown] = useState(false);\r\n    const [timeline, setTimeline] = useState('');\r\n    const [diffDays, setDiffDays] = useState('');\r\n    const [isMouseEnter, setIsmouseEnter] = useState('');\r\n\r\n    const datePickerWrapperEl = useRef()\r\n\r\n    const onChange = dates => {\r\n        const [start, end] = dates;\r\n        setStartDate(start);\r\n        setEndDate(end);\r\n    };\r\n        \r\n    function updateTimeline() {\r\n        if(endDate===null){\r\n            let f = new Intl.DateTimeFormat('en');\r\n            let a = f.formatToParts(startDate);\r\n            const day =  a.filter(item=>item.type===\"day\")[0].value\r\n            const monthNumber =parseInt(a.filter(item=>item.type===\"month\")[0].value)\r\n            const month = getMonthName(monthNumber)\r\n            setTimeline(`${month} ${day}`)\r\n        }else{\r\n            let f = new Intl.DateTimeFormat('en');\r\n            let a = f.formatToParts(startDate);\r\n            let b = f.formatToParts(endDate);\r\n            const day1 = a.filter(item=>item.type===\"day\")[0].value\r\n            const day2 = b.filter(item=>item.type===\"day\")[0].value\r\n            const monthNumber1 = parseInt(a.filter(item=>item.type===\"month\")[0].value)\r\n            const monthNumber2 = parseInt(b.filter(item=>item.type===\"month\")[0].value)\r\n            const month1 = getMonthName(monthNumber1)\r\n            const month2 = getMonthName(monthNumber2)\r\n     \r\n            if(month1===month2){\r\n                setTimeline(`${month1} ${day1} - ${day2}`)\r\n            }else{\r\n                setTimeline(`${month1} ${day1} - ${month2} ${day2}`)\r\n            }\r\n        }\r\n        daysBetween(startDate,endDate)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(endDate){\r\n            setTimeline('')\r\n\r\n            const updatedTask = {\r\n                ...task,\r\n                timeline: {\r\n                    from : startDate.getTime(),\r\n                    to : endDate.getTime()\r\n                }\r\n            }\r\n            const desc = `added new timeline inside \"${task.name}\" `\r\n            onEditTask(table,updatedTask,desc)\r\n            updateTimeline()\r\n        }\r\n    }, [endDate])\r\n    \r\n\r\n    function daysBetween(startDate,endDate) {\r\n        if(endDate){\r\n            const differenceTime = endDate.getTime()-startDate.getTime();\r\n            setDiffDays(Math.round(differenceTime / (1000 * 3600 * 24))+1)\r\n        }else{\r\n            setDiffDays(1)   \r\n        }\r\n      \r\n    }\r\n\r\n    function getMonthName(month){\r\n        switch(month) {\r\n            case 1:\r\n              return 'Jan';\r\n            case 2:\r\n              return 'Feb';\r\n            case 3:\r\n              return 'Mar';\r\n            case 4:\r\n              return 'Apr';\r\n            case 5:\r\n              return 'May';\r\n            case 6:\r\n              return 'June';\r\n            case 7:\r\n              return 'July';\r\n            case 8:\r\n              return 'Aug';\r\n            case 9:\r\n              return 'Sept';\r\n            case 10:\r\n              return 'Oct';\r\n            case 11:\r\n              return 'Nov';\r\n            case 12:\r\n              return 'Dec';\r\n            default:\r\n              return 'foo';\r\n        }\r\n    }\r\n\r\n    function removeTimeline() {\r\n        setStartDate(new Date());\r\n        setEndDate(null);\r\n        const updatedTask = {\r\n            ...task,\r\n            timeline: {\r\n                from : '',\r\n                to : ''\r\n            }\r\n        }\r\n        const desc = `removed timeline from \"${task.name}\" `\r\n        onEditTask(table,updatedTask,desc)\r\n    }\r\n\r\n    useEffect(() => {\r\n       if(isShown&&datePickerWrapperEl&&datePickerWrapperEl.current){\r\n        datePickerWrapperEl.current.focus()\r\n       }\r\n    }, [isShown])\r\n\r\n    return (\r\n        <>\r\n        <div className=\"timeline-task-container\" onClick={()=>setIsShown(p=>!p)}\r\n        onMouseEnter={()=>setIsmouseEnter(true)}\r\n        onMouseLeave={()=>setIsmouseEnter(false)}\r\n        >\r\n            <div className={`timeline-content ${task[taskKey].from||task[taskKey].to?'dates':'empty'} ${isShown?'updating':''}`}>\r\n                {(task[taskKey].from||task[taskKey].to)&&<div>\r\n                    {\r\n                        isMouseEnter?diffDays+'d':timeline\r\n                    }\r\n                </div>}\r\n            </div>\r\n\r\n            {(task[taskKey].from||task[taskKey].to)&&\r\n                <RiCloseCircleFill className='timeline-delete-btn' onClick={removeTimeline}/>\r\n            }\r\n        </div>\r\n\r\n        {isShown&&\r\n            <div className='datePicker-wrapper' ref={datePickerWrapperEl} tabIndex=\"0\" onBlur={()=>setIsShown(false)}>\r\n                <DatePicker\r\n                closeOnScroll={true}\r\n                selected={startDate}\r\n                onChange={onChange}\r\n                startDate={startDate}\r\n                endDate={endDate}\r\n                selectsRange\r\n                inline\r\n                />\r\n            </div>\r\n        }\r\n\r\n        </>\r\n    )\r\n}","D:\\git-projects\\funday\\frontend\\src\\cmps\\TaskDate.jsx",["447","448"],"import React, { useEffect,useState,useRef,forwardRef } from 'react';\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\n\r\nexport function TaskDate({task,taskKey,onEditTask,table}) {\r\n    const [startDate, setStartDate] = useState(task.createdAt?new Date(task.createdAt):new Date());\r\n\r\n    useEffect(() => {\r\n      if( startDate.getTime() !== task.createdAt){\r\n        const updatedTask = {\r\n          ...task,\r\n          createdAt: startDate.getTime()\r\n        }\r\n        const desc = `changed date inside \"${task.name}\" `\r\n        onEditTask(table,updatedTask,desc)\r\n      }\r\n    }, [startDate])\r\n\r\n    function getMonthName(month){\r\n        switch(month) {\r\n            case 1:\r\n              return 'Jan';\r\n            case 2:\r\n              return 'Feb';\r\n            case 3:\r\n              return 'Mar';\r\n            case 4:\r\n              return 'Apr';\r\n            case 5:\r\n              return 'May';\r\n            case 6:\r\n              return 'June';\r\n            case 7:\r\n              return 'July';\r\n            case 8:\r\n              return 'Aug';\r\n            case 9:\r\n              return 'Sept';\r\n            case 10:\r\n              return 'Oct';\r\n            case 11:\r\n              return 'Nov';\r\n            case 12:\r\n              return 'Dec';\r\n            default:\r\n              return 'foo';\r\n        }\r\n    }\r\n\r\n    const getDateValue=(value)=>{\r\n      let dayNum =value.substr(0,3)\r\n      let monthNum = parseInt(value.substr(3))\r\n      if(monthNum<10){\r\n        monthNum = parseInt(value.substr(4))\r\n      }\r\n      if(value.substr(0,1)===\"0\"){\r\n        dayNum = value.substr(1,2)\r\n      }\r\n      const month = getMonthName(monthNum)\r\n      return dayNum+month\r\n    }\r\n\r\n    const ExampleCustomInput = forwardRef(\r\n      ({ value, onClick }, ref) => (\r\n        <button className=\"custom-date-input\" onClick={onClick} ref={ref}>\r\n          {getDateValue(value)}\r\n        </button>\r\n      ),\r\n    );\r\n\r\n    return (\r\n        <DatePicker\r\n        className=\"task-date-picker\"\r\n        dateFormat=\"dd MM\"\r\n        selected={startDate}\r\n        onChange={date => setStartDate(date)}\r\n        customInput={<ExampleCustomInput />}\r\n        />\r\n    )\r\n}","D:\\git-projects\\funday\\frontend\\src\\cmps\\TitleOptionsBtn.jsx",["449","450"],"import React, { useEffect,useState,useRef } from 'react';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { TiArrowSortedDown } from 'react-icons/ti'\r\nimport { VscTrash } from 'react-icons/vsc'\r\nimport { BiHide } from 'react-icons/bi'\r\n\r\nexport function TitleOptionsBtn({toggleTitleOptionsModal,isShownTitleOptionsModal,closeTitleOptionsModal,tableColumn,onEditBoard,table,onEditTable,onEditTask }) {\r\n\r\n    const loggedInUser = useSelector(state => state.user.loggedInUser);\r\n    const board = useSelector(state => state.workspace.currBoard);\r\n    const divEl = useRef()\r\n\r\n    const getDefaultValue =(taskKey)=>{\r\n        switch (taskKey) {\r\n            case 'owner':\r\n            case 'dropdown':\r\n            case 'tags':\r\n                return [] \r\n            case 'status':\r\n                return {\r\n                    name : \"\",\r\n                    color : \"rgb(180, 182, 188)\"\r\n                }\r\n            case 'timeline':\r\n                return {\r\n                    from : \"\",\r\n                    to : \"\"\r\n                } \r\n            case 'lastUpdated':\r\n                return  {\r\n                    byUser : '',\r\n                    date :''\r\n                }\r\n            default:\r\n                return null;\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(isShownTitleOptionsModal&&divEl&&divEl.current){\r\n            divEl.current.focus()\r\n        }\r\n    }, [isShownTitleOptionsModal])\r\n\r\n    const deleteColumn=()=>{\r\n        let newTablesArray = []  //array for the updated tables\r\n        const desc = `removed '${tableColumn.taskKey}' column`\r\n\r\n        board.tables.forEach(table => {\r\n            const newTable = {\r\n                ...table,\r\n                tasks:table.tasks.flatMap((task)=>\r\n                    [{...task,[`${tableColumn.taskKey}`]:getDefaultValue(tableColumn.taskKey)}]\r\n                )\r\n            }\r\n            newTablesArray.push(newTable)\r\n        })\r\n         \r\n\r\n        const updatedBoard = {\r\n            ...board,\r\n            tables:board.tables.map(tableObj => newTablesArray.find(newTableObj => newTableObj._id === tableObj._id) || tableObj),\r\n            tableColumns: board.tableColumns.filter(column=>column._id!==tableColumn._id),\r\n            activities:[\r\n                {\r\n                    desc: desc,\r\n                    userId: loggedInUser._id,\r\n                    createdAt: Date.now()\r\n                },\r\n                ...board.activities]\r\n        }\r\n       \r\n        onEditBoard(updatedBoard)\r\n        toggleTitleOptionsModal()\r\n    }\r\n\r\n   const hideColumn=()=>{\r\n    const desc = `hide '${tableColumn.taskKey}' column`\r\n    const updatedBoard = {\r\n        ...board,\r\n        tableColumns: board.tableColumns.filter(column=>column._id!==tableColumn._id),\r\n        activities:[\r\n            {\r\n                desc: desc,\r\n                userId: loggedInUser._id,\r\n                createdAt: Date.now()\r\n            },\r\n            ...board.activities]\r\n    }\r\n    onEditBoard(updatedBoard)\r\n    toggleTitleOptionsModal()\r\n}\r\n\r\n    return(\r\n        <div className='title-cell-options-wrapper'>\r\n            <div \r\n            className={`title-cell-options-btn ${isShownTitleOptionsModal?'updating':''}`}\r\n            onClick={toggleTitleOptionsModal}\r\n            >\r\n                <TiArrowSortedDown/>\r\n            </div>\r\n            {isShownTitleOptionsModal&&\r\n                <div \r\n                className='modal-default-style title-cell-options-modal' \r\n                ref={divEl}\r\n                tabIndex='0'\r\n                onBlur={()=>{\r\n                    closeTitleOptionsModal()\r\n                }}\r\n                >\r\n                    <div className=\"delete-btn modal-btn\" onClick={hideColumn}>\r\n                        <BiHide className='icon'/><span>Hide column</span>\r\n                    </div>\r\n                    <div className=\"delete-btn modal-btn\" onClick={deleteColumn}>\r\n                        <VscTrash className='icon'/><span>Delete column</span>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n    \r\n}","D:\\git-projects\\funday\\frontend\\src\\cmps\\MultipleActionsModal.jsx",[],"D:\\git-projects\\funday\\frontend\\src\\data\\getTimePass.js",[],"D:\\git-projects\\funday\\frontend\\src\\cmps\\NotificationsModal.jsx",["451"],"import React, { useEffect,useState,useRef } from 'react';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { BiUserCircle } from \"react-icons/bi\";\r\nimport { IoIosCheckmarkCircleOutline } from \"react-icons/io\";\r\nimport { VscTrash } from \"react-icons/vsc\";\r\nimport { BsThreeDots } from \"react-icons/bs\";\r\nimport { getTime } from '../data/getTimePass'\r\nimport { \r\n    updateTaskConversation,\r\n    toggleTaskConversationModal,\r\n    updateCurrWorkspace,\r\n    updateCurrBoard\r\n} from '../store/actions/workspaceActions'\r\nimport { markAsRead, toggleMarkAsRead, removeNotification, markAllAsRead, removeAllNotifications } from '../store/actions/userActions'\r\n\r\nexport function NotificationsModal() {\r\n\r\n    const loggedInUser = useSelector(state => state.user.loggedInUser);\r\n    const [filteredNotidications, setFilteredNotidications] = useState(loggedInUser.notifications?loggedInUser.notifications:[])\r\n    const [isOpenModal, setIsOpenModal] = useState(false)\r\n    const [currView, setCurrView] = useState('Assigned to me')\r\n    const dispatch = useDispatch()\r\n\r\n    const headerTitles = [\r\n        'All',\r\n        'Unread',\r\n        'I was mentioned',\r\n        'Assigned to me'\r\n    ]\r\n    const [activeIdx, setActiveIdx] = useState(headerTitles.length-1)\r\n\r\n    function onMarkAllAsRead() {\r\n        dispatch(markAllAsRead(loggedInUser))\r\n    }\r\n\r\n    function onRemoveAll() {\r\n        dispatch(removeAllNotifications(loggedInUser))\r\n    }\r\n\r\n    useEffect(() => {\r\n        const onFilterNotifications = () => {\r\n            switch (currView) {\r\n                case 'Unread':\r\n                    setFilteredNotidications(\r\n                        loggedInUser.notifications.filter(notification=>\r\n                            notification.isRead === false\r\n                        )\r\n                    )\r\n                    break;\r\n                case 'I was mentioned':\r\n                    setFilteredNotidications(\r\n                        loggedInUser.notifications.filter(notification=>\r\n                            notification.section === 'mentioned'\r\n                        )\r\n                    )\r\n                    break;   \r\n                case 'Assigned to me':\r\n                    setFilteredNotidications(\r\n                        loggedInUser.notifications.filter(notification=>\r\n                            notification.section === 'assigned'\r\n                        )\r\n                    )\r\n                    break;                    \r\n                default:\r\n                    setFilteredNotidications(loggedInUser.notifications)\r\n                    break;\r\n            }\r\n    \r\n        }\r\n        onFilterNotifications()\r\n    }, [currView,loggedInUser.notifications])\r\n\r\n    \r\n    return (\r\n        <>\r\n            <div className=\"title-container\">\r\n                <div className=\"modal-title big\">Notifications</div>\r\n                <div className=\"more-options-wrapper\" onClick={()=>setIsOpenModal(true)}>\r\n                    <div className={`more-options-btn ${isOpenModal?'active':''}`}\r\n                    onClick={(e)=>{\r\n                        e.stopPropagation()\r\n                        setIsOpenModal(curr=>!curr)\r\n                    }}\r\n                    >\r\n                        <BsThreeDots className=\"icon BsThreeDots\"/>\r\n                    {\r\n                        isOpenModal&&<div className='modal-default-style notifications-option-modal'>\r\n                            <div className=\"modal-btn\" onClick={onMarkAllAsRead}>\r\n                                <IoIosCheckmarkCircleOutline className=\"icon\"/>\r\n                                <span>Mark all as read</span>\r\n                            </div>\r\n                            <div className=\"modal-btn\" onClick={onRemoveAll}>\r\n                                <VscTrash className=\"icon\"/>\r\n                                <span>Delete all</span>\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n                </div>\r\n            <div className=\"header-navigation notifications-header\">\r\n                {headerTitles.map((title,idx)=>\r\n                    <div key={idx} className={`title ${activeIdx===idx?'active':''}`} onClick={()=>{\r\n                        setActiveIdx(idx)\r\n                        setCurrView(title)\r\n                    }}>{title}</div>\r\n                )}\r\n            </div>\r\n            <div className=\"modal-title\">Last 7 Days</div>\r\n            <div className=\"notification-list\">\r\n                {\r\n                    filteredNotidications&&filteredNotidications.length>0?\r\n                    filteredNotidications.map((notification,idx)=>\r\n                    <NotificationPreview notification={notification} idx={idx}/>\r\n                    )\r\n                    :\r\n                    <div>No notifications</div>\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nfunction NotificationPreview({notification,idx}) {\r\n\r\n    const workspaces = useSelector(state => state.workspace.workspaces);\r\n    const users = useSelector(state => state.user.users);\r\n    const loggedInUser = useSelector(state => state.user.loggedInUser);\r\n    const dispatch = useDispatch()\r\n\r\n    function getUserById(userId){\r\n        const user =  users.filter(user=>\r\n        user._id===userId)[0]\r\n        return user\r\n    }\r\n\r\n    function onOpenTaskConversation() {\r\n        //update notification isRead:true \r\n        dispatch(markAsRead(loggedInUser,notification._id))\r\n   \r\n        //open task conversation\r\n        const workspace =workspaces.filter(workspace=>workspace._id===notification.conversationLocation.WorkspaceId)[0]\r\n        if(workspace){\r\n            dispatch( updateCurrWorkspace(workspace) )\r\n            const board = workspace.boards.filter(board=>board._id===notification.conversationLocation.boardId)[0]\r\n            if(board){\r\n                dispatch( updateCurrBoard(board) )\r\n                dispatch(updateTaskConversation(\r\n                    {\r\n                        taskId:notification.conversationLocation.taskId,\r\n                        tableId:notification.conversationLocation.tableId,\r\n                    }\r\n                ))\r\n                dispatch(toggleTaskConversationModal())\r\n            }\r\n        }\r\n    }\r\n\r\n    function toggleIsRead() {\r\n        dispatch(toggleMarkAsRead(loggedInUser,notification._id))\r\n    }\r\n\r\n    function onRemoveNotification() {\r\n        dispatch(removeNotification(loggedInUser,notification._id))\r\n    }\r\n\r\n\r\n    return (\r\n        <div key={idx} className={`notification-preview ${!notification.isRead?'unread':''}`} onClick={onOpenTaskConversation}>\r\n            <div className=\"notification-content-wrapper\">\r\n               {notification.from&& <div className=\"user-img\" style={{backgroundImage:`url(${getUserById(notification.from).avatar})`}}></div>}\r\n                <div className=\"notification-content-wrapper\">\r\n                    <div className=\"header\">\r\n                        {notification.from&&<div className=\"sender-name capitalize\">{getUserById(notification.from).username}</div>}\r\n                        <div className='date'>{getTime(notification.createdAt)}</div>\r\n                    </div>\r\n                    <div className=\"main\">\r\n                        <div className=\"colored-txt\"><BiUserCircle className=\"icon\"/><div className=\"capitalize\">{notification.section}</div></div> \r\n                        <div>{notification.content}</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"options\" onClick={(e)=>e.stopPropagation()}>\r\n                <div className='options-icon-wrapper' onClick={toggleIsRead}>\r\n                    <IoIosCheckmarkCircleOutline className=\"icon\"/>\r\n                    <span class=\"label-text arrow-up notification\">{notification.isRead?'Mark as unread':'Mark as read'}</span>\r\n                </div>\r\n                <div className='options-icon-wrapper' onClick={onRemoveNotification}>\r\n                    <VscTrash className=\"icon\"/>\r\n                    <span class=\"label-text arrow-up notification\">Delete</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n    \r\n}","D:\\git-projects\\funday\\frontend\\src\\cmps\\Loading.jsx",[],"D:\\git-projects\\funday\\frontend\\src\\data\\dynamicFaIcon.js",[],"D:\\git-projects\\funday\\frontend\\src\\cmps\\HomeBackground.jsx",[],"D:\\git-projects\\funday\\frontend\\src\\cmps\\Login.jsx",["452"],"import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Route , withRouter} from 'react-router-dom';\r\nimport { GoogleOauth } from './GoogleOauth'\r\nimport { TiUser } from \"react-icons/ti\";\r\nimport { MdEmail } from \"react-icons/md\";\r\nimport { IoMdAlert } from \"react-icons/io\";\r\nimport { RiLockPasswordFill } from \"react-icons/ri\";\r\nimport { loadWorkspaces} from '../store/actions/workspaceActions'\r\nimport { Loading } from './Loading'\r\n\r\nimport {\r\n  loadUsers,\r\n  removeUser,\r\n  login,\r\n  logout,\r\n  signup,\r\n  guestLogin\r\n} from '../store/actions/userActions'\r\n\r\nclass _Login extends Component {\r\n  state = {\r\n    isLoading: false,\r\n    isErrLogin: false,\r\n    errMsg: '',\r\n    loginCred: {\r\n      email: '',\r\n      password: '',\r\n    },\r\n    signupCred: {\r\n      email: '',\r\n      password: '',\r\n      username: '',\r\n    },\r\n    section: true,\r\n  }\r\n\r\n  loginHandleChange = (ev) => {\r\n    const { name, value } = ev.target\r\n    this.setState((prevState) => ({\r\n      loginCred: {\r\n        ...prevState.loginCred,\r\n        [name]: value,\r\n      },\r\n    }))\r\n  }\r\n\r\n  signupHandleChange = (ev) => {\r\n    const { name, value } = ev.target\r\n    this.setState((prevState) => ({\r\n      signupCred: {\r\n        ...prevState.signupCred,\r\n        [name]: value,\r\n      },\r\n    }))\r\n  }\r\n\r\n  doLogin = async (ev) => {\r\n    ev.preventDefault()\r\n    try {\r\n      const { email, password } = this.state.loginCred\r\n      const userCreds = { email, password }\r\n      await this.props.login(userCreds);\r\n      this.setState({ isLoading: true })\r\n      await this.props.loadWorkspaces()\r\n      this.setState({ isLoading: false })\r\n      if (this.props.loggedInUser) this.props.history.push(`/boards`)\r\n\r\n    }catch (err) {\r\n      this.setState({ isErrLogin: true, errMsg: 'Invalid email or password' })\r\n        setTimeout(() => {\r\n                this.setState({ isErrLogin: false })\r\n        }, 2000);\r\n    }\r\n  }\r\n\r\n  doSignup = async (ev) => {\r\n    ev.preventDefault()\r\n    try {\r\n      const { email, password, username } = this.state.signupCred\r\n      const signupCreds = { email, password, username }\r\n      await this.props.signup(signupCreds)\r\n      this.setState({ isLoading: true })\r\n      await this.props.loadWorkspaces()\r\n      this.setState({ isLoading: false })\r\n      if (this.props.loggedInUser) this.props.history.push(`/boards`)\r\n\r\n    }catch (err) {\r\n      this.setState({ isErrLogin: true, errMsg: 'All inputs are required!' })\r\n        setTimeout(() => {\r\n                this.setState({ isErrLogin: false })\r\n        }, 2000);\r\n    }\r\n  }\r\n\r\n  removeUser = (userId) => {\r\n    this.props.removeUser(userId)\r\n  }\r\n\r\n  onSignup = () => {\r\n    this.setState({ errMsg: '' })\r\n    this.setState({ section: !this.state.section })\r\n  }\r\n\r\n  render() {\r\n    const {isErrLogin} = this.state\r\n\r\n    let signupSection = (\r\n      <form onSubmit={this.doSignup} className='signup-container'>\r\n        <h3>Register</h3>\r\n        {isErrLogin&&<div \r\n        className=\"alert alert-danger\"\r\n        role=\"alert\">\r\n           <IoMdAlert className='margin-right'/>{this.state.errMsg}\r\n        </div>}\r\n        <div className=\"form-group\">\r\n          <label><TiUser/></label>\r\n          <input \r\n          type=\"text\" \r\n          className=\"form-control\" \r\n          placeholder=\"User name\" \r\n          name='username'\r\n          value={this.state.signupCred.username}\r\n          onChange={this.signupHandleChange}\r\n          maxLength=\"10\"\r\n          />\r\n        </div>\r\n\r\n        {/* <div className=\"form-group\">\r\n          <label>First name</label>\r\n          <input \r\n          type=\"text\" \r\n          className=\"form-control\" \r\n          placeholder=\"First name\" \r\n          name='username'\r\n          value={this.state.signupCred.username}\r\n          onChange={this.signupHandleChange}\r\n          maxLength=\"10\"\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label>Last name</label>\r\n          <input \r\n          type=\"text\" \r\n          className=\"form-control\" \r\n          placeholder=\"Last name\" \r\n          name='username'\r\n          value={this.state.signupCred.username}\r\n          onChange={this.signupHandleChange}\r\n          maxLength=\"10\"\r\n          />\r\n        </div> */}\r\n\r\n        <div className=\"form-group\">\r\n          <label><MdEmail/></label>\r\n          <input \r\n          type=\"email\" \r\n          className=\"form-control\" \r\n          placeholder=\"Enter email\"\r\n          name='email'\r\n          value={this.state.signupCred.email}\r\n          onChange={this.signupHandleChange} \r\n          />\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <label><RiLockPasswordFill/></label>\r\n          <input \r\n          type=\"password\" \r\n          className=\"form-control\" \r\n          placeholder=\"Enter password\" \r\n          name='password'\r\n          value={this.state.signupCred.password}\r\n          onChange={this.signupHandleChange}\r\n          />\r\n        </div>\r\n\r\n        <button type=\"submit\" className=\"btn btn-login-blue btn-lg btn-block\">Register</button>\r\n        <p className=\"text-right\">\r\n            Already registered <span className=\"small-text\" onClick={this.onSignup}>log in?</span>\r\n        </p>\r\n      </form>\r\n    )\r\n    let loginSection = (\r\n      <form onSubmit={this.doLogin} className='login-container'>\r\n        <h3>Log in</h3>\r\n        {isErrLogin&&<div \r\n        className=\"alert alert-danger\"\r\n        role=\"alert\">\r\n           <IoMdAlert className='margin-right'/>{this.state.errMsg}\r\n        </div>}\r\n        <div className=\"form-group\">\r\n          <label><MdEmail/></label>\r\n          <input\r\n          type=\"email\" \r\n          className=\"form-control\" \r\n          placeholder=\"Enter email\" \r\n          name='email'\r\n          value={this.state.loginCred.email}\r\n          onChange={this.loginHandleChange}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label><RiLockPasswordFill/></label>\r\n          <input \r\n          type=\"password\" \r\n          className=\"form-control\" \r\n          placeholder=\"Enter password\" \r\n          name='password'\r\n          value={this.state.loginCred.password}\r\n          onChange={this.loginHandleChange}\r\n          />\r\n        </div>\r\n\r\n        <button type=\"submit\" className=\"btn btn-login-blue btn-lg btn-block\">Sign in</button>\r\n        <button onClick={this.onSignup} className=\"btn btn-login-blue btn-lg btn-block\">Sign up</button>\r\n\r\n      </form>\r\n    )\r\n\r\n    const { loggedInUser } = this.props\r\n\r\n    if (this.state.isLoading) return <Loading txt='SIGNING IN.. PLEASE WAIT'/>\r\n    return (\r\n      <div className='login-section slide-left-login'>\r\n\r\n        <div className=\"outer\">\r\n\r\n          <div className=\"inner\">\r\n              {!loggedInUser && this.state.section ? loginSection : signupSection}\r\n              <div className=\"google-oauth\">\r\n                <GoogleOauth className=\"google-oauth-btn\"/>\r\n              </div>\r\n          </div>\r\n          \r\n        </div>\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    users: state.user.users,\r\n    loggedInUser: state.user.loggedInUser,\r\n    isLoading: state.system.isLoading,\r\n  }\r\n}\r\nconst mapDispatchToProps = {\r\n  login,\r\n  logout,\r\n  signup,\r\n  removeUser,\r\n  loadUsers,\r\n  guestLogin,\r\n  loadWorkspaces\r\n}\r\n\r\nexport const Login = connect(mapStateToProps, mapDispatchToProps)( withRouter(_Login))\r\n",{"ruleId":"453","severity":1,"message":"454","line":1,"column":17,"nodeType":"455","messageId":"456","endLine":1,"endColumn":26},{"ruleId":"453","severity":1,"message":"457","line":1,"column":27,"nodeType":"455","messageId":"456","endLine":1,"endColumn":35},{"ruleId":"453","severity":1,"message":"458","line":1,"column":36,"nodeType":"455","messageId":"456","endLine":1,"endColumn":42},{"ruleId":"453","severity":1,"message":"459","line":6,"column":10,"nodeType":"455","messageId":"456","endLine":6,"endColumn":23},{"ruleId":"460","replacedBy":"461"},{"ruleId":"462","replacedBy":"463"},{"ruleId":"453","severity":1,"message":"464","line":100,"column":12,"nodeType":"455","messageId":"456","endLine":100,"endColumn":25},{"ruleId":"453","severity":1,"message":"465","line":100,"column":27,"nodeType":"455","messageId":"456","endLine":100,"endColumn":43},{"ruleId":"453","severity":1,"message":"466","line":6,"column":10,"nodeType":"455","messageId":"456","endLine":6,"endColumn":21},{"ruleId":"453","severity":1,"message":"467","line":7,"column":10,"nodeType":"455","messageId":"456","endLine":7,"endColumn":19},{"ruleId":"453","severity":1,"message":"468","line":12,"column":10,"nodeType":"455","messageId":"456","endLine":12,"endColumn":31},{"ruleId":"453","severity":1,"message":"469","line":22,"column":5,"nodeType":"455","messageId":"456","endLine":22,"endColumn":19},{"ruleId":"453","severity":1,"message":"470","line":23,"column":5,"nodeType":"455","messageId":"456","endLine":23,"endColumn":13},{"ruleId":"453","severity":1,"message":"471","line":24,"column":5,"nodeType":"455","messageId":"456","endLine":24,"endColumn":13},{"ruleId":"453","severity":1,"message":"472","line":25,"column":5,"nodeType":"455","messageId":"456","endLine":25,"endColumn":11},{"ruleId":"453","severity":1,"message":"473","line":30,"column":5,"nodeType":"455","messageId":"456","endLine":30,"endColumn":19},{"ruleId":"453","severity":1,"message":"474","line":32,"column":5,"nodeType":"455","messageId":"456","endLine":32,"endColumn":22},{"ruleId":"453","severity":1,"message":"475","line":35,"column":10,"nodeType":"455","messageId":"456","endLine":35,"endColumn":25},{"ruleId":"453","severity":1,"message":"476","line":36,"column":10,"nodeType":"455","messageId":"456","endLine":36,"endColumn":18},{"ruleId":"453","severity":1,"message":"477","line":37,"column":10,"nodeType":"455","messageId":"456","endLine":37,"endColumn":17},{"ruleId":"453","severity":1,"message":"478","line":38,"column":10,"nodeType":"455","messageId":"456","endLine":38,"endColumn":22},{"ruleId":"453","severity":1,"message":"479","line":39,"column":10,"nodeType":"455","messageId":"456","endLine":39,"endColumn":27},{"ruleId":"453","severity":1,"message":"480","line":41,"column":10,"nodeType":"455","messageId":"456","endLine":41,"endColumn":22},{"ruleId":"453","severity":1,"message":"481","line":43,"column":10,"nodeType":"455","messageId":"456","endLine":43,"endColumn":26},{"ruleId":"453","severity":1,"message":"459","line":44,"column":10,"nodeType":"455","messageId":"456","endLine":44,"endColumn":23},{"ruleId":"453","severity":1,"message":"482","line":523,"column":28,"nodeType":"455","messageId":"456","endLine":523,"endColumn":40},{"ruleId":"453","severity":1,"message":"483","line":523,"column":41,"nodeType":"455","messageId":"456","endLine":523,"endColumn":50},{"ruleId":"453","severity":1,"message":"458","line":1,"column":36,"nodeType":"455","messageId":"456","endLine":1,"endColumn":42},{"ruleId":"453","severity":1,"message":"454","line":1,"column":17,"nodeType":"455","messageId":"456","endLine":1,"endColumn":26},{"ruleId":"453","severity":1,"message":"458","line":1,"column":36,"nodeType":"455","messageId":"456","endLine":1,"endColumn":42},{"ruleId":"453","severity":1,"message":"484","line":2,"column":10,"nodeType":"455","messageId":"456","endLine":2,"endColumn":21},{"ruleId":"453","severity":1,"message":"485","line":2,"column":10,"nodeType":"455","messageId":"456","endLine":2,"endColumn":24},{"ruleId":"453","severity":1,"message":"486","line":13,"column":8,"nodeType":"455","messageId":"456","endLine":13,"endColumn":14},{"ruleId":"453","severity":1,"message":"484","line":2,"column":10,"nodeType":"455","messageId":"456","endLine":2,"endColumn":21},{"ruleId":"453","severity":1,"message":"487","line":4,"column":10,"nodeType":"455","messageId":"456","endLine":4,"endColumn":17},{"ruleId":"488","severity":1,"message":"489","line":3,"column":1,"nodeType":"490","endLine":21,"endColumn":2},{"ruleId":"488","severity":1,"message":"489","line":10,"column":1,"nodeType":"490","endLine":23,"endColumn":2},{"ruleId":"453","severity":1,"message":"457","line":1,"column":17,"nodeType":"455","messageId":"456","endLine":1,"endColumn":25},{"ruleId":"453","severity":1,"message":"458","line":1,"column":26,"nodeType":"455","messageId":"456","endLine":1,"endColumn":32},{"ruleId":"453","severity":1,"message":"454","line":1,"column":33,"nodeType":"455","messageId":"456","endLine":1,"endColumn":42},{"ruleId":"453","severity":1,"message":"484","line":2,"column":10,"nodeType":"455","messageId":"456","endLine":2,"endColumn":21},{"ruleId":"453","severity":1,"message":"491","line":2,"column":23,"nodeType":"455","messageId":"456","endLine":2,"endColumn":34},{"ruleId":"453","severity":1,"message":"457","line":1,"column":17,"nodeType":"455","messageId":"456","endLine":1,"endColumn":25},{"ruleId":"453","severity":1,"message":"454","line":1,"column":17,"nodeType":"455","messageId":"456","endLine":1,"endColumn":26},{"ruleId":"453","severity":1,"message":"458","line":1,"column":36,"nodeType":"455","messageId":"456","endLine":1,"endColumn":42},{"ruleId":"453","severity":1,"message":"458","line":1,"column":36,"nodeType":"455","messageId":"456","endLine":1,"endColumn":42},{"ruleId":"453","severity":1,"message":"454","line":1,"column":17,"nodeType":"455","messageId":"456","endLine":1,"endColumn":26},{"ruleId":"453","severity":1,"message":"492","line":2,"column":10,"nodeType":"455","messageId":"456","endLine":2,"endColumn":27},{"ruleId":"453","severity":1,"message":"493","line":6,"column":10,"nodeType":"455","messageId":"456","endLine":6,"endColumn":18},{"ruleId":"494","severity":1,"message":"495","line":107,"column":35,"nodeType":"496","messageId":"497","endLine":107,"endColumn":37},{"ruleId":"453","severity":1,"message":"498","line":3,"column":10,"nodeType":"455","messageId":"456","endLine":3,"endColumn":19},{"ruleId":"453","severity":1,"message":"492","line":6,"column":10,"nodeType":"455","messageId":"456","endLine":6,"endColumn":27},{"ruleId":"453","severity":1,"message":"499","line":35,"column":12,"nodeType":"455","messageId":"456","endLine":35,"endColumn":29},{"ruleId":"453","severity":1,"message":"500","line":35,"column":31,"nodeType":"455","messageId":"456","endLine":35,"endColumn":51},{"ruleId":"453","severity":1,"message":"501","line":32,"column":12,"nodeType":"455","messageId":"456","endLine":32,"endColumn":25},{"ruleId":"453","severity":1,"message":"454","line":1,"column":17,"nodeType":"455","messageId":"456","endLine":1,"endColumn":26},{"ruleId":"453","severity":1,"message":"457","line":1,"column":27,"nodeType":"455","messageId":"456","endLine":1,"endColumn":35},{"ruleId":"453","severity":1,"message":"458","line":1,"column":36,"nodeType":"455","messageId":"456","endLine":1,"endColumn":42},{"ruleId":"453","severity":1,"message":"458","line":1,"column":26,"nodeType":"455","messageId":"456","endLine":1,"endColumn":32},{"ruleId":"453","severity":1,"message":"502","line":2,"column":9,"nodeType":"455","messageId":"456","endLine":2,"endColumn":36},{"ruleId":"453","severity":1,"message":"458","line":1,"column":26,"nodeType":"455","messageId":"456","endLine":1,"endColumn":32},{"ruleId":"453","severity":1,"message":"484","line":2,"column":10,"nodeType":"455","messageId":"456","endLine":2,"endColumn":21},{"ruleId":"453","severity":1,"message":"503","line":2,"column":10,"nodeType":"455","messageId":"456","endLine":2,"endColumn":15},{"ruleId":"453","severity":1,"message":"504","line":3,"column":29,"nodeType":"455","messageId":"456","endLine":3,"endColumn":44},{"ruleId":"453","severity":1,"message":"505","line":45,"column":12,"nodeType":"455","messageId":"456","endLine":45,"endColumn":25},{"ruleId":"453","severity":1,"message":"506","line":45,"column":27,"nodeType":"455","messageId":"456","endLine":45,"endColumn":43},{"ruleId":"453","severity":1,"message":"507","line":54,"column":11,"nodeType":"455","messageId":"456","endLine":54,"endColumn":18},{"ruleId":"453","severity":1,"message":"508","line":55,"column":11,"nodeType":"455","messageId":"456","endLine":55,"endColumn":26},{"ruleId":"509","severity":1,"message":"510","line":194,"column":10,"nodeType":"511","endLine":194,"endColumn":23,"suggestions":"512"},{"ruleId":"509","severity":1,"message":"510","line":198,"column":8,"nodeType":"511","endLine":198,"endColumn":10,"suggestions":"513"},{"ruleId":"509","severity":1,"message":"510","line":203,"column":10,"nodeType":"511","endLine":203,"endColumn":16,"suggestions":"514"},{"ruleId":"453","severity":1,"message":"515","line":483,"column":14,"nodeType":"455","messageId":"456","endLine":483,"endColumn":26},{"ruleId":"453","severity":1,"message":"516","line":166,"column":17,"nodeType":"455","messageId":"456","endLine":166,"endColumn":22},{"ruleId":"453","severity":1,"message":"458","line":1,"column":26,"nodeType":"455","messageId":"456","endLine":1,"endColumn":32},{"ruleId":"509","severity":1,"message":"517","line":14,"column":8,"nodeType":"511","endLine":14,"endColumn":56,"suggestions":"518"},{"ruleId":"453","severity":1,"message":"458","line":1,"column":36,"nodeType":"455","messageId":"456","endLine":1,"endColumn":42},{"ruleId":"453","severity":1,"message":"491","line":4,"column":23,"nodeType":"455","messageId":"456","endLine":4,"endColumn":34},{"ruleId":"453","severity":1,"message":"458","line":1,"column":36,"nodeType":"455","messageId":"456","endLine":1,"endColumn":42},{"ruleId":"453","severity":1,"message":"519","line":2,"column":8,"nodeType":"455","messageId":"456","endLine":2,"endColumn":19},{"ruleId":"509","severity":1,"message":"520","line":66,"column":8,"nodeType":"511","endLine":66,"endColumn":17,"suggestions":"521"},{"ruleId":"453","severity":1,"message":"458","line":1,"column":36,"nodeType":"455","messageId":"456","endLine":1,"endColumn":42},{"ruleId":"509","severity":1,"message":"522","line":18,"column":8,"nodeType":"511","endLine":18,"endColumn":19,"suggestions":"523"},{"ruleId":"453","severity":1,"message":"457","line":1,"column":27,"nodeType":"455","messageId":"456","endLine":1,"endColumn":35},{"ruleId":"453","severity":1,"message":"484","line":2,"column":10,"nodeType":"455","messageId":"456","endLine":2,"endColumn":21},{"ruleId":"453","severity":1,"message":"458","line":1,"column":36,"nodeType":"455","messageId":"456","endLine":1,"endColumn":42},{"ruleId":"453","severity":1,"message":"503","line":3,"column":10,"nodeType":"455","messageId":"456","endLine":3,"endColumn":15},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'useRef' is defined but never used.","'socketService' is defined but never used.","no-native-reassign",["524"],"no-negated-in-lhs",["525"],"'runGuestLogin' is assigned a value but never used.","'setrunGuestLogin' is assigned a value but never used.","'BoardHeader' is defined but never used.","'BoardMain' is defined but never used.","'NewWorkspaceBoardMain' is defined but never used.","'BsFillStarFill' is defined but never used.","'BsPeople' is defined but never used.","'BsFilter' is defined but never used.","'BsPlus' is defined but never used.","'IoIosArrowDown' is defined but never used.","'IoMdNotifications' is defined but never used.","'HiOutlineSearch' is defined but never used.","'SiProbot' is defined but never used.","'ImTable' is defined but never used.","'BiUserCircle' is defined but never used.","'RiArrowUpDownFill' is defined but never used.","'HiPlusCircle' is defined but never used.","'workspaceService' is defined but never used.","'loggedInUser' is assigned a value but never used.","'isLoading' is assigned a value but never used.","'useDispatch' is defined but never used.","'TextareaEditor' is defined but never used.","'moment' is defined but never used.","'BiCheck' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'useSelector' is defined but never used.","'IoIosArrowForward' is defined but never used.","'VscTrash' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'SiPandora' is defined but never used.","'isOpenMoveToModal' is assigned a value but never used.","'setIsOpenMoveToModal' is assigned a value but never used.","'currWorkspace' is assigned a value but never used.","'IoArrowForwardCircleOutline' is defined but never used.","'Route' is defined but never used.","'TiVendorAndroid' is defined but never used.","'isMouseInside' is assigned a value but never used.","'setIsMouseInside' is assigned a value but never used.","'modalEl' is assigned a value but never used.","'dropdownModalEl' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'tick'. Either include it or remove the dependency array.","ArrayExpression",["526"],["527"],["528"],"'getMonthName' is defined but never used.","'board' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'loggedInUser.pinnedWorkspaces'. Either include it or remove the dependency array.",["529"],"'userService' is defined but never used.","React Hook useEffect has missing dependencies: 'onEditTask', 'startDate', 'table', 'task', and 'updateTimeline'. Either include them or remove the dependency array. If 'onEditTask' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["530"],"React Hook useEffect has missing dependencies: 'onEditTask', 'table', and 'task'. Either include them or remove the dependency array. If 'onEditTask' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["531"],"no-global-assign","no-unsafe-negation",{"desc":"532","fix":"533"},{"desc":"534","fix":"535"},{"desc":"536","fix":"537"},{"desc":"538","fix":"539"},{"desc":"540","fix":"541"},{"desc":"542","fix":"543"},"Update the dependencies array to be: [newInterval, tick]",{"range":"544","text":"545"},"Update the dependencies array to be: [tick]",{"range":"546","text":"547"},"Update the dependencies array to be: [task, tick]",{"range":"548","text":"549"},"Update the dependencies array to be: [workspace, loggedInUser.pinnedWorkspaces.length, loggedInUser.pinnedWorkspaces]",{"range":"550","text":"551"},"Update the dependencies array to be: [endDate, onEditTask, startDate, table, task, updateTimeline]",{"range":"552","text":"553"},"Update the dependencies array to be: [onEditTask, startDate, table, task]",{"range":"554","text":"555"},[6164,6177],"[newInterval, tick]",[6229,6231],"[tick]",[6324,6330],"[task, tick]",[543,591],"[workspace, loggedInUser.pinnedWorkspaces.length, loggedInUser.pinnedWorkspaces]",[2616,2625],"[endDate, onEditTask, startDate, table, task, updateTimeline]",[635,646],"[onEditTask, startDate, table, task]"]